["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/date/date.js"],"~:js","/**\n * @suppress {checkPrototypalTypes}\n */\ngoog.provide(\"goog.date\");\ngoog.provide(\"goog.date.Date\");\ngoog.provide(\"goog.date.DateTime\");\ngoog.provide(\"goog.date.Interval\");\ngoog.provide(\"goog.date.month\");\ngoog.provide(\"goog.date.weekDay\");\ngoog.require(\"goog.asserts\");\n/**\n * @suppress {extraRequire}\n */\ngoog.require(\"goog.date.DateLike\");\ngoog.require(\"goog.i18n.DateTimeSymbols\");\ngoog.require(\"goog.string\");\n/** @enum {number} */ goog.date.weekDay = {MON:0, TUE:1, WED:2, THU:3, FRI:4, SAT:5, SUN:6};\n/** @enum {number} */ goog.date.month = {JAN:0, FEB:1, MAR:2, APR:3, MAY:4, JUN:5, JUL:6, AUG:7, SEP:8, OCT:9, NOV:10, DEC:11};\n/**\n * @param {string} monthName\n * @param {number} yearNum\n * @return {string}\n * @deprecated Use goog.i18n.DateTimeFormat with goog.i18n.DateTimeFormat.Format.YEAR_MONTH_ABBR or goog.i18n.DateTimeFormat.Format.YEAR_MONTH_FULL.\n */\ngoog.date.formatMonthAndYear = function(monthName, yearNum) {\n  /**\n   * @desc Month/year format given the month name and the numeric year.\n   */\n  var MSG_MONTH_AND_YEAR = goog.getMsg(\"{$monthName} {$yearNum}\", {\"monthName\":monthName, \"yearNum\":String(yearNum)});\n  return MSG_MONTH_AND_YEAR;\n};\n/** @private @type {RegExp} */ goog.date.splitDateStringRegex_ = new RegExp(\"^(\\\\d{4})(?:(?:-?(\\\\d{2})(?:-?(\\\\d{2}))?)|\" + \"(?:-?(\\\\d{3}))|(?:-?W(\\\\d{2})(?:-?([1-7]))?))?$\");\n/** @private @type {RegExp} */ goog.date.splitTimeStringRegex_ = /^(\\d{2})(?::?(\\d{2})(?::?(\\d{2})(\\.\\d+)?)?)?$/;\n/** @private @type {RegExp} */ goog.date.splitTimezoneStringRegex_ = /Z|(?:([-+])(\\d{2})(?::?(\\d{2}))?)$/;\n/** @private @type {RegExp} */ goog.date.splitDurationRegex_ = new RegExp(\"^(-)?P(?:(\\\\d+)Y)?(?:(\\\\d+)M)?(?:(\\\\d+)D)?\" + \"(T(?:(\\\\d+)H)?(?:(\\\\d+)M)?(?:(\\\\d+(?:\\\\.\\\\d+)?)S)?)?$\");\n/** @type {number} */ goog.date.MS_PER_DAY = 24 * 60 * 60 * 1000;\n/**\n * @param {number} year\n * @return {boolean}\n */\ngoog.date.isLeapYear = function(year) {\n  return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n};\n/**\n * @param {number} year\n * @return {boolean}\n */\ngoog.date.isLongIsoYear = function(year) {\n  var n = 5 * year + 12 - 4 * (Math.floor(year / 100) - Math.floor(year / 400));\n  n += Math.floor((year - 100) / 400) - Math.floor((year - 102) / 400);\n  n += Math.floor((year - 200) / 400) - Math.floor((year - 199) / 400);\n  return n % 28 < 5;\n};\n/**\n * @param {number} year\n * @param {number} month\n * @return {number}\n */\ngoog.date.getNumberOfDaysInMonth = function(year, month) {\n  switch(month) {\n    case goog.date.month.FEB:\n      return goog.date.isLeapYear(year) ? 29 : 28;\n    case goog.date.month.JUN:\n    case goog.date.month.SEP:\n    case goog.date.month.NOV:\n    case goog.date.month.APR:\n      return 30;\n  }\n  return 31;\n};\n/**\n * @param {goog.date.DateLike} date\n * @param {goog.date.DateLike=} opt_now\n * @return {boolean}\n */\ngoog.date.isSameDay = function(date, opt_now) {\n  var now = opt_now || new Date(goog.now());\n  return date.getDate() == now.getDate() && goog.date.isSameMonth(date, now);\n};\n/**\n * @param {goog.date.DateLike} date\n * @param {goog.date.DateLike=} opt_now\n * @return {boolean}\n */\ngoog.date.isSameMonth = function(date, opt_now) {\n  var now = opt_now || new Date(goog.now());\n  return date.getMonth() == now.getMonth() && goog.date.isSameYear(date, now);\n};\n/**\n * @param {goog.date.DateLike} date\n * @param {goog.date.DateLike=} opt_now\n * @return {boolean}\n */\ngoog.date.isSameYear = function(date, opt_now) {\n  var now = opt_now || new Date(goog.now());\n  return date.getFullYear() == now.getFullYear();\n};\n/**\n * @private\n * @param {number} year\n * @param {number} month\n * @param {number} date\n * @param {number=} opt_weekDay\n * @param {number=} opt_firstDayOfWeek\n * @return {number}\n */\ngoog.date.getCutOffSameWeek_ = function(year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  var d = new Date(year, month, date);\n  var cutoff = goog.isDef(opt_weekDay) ? opt_weekDay : goog.date.weekDay.THU;\n  var firstday = opt_firstDayOfWeek || goog.date.weekDay.MON;\n  var isoday = (d.getDay() + 6) % 7;\n  var daypos = (isoday - firstday + 7) % 7;\n  var cutoffpos = (cutoff - firstday + 7) % 7;\n  return d.valueOf() + (cutoffpos - daypos) * goog.date.MS_PER_DAY;\n};\n/**\n * @param {number} year\n * @param {number} month\n * @param {number} date\n * @param {number=} opt_weekDay\n * @param {number=} opt_firstDayOfWeek\n * @return {number}\n */\ngoog.date.getWeekNumber = function(year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(year, month, date, opt_weekDay, opt_firstDayOfWeek);\n  var jan1 = (new Date((new Date(cutoffSameWeek)).getFullYear(), 0, 1)).valueOf();\n  return Math.floor(Math.round((cutoffSameWeek - jan1) / goog.date.MS_PER_DAY) / 7) + 1;\n};\n/**\n * @param {number} year\n * @param {number} month\n * @param {number} date\n * @param {number=} opt_weekDay\n * @param {number=} opt_firstDayOfWeek\n * @return {number}\n */\ngoog.date.getYearOfWeek = function(year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(year, month, date, opt_weekDay, opt_firstDayOfWeek);\n  return (new Date(cutoffSameWeek)).getFullYear();\n};\n/**\n * @param {T} date1\n * @param {S} date2\n * @return {(T|S)}\n * @template T, S\n */\ngoog.date.min = function(date1, date2) {\n  return date1 < date2 ? date1 : date2;\n};\n/**\n * @param {T} date1\n * @param {S} date2\n * @return {(T|S)}\n * @template T, S\n */\ngoog.date.max = function(date1, date2) {\n  return date1 > date2 ? date1 : date2;\n};\n/**\n * @param {!goog.date.DateTime} dateTime\n * @param {string} formatted\n * @return {boolean}\n */\ngoog.date.setIso8601DateTime = function(dateTime, formatted) {\n  formatted = goog.string.trim(formatted);\n  var delim = formatted.indexOf(\"T\") == -1 ? \" \" : \"T\";\n  var parts = formatted.split(delim);\n  return goog.date.setIso8601DateOnly_(dateTime, parts[0]) && (parts.length < 2 || goog.date.setIso8601TimeOnly_(dateTime, parts[1]));\n};\n/**\n * @private\n * @param {!goog.date.Date} d\n * @param {string} formatted\n * @return {boolean}\n */\ngoog.date.setIso8601DateOnly_ = function(d, formatted) {\n  var parts = formatted.match(goog.date.splitDateStringRegex_);\n  if (!parts) {\n    return false;\n  }\n  var year = Number(parts[1]);\n  var month = Number(parts[2]);\n  var date = Number(parts[3]);\n  var dayOfYear = Number(parts[4]);\n  var week = Number(parts[5]);\n  var dayOfWeek = Number(parts[6]) || 1;\n  d.setFullYear(year);\n  if (dayOfYear) {\n    d.setDate(1);\n    d.setMonth(0);\n    var offset = dayOfYear - 1;\n    d.add(new goog.date.Interval(goog.date.Interval.DAYS, offset));\n  } else {\n    if (week) {\n      goog.date.setDateFromIso8601Week_(d, week, dayOfWeek);\n    } else {\n      if (month) {\n        d.setDate(1);\n        d.setMonth(month - 1);\n      }\n      if (date) {\n        d.setDate(date);\n      }\n    }\n  }\n  return true;\n};\n/**\n * @private\n * @param {!goog.date.Date} d\n * @param {number} week\n * @param {number} dayOfWeek\n */\ngoog.date.setDateFromIso8601Week_ = function(d, week, dayOfWeek) {\n  d.setMonth(0);\n  d.setDate(1);\n  var jsDay = d.getDay();\n  var jan1WeekDay = jsDay || 7;\n  var THURSDAY = 4;\n  if (jan1WeekDay <= THURSDAY) {\n    var startDelta = 1 - jan1WeekDay;\n  } else {\n    startDelta = 8 - jan1WeekDay;\n  }\n  var absoluteDays = Number(dayOfWeek) + 7 * (Number(week) - 1);\n  var delta = startDelta + absoluteDays - 1;\n  var interval = new goog.date.Interval(goog.date.Interval.DAYS, delta);\n  d.add(interval);\n};\n/**\n * @private\n * @param {!goog.date.DateTime} d\n * @param {string} formatted\n * @return {boolean}\n */\ngoog.date.setIso8601TimeOnly_ = function(d, formatted) {\n  var parts = formatted.match(goog.date.splitTimezoneStringRegex_);\n  var offset = 0;\n  if (parts) {\n    if (parts[0] != \"Z\") {\n      offset = Number(parts[2]) * 60 + Number(parts[3]);\n      offset *= parts[1] == \"-\" ? 1 : -1;\n    }\n    offset -= d.getTimezoneOffset();\n    formatted = formatted.substr(0, formatted.length - parts[0].length);\n  }\n  parts = formatted.match(goog.date.splitTimeStringRegex_);\n  if (!parts) {\n    return false;\n  }\n  d.setHours(Number(parts[1]));\n  d.setMinutes(Number(parts[2]) || 0);\n  d.setSeconds(Number(parts[3]) || 0);\n  d.setMilliseconds(parts[4] ? Number(parts[4]) * 1000 : 0);\n  if (offset != 0) {\n    d.setTime(d.getTime() + offset * 60000);\n  }\n  return true;\n};\n/**\n * @final\n * @struct\n * @constructor\n * @param {(number|string)=} opt_years\n * @param {number=} opt_months\n * @param {number=} opt_days\n * @param {number=} opt_hours\n * @param {number=} opt_minutes\n * @param {number=} opt_seconds\n */\ngoog.date.Interval = function(opt_years, opt_months, opt_days, opt_hours, opt_minutes, opt_seconds) {\n  if (goog.isString(opt_years)) {\n    var type = opt_years;\n    var interval = /** @type {number} */ (opt_months);\n    /** @type {number} */ this.years = type == goog.date.Interval.YEARS ? interval : 0;\n    /** @type {number} */ this.months = type == goog.date.Interval.MONTHS ? interval : 0;\n    /** @type {number} */ this.days = type == goog.date.Interval.DAYS ? interval : 0;\n    /** @type {number} */ this.hours = type == goog.date.Interval.HOURS ? interval : 0;\n    /** @type {number} */ this.minutes = type == goog.date.Interval.MINUTES ? interval : 0;\n    /** @type {number} */ this.seconds = type == goog.date.Interval.SECONDS ? interval : 0;\n  } else {\n    this.years = /** @type {number} */ (opt_years) || 0;\n    this.months = opt_months || 0;\n    this.days = opt_days || 0;\n    this.hours = opt_hours || 0;\n    this.minutes = opt_minutes || 0;\n    this.seconds = opt_seconds || 0;\n  }\n};\n/**\n * @param {string} duration\n * @return {goog.date.Interval}\n */\ngoog.date.Interval.fromIsoString = function(duration) {\n  var parts = duration.match(goog.date.splitDurationRegex_);\n  if (!parts) {\n    return null;\n  }\n  var timeEmpty = !(parts[6] || parts[7] || parts[8]);\n  var dateTimeEmpty = timeEmpty && !(parts[2] || parts[3] || parts[4]);\n  if (dateTimeEmpty || timeEmpty && parts[5]) {\n    return null;\n  }\n  var negative = parts[1];\n  var years = parseInt(parts[2], 10) || 0;\n  var months = parseInt(parts[3], 10) || 0;\n  var days = parseInt(parts[4], 10) || 0;\n  var hours = parseInt(parts[6], 10) || 0;\n  var minutes = parseInt(parts[7], 10) || 0;\n  var seconds = parseFloat(parts[8]) || 0;\n  return negative ? new goog.date.Interval(-years, -months, -days, -hours, -minutes, -seconds) : new goog.date.Interval(years, months, days, hours, minutes, seconds);\n};\n/**\n * @param {boolean=} opt_verbose\n * @return {?string}\n */\ngoog.date.Interval.prototype.toIsoString = function(opt_verbose) {\n  var minField = Math.min(this.years, this.months, this.days, this.hours, this.minutes, this.seconds);\n  var maxField = Math.max(this.years, this.months, this.days, this.hours, this.minutes, this.seconds);\n  if (minField < 0 && maxField > 0) {\n    return null;\n  }\n  if (!opt_verbose && minField == 0 && maxField == 0) {\n    return \"PT0S\";\n  }\n  var res = [];\n  if (minField < 0) {\n    res.push(\"-\");\n  }\n  res.push(\"P\");\n  if (this.years || opt_verbose) {\n    res.push(Math.abs(this.years) + \"Y\");\n  }\n  if (this.months || opt_verbose) {\n    res.push(Math.abs(this.months) + \"M\");\n  }\n  if (this.days || opt_verbose) {\n    res.push(Math.abs(this.days) + \"D\");\n  }\n  if (this.hours || this.minutes || this.seconds || opt_verbose) {\n    res.push(\"T\");\n    if (this.hours || opt_verbose) {\n      res.push(Math.abs(this.hours) + \"H\");\n    }\n    if (this.minutes || opt_verbose) {\n      res.push(Math.abs(this.minutes) + \"M\");\n    }\n    if (this.seconds || opt_verbose) {\n      res.push(Math.abs(this.seconds) + \"S\");\n    }\n  }\n  return res.join(\"\");\n};\n/**\n * @param {goog.date.Interval} other\n * @return {boolean}\n */\ngoog.date.Interval.prototype.equals = function(other) {\n  return other.years == this.years && other.months == this.months && other.days == this.days && other.hours == this.hours && other.minutes == this.minutes && other.seconds == this.seconds;\n};\n/**\n * @return {!goog.date.Interval}\n */\ngoog.date.Interval.prototype.clone = function() {\n  return new goog.date.Interval(this.years, this.months, this.days, this.hours, this.minutes, this.seconds);\n};\n/** @type {string} */ goog.date.Interval.YEARS = \"y\";\n/** @type {string} */ goog.date.Interval.MONTHS = \"m\";\n/** @type {string} */ goog.date.Interval.DAYS = \"d\";\n/** @type {string} */ goog.date.Interval.HOURS = \"h\";\n/** @type {string} */ goog.date.Interval.MINUTES = \"n\";\n/** @type {string} */ goog.date.Interval.SECONDS = \"s\";\n/**\n * @return {boolean}\n */\ngoog.date.Interval.prototype.isZero = function() {\n  return this.years == 0 && this.months == 0 && this.days == 0 && this.hours == 0 && this.minutes == 0 && this.seconds == 0;\n};\n/**\n * @return {!goog.date.Interval}\n */\ngoog.date.Interval.prototype.getInverse = function() {\n  return this.times(-1);\n};\n/**\n * @param {number} n\n * @return {!goog.date.Interval}\n */\ngoog.date.Interval.prototype.times = function(n) {\n  return new goog.date.Interval(this.years * n, this.months * n, this.days * n, this.hours * n, this.minutes * n, this.seconds * n);\n};\n/**\n * @return {number}\n */\ngoog.date.Interval.prototype.getTotalSeconds = function() {\n  goog.asserts.assert(this.years == 0 && this.months == 0);\n  return ((this.days * 24 + this.hours) * 60 + this.minutes) * 60 + this.seconds;\n};\n/**\n * @param {goog.date.Interval} interval\n */\ngoog.date.Interval.prototype.add = function(interval) {\n  this.years += interval.years;\n  this.months += interval.months;\n  this.days += interval.days;\n  this.hours += interval.hours;\n  this.minutes += interval.minutes;\n  this.seconds += interval.seconds;\n};\n/**\n * @struct\n * @constructor\n * @param {(number|goog.date.DateLike)=} opt_year\n * @param {number=} opt_month\n * @param {number=} opt_date\n */\ngoog.date.Date = function(opt_year, opt_month, opt_date) {\n  /** @protected @type {!Date} */ this.date;\n  if (goog.isNumber(opt_year)) {\n    this.date = this.buildDate_(opt_year, opt_month || 0, opt_date || 1);\n    this.maybeFixDst_(opt_date || 1);\n  } else {\n    if (goog.isObject(opt_year)) {\n      this.date = this.buildDate_(opt_year.getFullYear(), opt_year.getMonth(), opt_year.getDate());\n      this.maybeFixDst_(opt_year.getDate());\n    } else {\n      this.date = new Date(goog.now());\n      var expectedDate = this.date.getDate();\n      this.date.setHours(0);\n      this.date.setMinutes(0);\n      this.date.setSeconds(0);\n      this.date.setMilliseconds(0);\n      this.maybeFixDst_(expectedDate);\n    }\n  }\n};\n/**\n * @private\n * @param {number} fullYear\n * @param {number} month\n * @param {number} date\n * @return {!Date}\n */\ngoog.date.Date.prototype.buildDate_ = function(fullYear, month, date) {\n  var d = new Date(fullYear, month, date);\n  if (fullYear >= 0 && fullYear < 100) {\n    d.setFullYear(d.getFullYear() - 1900);\n  }\n  return d;\n};\n/** @private @type {number} */ goog.date.Date.prototype.firstDayOfWeek_ = goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK;\n/** @private @type {number} */ goog.date.Date.prototype.firstWeekCutOffDay_ = goog.i18n.DateTimeSymbols.FIRSTWEEKCUTOFFDAY;\n/**\n * @return {!goog.date.Date}\n */\ngoog.date.Date.prototype.clone = function() {\n  var date = new goog.date.Date(this.date);\n  date.firstDayOfWeek_ = this.firstDayOfWeek_;\n  date.firstWeekCutOffDay_ = this.firstWeekCutOffDay_;\n  return date;\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getFullYear = function() {\n  return this.date.getFullYear();\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getYear = function() {\n  return this.getFullYear();\n};\n/**\n * @return {goog.date.month}\n */\ngoog.date.Date.prototype.getMonth = function() {\n  return (/** @type {goog.date.month} */ (this.date.getMonth()));\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getDate = function() {\n  return this.date.getDate();\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getTime = function() {\n  return this.date.getTime();\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getDay = function() {\n  return this.date.getDay();\n};\n/**\n * @return {goog.date.weekDay}\n */\ngoog.date.Date.prototype.getIsoWeekday = function() {\n  return (/** @type {goog.date.weekDay} */ ((this.getDay() + 6) % 7));\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getWeekday = function() {\n  return (this.getIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getUTCFullYear = function() {\n  return this.date.getUTCFullYear();\n};\n/**\n * @return {goog.date.month}\n */\ngoog.date.Date.prototype.getUTCMonth = function() {\n  return (/** @type {goog.date.month} */ (this.date.getUTCMonth()));\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getUTCDate = function() {\n  return this.date.getUTCDate();\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getUTCDay = function() {\n  return this.date.getDay();\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getUTCHours = function() {\n  return this.date.getUTCHours();\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getUTCMinutes = function() {\n  return this.date.getUTCMinutes();\n};\n/**\n * @return {goog.date.weekDay}\n */\ngoog.date.Date.prototype.getUTCIsoWeekday = function() {\n  return (/** @type {goog.date.weekDay} */ ((this.date.getUTCDay() + 6) % 7));\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getUTCWeekday = function() {\n  return (this.getUTCIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getFirstDayOfWeek = function() {\n  return this.firstDayOfWeek_;\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getFirstWeekCutOffDay = function() {\n  return this.firstWeekCutOffDay_;\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getNumberOfDaysInMonth = function() {\n  return goog.date.getNumberOfDaysInMonth(this.getFullYear(), this.getMonth());\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getWeekNumber = function() {\n  return goog.date.getWeekNumber(this.getFullYear(), this.getMonth(), this.getDate(), this.firstWeekCutOffDay_, this.firstDayOfWeek_);\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getYearOfWeek = function() {\n  return goog.date.getYearOfWeek(this.getFullYear(), this.getMonth(), this.getDate(), this.firstWeekCutOffDay_, this.firstDayOfWeek_);\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getDayOfYear = function() {\n  var dayOfYear = this.getDate();\n  var year = this.getFullYear();\n  for (var m = this.getMonth() - 1; m >= 0; m--) {\n    dayOfYear += goog.date.getNumberOfDaysInMonth(year, m);\n  }\n  return dayOfYear;\n};\n/**\n * @return {number}\n */\ngoog.date.Date.prototype.getTimezoneOffset = function() {\n  return this.date.getTimezoneOffset();\n};\n/**\n * @return {string}\n */\ngoog.date.Date.prototype.getTimezoneOffsetString = function() {\n  var tz;\n  var offset = this.getTimezoneOffset();\n  if (offset == 0) {\n    tz = \"Z\";\n  } else {\n    var n = Math.abs(offset) / 60;\n    var h = Math.floor(n);\n    var m = (n - h) * 60;\n    tz = (offset > 0 ? \"-\" : \"+\") + goog.string.padNumber(h, 2) + \":\" + goog.string.padNumber(m, 2);\n  }\n  return tz;\n};\n/**\n * @param {goog.date.Date} date\n */\ngoog.date.Date.prototype.set = function(date) {\n  this.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n};\n/**\n * @param {number} year\n */\ngoog.date.Date.prototype.setFullYear = function(year) {\n  this.date.setFullYear(year);\n};\n/**\n * @param {number} year\n */\ngoog.date.Date.prototype.setYear = function(year) {\n  this.setFullYear(year);\n};\n/**\n * @param {number} month\n */\ngoog.date.Date.prototype.setMonth = function(month) {\n  this.date.setMonth(month);\n};\n/**\n * @param {number} date\n */\ngoog.date.Date.prototype.setDate = function(date) {\n  this.date.setDate(date);\n};\n/**\n * @param {number} ms\n */\ngoog.date.Date.prototype.setTime = function(ms) {\n  this.date.setTime(ms);\n};\n/**\n * @param {number} year\n */\ngoog.date.Date.prototype.setUTCFullYear = function(year) {\n  this.date.setUTCFullYear(year);\n};\n/**\n * @param {number} month\n */\ngoog.date.Date.prototype.setUTCMonth = function(month) {\n  this.date.setUTCMonth(month);\n};\n/**\n * @param {number} date\n */\ngoog.date.Date.prototype.setUTCDate = function(date) {\n  this.date.setUTCDate(date);\n};\n/**\n * @param {number} day\n */\ngoog.date.Date.prototype.setFirstDayOfWeek = function(day) {\n  this.firstDayOfWeek_ = day;\n};\n/**\n * @param {number} day\n */\ngoog.date.Date.prototype.setFirstWeekCutOffDay = function(day) {\n  this.firstWeekCutOffDay_ = day;\n};\n/**\n * @param {goog.date.Interval} interval\n */\ngoog.date.Date.prototype.add = function(interval) {\n  if (interval.years || interval.months) {\n    var month = this.getMonth() + interval.months + interval.years * 12;\n    var year = this.getYear() + Math.floor(month / 12);\n    month %= 12;\n    if (month < 0) {\n      month += 12;\n    }\n    var daysInTargetMonth = goog.date.getNumberOfDaysInMonth(year, month);\n    var date = Math.min(daysInTargetMonth, this.getDate());\n    this.setDate(1);\n    this.setFullYear(year);\n    this.setMonth(month);\n    this.setDate(date);\n  }\n  if (interval.days) {\n    var noon = new Date(this.getYear(), this.getMonth(), this.getDate(), 12);\n    var result = new Date(noon.getTime() + interval.days * 86400000);\n    this.setDate(1);\n    this.setFullYear(result.getFullYear());\n    this.setMonth(result.getMonth());\n    this.setDate(result.getDate());\n    this.maybeFixDst_(result.getDate());\n  }\n};\n/**\n * @param {boolean=} opt_verbose\n * @param {boolean=} opt_tz\n * @return {string}\n */\ngoog.date.Date.prototype.toIsoString = function(opt_verbose, opt_tz) {\n  var str = [this.getFullYear(), goog.string.padNumber(this.getMonth() + 1, 2), goog.string.padNumber(this.getDate(), 2)];\n  return str.join(opt_verbose ? \"-\" : \"\") + (opt_tz ? this.getTimezoneOffsetString() : \"\");\n};\n/**\n * @param {boolean=} opt_verbose\n * @param {boolean=} opt_tz\n * @return {string}\n */\ngoog.date.Date.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\n  var str = [this.getUTCFullYear(), goog.string.padNumber(this.getUTCMonth() + 1, 2), goog.string.padNumber(this.getUTCDate(), 2)];\n  return str.join(opt_verbose ? \"-\" : \"\") + (opt_tz ? \"Z\" : \"\");\n};\n/**\n * @param {goog.date.Date} other\n * @return {boolean}\n */\ngoog.date.Date.prototype.equals = function(other) {\n  return !!(other && this.getYear() == other.getYear() && this.getMonth() == other.getMonth() && this.getDate() == other.getDate());\n};\n/**\n * @return {string}\n * @override\n */\ngoog.date.Date.prototype.toString = function() {\n  return this.toIsoString();\n};\n/**\n * @private\n * @param {number} expected\n */\ngoog.date.Date.prototype.maybeFixDst_ = function(expected) {\n  if (this.getDate() != expected) {\n    var dir = this.getDate() < expected ? 1 : -1;\n    this.date.setUTCHours(this.date.getUTCHours() + dir);\n  }\n};\n/**\n * @return {number}\n * @override\n */\ngoog.date.Date.prototype.valueOf = function() {\n  return this.date.valueOf();\n};\n/**\n * @param {!goog.date.DateLike} date1\n * @param {!goog.date.DateLike} date2\n * @return {number}\n */\ngoog.date.Date.compare = function(date1, date2) {\n  return date1.getTime() - date2.getTime();\n};\n/**\n * @param {string} formatted\n * @return {?goog.date.Date}\n */\ngoog.date.Date.fromIsoString = function(formatted) {\n  var ret = new goog.date.Date(2000);\n  return goog.date.setIso8601DateOnly_(ret, formatted) ? ret : null;\n};\n/**\n * @struct\n * @constructor\n * @extends {goog.date.Date}\n * @param {(number|{getTime:?}|null)=} opt_year\n * @param {number=} opt_month\n * @param {number=} opt_date\n * @param {number=} opt_hours\n * @param {number=} opt_minutes\n * @param {number=} opt_seconds\n * @param {number=} opt_milliseconds\n */\ngoog.date.DateTime = function(opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds, opt_milliseconds) {\n  if (goog.isNumber(opt_year)) {\n    /** @override */ this.date = new Date(opt_year, opt_month || 0, opt_date || 1, opt_hours || 0, opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);\n  } else {\n    this.date = new Date(opt_year && opt_year.getTime ? opt_year.getTime() : goog.now());\n  }\n};\ngoog.inherits(goog.date.DateTime, goog.date.Date);\n/**\n * @param {number} timestamp\n * @return {!goog.date.DateTime}\n */\ngoog.date.DateTime.fromTimestamp = function(timestamp) {\n  var date = new goog.date.DateTime;\n  date.setTime(timestamp);\n  return date;\n};\n/**\n * @param {string} formatted\n * @return {goog.date.DateTime}\n */\ngoog.date.DateTime.fromRfc822String = function(formatted) {\n  var date = new Date(formatted);\n  return !isNaN(date.getTime()) ? new goog.date.DateTime(date) : null;\n};\n/**\n * @return {number}\n */\ngoog.date.DateTime.prototype.getHours = function() {\n  return this.date.getHours();\n};\n/**\n * @return {number}\n */\ngoog.date.DateTime.prototype.getMinutes = function() {\n  return this.date.getMinutes();\n};\n/**\n * @return {number}\n */\ngoog.date.DateTime.prototype.getSeconds = function() {\n  return this.date.getSeconds();\n};\n/**\n * @return {number}\n */\ngoog.date.DateTime.prototype.getMilliseconds = function() {\n  return this.date.getMilliseconds();\n};\n/**\n * @return {goog.date.weekDay}\n * @override\n */\ngoog.date.DateTime.prototype.getUTCDay = function() {\n  return (/** @type {goog.date.weekDay} */ (this.date.getUTCDay()));\n};\n/**\n * @return {number}\n * @override\n */\ngoog.date.DateTime.prototype.getUTCHours = function() {\n  return this.date.getUTCHours();\n};\n/**\n * @return {number}\n * @override\n */\ngoog.date.DateTime.prototype.getUTCMinutes = function() {\n  return this.date.getUTCMinutes();\n};\n/**\n * @return {number}\n */\ngoog.date.DateTime.prototype.getUTCSeconds = function() {\n  return this.date.getUTCSeconds();\n};\n/**\n * @return {number}\n */\ngoog.date.DateTime.prototype.getUTCMilliseconds = function() {\n  return this.date.getUTCMilliseconds();\n};\n/**\n * @param {number} hours\n */\ngoog.date.DateTime.prototype.setHours = function(hours) {\n  this.date.setHours(hours);\n};\n/**\n * @param {number} minutes\n */\ngoog.date.DateTime.prototype.setMinutes = function(minutes) {\n  this.date.setMinutes(minutes);\n};\n/**\n * @param {number} seconds\n */\ngoog.date.DateTime.prototype.setSeconds = function(seconds) {\n  this.date.setSeconds(seconds);\n};\n/**\n * @param {number} ms\n */\ngoog.date.DateTime.prototype.setMilliseconds = function(ms) {\n  this.date.setMilliseconds(ms);\n};\n/**\n * @param {number} hours\n */\ngoog.date.DateTime.prototype.setUTCHours = function(hours) {\n  this.date.setUTCHours(hours);\n};\n/**\n * @param {number} minutes\n */\ngoog.date.DateTime.prototype.setUTCMinutes = function(minutes) {\n  this.date.setUTCMinutes(minutes);\n};\n/**\n * @param {number} seconds\n */\ngoog.date.DateTime.prototype.setUTCSeconds = function(seconds) {\n  this.date.setUTCSeconds(seconds);\n};\n/**\n * @param {number} ms\n */\ngoog.date.DateTime.prototype.setUTCMilliseconds = function(ms) {\n  this.date.setUTCMilliseconds(ms);\n};\n/**\n * @return {boolean}\n */\ngoog.date.DateTime.prototype.isMidnight = function() {\n  return this.getHours() == 0 && this.getMinutes() == 0 && this.getSeconds() == 0 && this.getMilliseconds() == 0;\n};\n/**\n * @param {goog.date.Interval} interval\n * @override\n */\ngoog.date.DateTime.prototype.add = function(interval) {\n  goog.date.Date.prototype.add.call(this, interval);\n  if (interval.hours) {\n    this.setUTCHours(this.date.getUTCHours() + interval.hours);\n  }\n  if (interval.minutes) {\n    this.setUTCMinutes(this.date.getUTCMinutes() + interval.minutes);\n  }\n  if (interval.seconds) {\n    this.setUTCSeconds(this.date.getUTCSeconds() + interval.seconds);\n  }\n};\n/**\n * @param {boolean=} opt_verbose\n * @param {boolean=} opt_tz\n * @return {string}\n * @override\n */\ngoog.date.DateTime.prototype.toIsoString = function(opt_verbose, opt_tz) {\n  var dateString = goog.date.Date.prototype.toIsoString.call(this, opt_verbose);\n  if (opt_verbose) {\n    return dateString + \" \" + goog.string.padNumber(this.getHours(), 2) + \":\" + goog.string.padNumber(this.getMinutes(), 2) + \":\" + goog.string.padNumber(this.getSeconds(), 2) + (opt_tz ? this.getTimezoneOffsetString() : \"\");\n  }\n  return dateString + \"T\" + goog.string.padNumber(this.getHours(), 2) + goog.string.padNumber(this.getMinutes(), 2) + goog.string.padNumber(this.getSeconds(), 2) + (opt_tz ? this.getTimezoneOffsetString() : \"\");\n};\n/**\n * @param {boolean=} opt_timezone\n * @return {string}\n */\ngoog.date.DateTime.prototype.toXmlDateTime = function(opt_timezone) {\n  return goog.date.Date.prototype.toIsoString.call(this, true) + \"T\" + goog.string.padNumber(this.getHours(), 2) + \":\" + goog.string.padNumber(this.getMinutes(), 2) + \":\" + goog.string.padNumber(this.getSeconds(), 2) + (opt_timezone ? this.getTimezoneOffsetString() : \"\");\n};\n/**\n * @param {boolean=} opt_verbose\n * @param {boolean=} opt_tz\n * @return {string}\n * @override\n */\ngoog.date.DateTime.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\n  var dateStr = goog.date.Date.prototype.toUTCIsoString.call(this, opt_verbose);\n  if (opt_verbose) {\n    return dateStr + \" \" + goog.string.padNumber(this.getUTCHours(), 2) + \":\" + goog.string.padNumber(this.getUTCMinutes(), 2) + \":\" + goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? \"Z\" : \"\");\n  }\n  return dateStr + \"T\" + goog.string.padNumber(this.getUTCHours(), 2) + goog.string.padNumber(this.getUTCMinutes(), 2) + goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? \"Z\" : \"\");\n};\n/**\n * @return {string}\n */\ngoog.date.DateTime.prototype.toUTCRfc3339String = function() {\n  var date = this.toUTCIsoString(true).replace(\" \", \"T\");\n  var millis = this.getUTCMilliseconds();\n  return (millis ? date + \".\" + goog.string.padNumber(millis, 3) : date) + \"Z\";\n};\n/**\n * @param {goog.date.Date} other\n * @return {boolean}\n * @override\n */\ngoog.date.DateTime.prototype.equals = function(other) {\n  return this.getTime() == other.getTime();\n};\n/**\n * @return {string}\n * @override\n */\ngoog.date.DateTime.prototype.toString = function() {\n  return this.toIsoString();\n};\n/**\n * @param {boolean=} opt_padHours\n * @param {boolean=} opt_showAmPm\n * @param {boolean=} opt_omitZeroMinutes\n * @return {string}\n * @deprecated Use goog.i18n.DateTimeFormat with goog.i18n.DateTimeFormat.Format.FULL_TIME or goog.i18n.DateTimeFormat.Format.LONG_TIME or goog.i18n.DateTimeFormat.Format.MEDIUM_TIME or goog.i18n.DateTimeFormat.Format.SHORT_TIME.\n */\ngoog.date.DateTime.prototype.toUsTimeString = function(opt_padHours, opt_showAmPm, opt_omitZeroMinutes) {\n  var hours = this.getHours();\n  if (!goog.isDef(opt_showAmPm)) {\n    opt_showAmPm = true;\n  }\n  var isPM = hours == 12;\n  if (hours > 12) {\n    hours -= 12;\n    isPM = true;\n  }\n  if (hours == 0 && opt_showAmPm) {\n    hours = 12;\n  }\n  var label = opt_padHours ? goog.string.padNumber(hours, 2) : String(hours);\n  var minutes = this.getMinutes();\n  if (!opt_omitZeroMinutes || minutes > 0) {\n    label += \":\" + goog.string.padNumber(minutes, 2);\n  }\n  if (opt_showAmPm) {\n    label += isPM ? \" PM\" : \" AM\";\n  }\n  return label;\n};\n/**\n * @param {boolean=} opt_showSeconds\n * @return {string}\n */\ngoog.date.DateTime.prototype.toIsoTimeString = function(opt_showSeconds) {\n  var hours = this.getHours();\n  var label = goog.string.padNumber(hours, 2) + \":\" + goog.string.padNumber(this.getMinutes(), 2);\n  if (!goog.isDef(opt_showSeconds) || opt_showSeconds) {\n    label += \":\" + goog.string.padNumber(this.getSeconds(), 2);\n  }\n  return label;\n};\n/**\n * @return {!goog.date.DateTime}\n * @override\n */\ngoog.date.DateTime.prototype.clone = function() {\n  var date = new goog.date.DateTime(this.date);\n  date.setFirstDayOfWeek(this.getFirstDayOfWeek());\n  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());\n  return date;\n};\n/**\n * @param {string} formatted\n * @return {?goog.date.DateTime}\n * @override\n */\ngoog.date.DateTime.fromIsoString = function(formatted) {\n  var ret = new goog.date.DateTime(2000);\n  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;\n};\n","~:source","// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Functions and objects for date representation and manipulation.\n * @suppress {checkPrototypalTypes}\n *\n * @author eae@google.com (Emil A Eklund)\n */\n\ngoog.provide('goog.date');\ngoog.provide('goog.date.Date');\ngoog.provide('goog.date.DateTime');\ngoog.provide('goog.date.Interval');\ngoog.provide('goog.date.month');\ngoog.provide('goog.date.weekDay');\n\ngoog.require('goog.asserts');\n/** @suppress {extraRequire} */\ngoog.require('goog.date.DateLike');\ngoog.require('goog.i18n.DateTimeSymbols');\ngoog.require('goog.string');\n\n\n/**\n * Constants for weekdays.\n * @enum {number}\n */\ngoog.date.weekDay = {\n  MON: 0,\n  TUE: 1,\n  WED: 2,\n  THU: 3,\n  FRI: 4,\n  SAT: 5,\n  SUN: 6\n};\n\n\n/**\n * Constants for months.\n * @enum {number}\n */\ngoog.date.month = {\n  JAN: 0,\n  FEB: 1,\n  MAR: 2,\n  APR: 3,\n  MAY: 4,\n  JUN: 5,\n  JUL: 6,\n  AUG: 7,\n  SEP: 8,\n  OCT: 9,\n  NOV: 10,\n  DEC: 11\n};\n\n\n/**\n * Formats a month/year string.\n * Example: \"January 2008\"\n *\n * @param {string} monthName The month name to use in the result.\n * @param {number} yearNum The numeric year to use in the result.\n * @return {string} A formatted month/year string.\n * @deprecated Use goog.i18n.DateTimeFormat with\n *     goog.i18n.DateTimeFormat.Format.YEAR_MONTH_ABBR or\n *     goog.i18n.DateTimeFormat.Format.YEAR_MONTH_FULL.\n */\ngoog.date.formatMonthAndYear = function(monthName, yearNum) {\n  /** @desc Month/year format given the month name and the numeric year. */\n  var MSG_MONTH_AND_YEAR = goog.getMsg(\n      '{$monthName} {$yearNum}',\n      {'monthName': monthName, 'yearNum': String(yearNum)});\n  return MSG_MONTH_AND_YEAR;\n};\n\n\n/**\n * Regular expression for splitting date parts from ISO 8601 styled string.\n * Examples: '20060210' or '2005-02-22' or '20050222' or '2005-08'\n * or '2005-W22' or '2005W22' or '2005-W22-4', etc.\n * For explanation and more examples, see:\n * {@link http://en.wikipedia.org/wiki/ISO_8601}\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitDateStringRegex_ = new RegExp(\n    '^(\\\\d{4})(?:(?:-?(\\\\d{2})(?:-?(\\\\d{2}))?)|' +\n    '(?:-?(\\\\d{3}))|(?:-?W(\\\\d{2})(?:-?([1-7]))?))?$');\n\n\n/**\n * Regular expression for splitting time parts from ISO 8601 styled string.\n * Examples: '18:46:39.994' or '184639.994'\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitTimeStringRegex_ =\n    /^(\\d{2})(?::?(\\d{2})(?::?(\\d{2})(\\.\\d+)?)?)?$/;\n\n\n/**\n * Regular expression for splitting timezone parts from ISO 8601 styled string.\n * Example: The part after the '+' in '18:46:39+07:00'.  Or '09:30Z' (UTC).\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitTimezoneStringRegex_ = /Z|(?:([-+])(\\d{2})(?::?(\\d{2}))?)$/;\n\n\n/**\n * Regular expression for splitting duration parts from ISO 8601 styled string.\n * Example: '-P1Y2M3DT4H5M6.7S'\n *\n * @type {RegExp}\n * @private\n */\ngoog.date.splitDurationRegex_ = new RegExp(\n    '^(-)?P(?:(\\\\d+)Y)?(?:(\\\\d+)M)?(?:(\\\\d+)D)?' +\n    '(T(?:(\\\\d+)H)?(?:(\\\\d+)M)?(?:(\\\\d+(?:\\\\.\\\\d+)?)S)?)?$');\n\n\n/**\n * Number of milliseconds in a day.\n * @type {number}\n */\ngoog.date.MS_PER_DAY = 24 * 60 * 60 * 1000;\n\n\n/**\n * Returns whether the given year is a leap year.\n *\n * @param {number} year Year part of date.\n * @return {boolean} Whether the given year is a leap year.\n */\ngoog.date.isLeapYear = function(year) {\n  // Leap year logic; the 4-100-400 rule\n  return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n};\n\n\n/**\n * Returns whether the given year is a long ISO year.\n * See {@link http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm}.\n *\n * @param {number} year Full year part of date.\n * @return {boolean} Whether the given year is a long ISO year.\n */\ngoog.date.isLongIsoYear = function(year) {\n  var n = 5 * year + 12 - 4 * (Math.floor(year / 100) - Math.floor(year / 400));\n  n += Math.floor((year - 100) / 400) - Math.floor((year - 102) / 400);\n  n += Math.floor((year - 200) / 400) - Math.floor((year - 199) / 400);\n\n  return n % 28 < 5;\n};\n\n\n/**\n * Returns the number of days for a given month.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date.\n * @return {number} The number of days for the given month.\n */\ngoog.date.getNumberOfDaysInMonth = function(year, month) {\n  switch (month) {\n    case goog.date.month.FEB:\n      return goog.date.isLeapYear(year) ? 29 : 28;\n    case goog.date.month.JUN:\n    case goog.date.month.SEP:\n    case goog.date.month.NOV:\n    case goog.date.month.APR:\n      return 30;\n  }\n  return 31;\n};\n\n\n/**\n * Returns true if the 2 dates are in the same day.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are on the same day.\n */\ngoog.date.isSameDay = function(date, opt_now) {\n  var now = opt_now || new Date(goog.now());\n  return date.getDate() == now.getDate() && goog.date.isSameMonth(date, now);\n};\n\n\n/**\n * Returns true if the 2 dates are in the same month.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are in the same calendar month.\n */\ngoog.date.isSameMonth = function(date, opt_now) {\n  var now = opt_now || new Date(goog.now());\n  return date.getMonth() == now.getMonth() && goog.date.isSameYear(date, now);\n};\n\n\n/**\n * Returns true if the 2 dates are in the same year.\n * @param {goog.date.DateLike} date The time to check.\n * @param {goog.date.DateLike=} opt_now The current time.\n * @return {boolean} Whether the dates are in the same calendar year.\n */\ngoog.date.isSameYear = function(date, opt_now) {\n  var now = opt_now || new Date(goog.now());\n  return date.getFullYear() == now.getFullYear();\n};\n\n\n/**\n * Static function for the day of the same week that determines the week number\n * and year of week.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} the cutoff day of the same week in millis since epoch.\n * @private\n */\ngoog.date.getCutOffSameWeek_ = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  var d = new Date(year, month, date);\n\n  // Default to Thursday for cut off as per ISO 8601.\n  var cutoff = goog.isDef(opt_weekDay) ? opt_weekDay : goog.date.weekDay.THU;\n\n  // Default to Monday for first day of the week as per ISO 8601.\n  var firstday = opt_firstDayOfWeek || goog.date.weekDay.MON;\n\n  // The d.getDay() has to be converted first to ISO weekday (Monday=0).\n  var isoday = (d.getDay() + 6) % 7;\n\n  // Position of given day in the picker grid w.r.t. first day of week\n  var daypos = (isoday - firstday + 7) % 7;\n\n  // Position of cut off day in the picker grid w.r.t. first day of week\n  var cutoffpos = (cutoff - firstday + 7) % 7;\n\n  // Unix timestamp of the midnight of the cutoff day in the week of 'd'.\n  // There might be +-1 hour shift in the result due to the daylight saving,\n  // but it doesn't affect the year.\n  return d.valueOf() + (cutoffpos - daypos) * goog.date.MS_PER_DAY;\n};\n\n\n/**\n * Static function for week number calculation. ISO 8601 implementation.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} The week number (1-53).\n */\ngoog.date.getWeekNumber = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(\n      year, month, date, opt_weekDay, opt_firstDayOfWeek);\n\n  // Unix timestamp of January 1 in the year of the week.\n  var jan1 = new Date(new Date(cutoffSameWeek).getFullYear(), 0, 1).valueOf();\n\n  // Number of week. The round() eliminates the effect of daylight saving.\n  return Math.floor(\n             Math.round((cutoffSameWeek - jan1) / goog.date.MS_PER_DAY) / 7) +\n      1;\n};\n\n\n/**\n * Static function for year of the week. ISO 8601 implementation.\n *\n * @param {number} year Year part of date.\n * @param {number} month Month part of date (0-11).\n * @param {number} date Day part of date (1-31).\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\n *     Monday.\n *     Monday=0, Sunday=6.\n * @return {number} The four digit year of date.\n */\ngoog.date.getYearOfWeek = function(\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(\n      year, month, date, opt_weekDay, opt_firstDayOfWeek);\n\n  return new Date(cutoffSameWeek).getFullYear();\n};\n\n\n/**\n * @param {T} date1 A datelike object.\n * @param {S} date2 Another datelike object.\n * @return {T|S} The earlier of them in time.\n * @template T,S\n */\ngoog.date.min = function(date1, date2) {\n  return date1 < date2 ? date1 : date2;\n};\n\n\n/**\n * @param {T} date1 A datelike object.\n * @param {S} date2 Another datelike object.\n * @return {T|S} The later of them in time.\n * @template T,S\n */\ngoog.date.max = function(date1, date2) {\n  return date1 > date2 ? date1 : date2;\n};\n\n\n/**\n * Parses a datetime string expressed in ISO 8601 format. Overwrites the date\n * and optionally the time part of the given object with the parsed values.\n *\n * @param {!goog.date.DateTime} dateTime Object whose fields will be set.\n * @param {string} formatted A date or datetime expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n */\ngoog.date.setIso8601DateTime = function(dateTime, formatted) {\n  formatted = goog.string.trim(formatted);\n  var delim = formatted.indexOf('T') == -1 ? ' ' : 'T';\n  var parts = formatted.split(delim);\n  return goog.date.setIso8601DateOnly_(dateTime, parts[0]) &&\n      (parts.length < 2 || goog.date.setIso8601TimeOnly_(dateTime, parts[1]));\n};\n\n\n/**\n * Sets date fields based on an ISO 8601 format string.\n *\n * @param {!goog.date.Date} d Object whose fields will be set.\n * @param {string} formatted A date expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n * @private\n */\ngoog.date.setIso8601DateOnly_ = function(d, formatted) {\n  // split the formatted ISO date string into its date fields\n  var parts = formatted.match(goog.date.splitDateStringRegex_);\n  if (!parts) {\n    return false;\n  }\n\n  var year = Number(parts[1]);\n  var month = Number(parts[2]);\n  var date = Number(parts[3]);\n  var dayOfYear = Number(parts[4]);\n  var week = Number(parts[5]);\n  // ISO weekdays start with 1, native getDay() values start with 0\n  var dayOfWeek = Number(parts[6]) || 1;\n\n  d.setFullYear(year);\n\n  if (dayOfYear) {\n    d.setDate(1);\n    d.setMonth(0);\n    var offset = dayOfYear - 1;  // offset, so 1-indexed, i.e., skip day 1\n    d.add(new goog.date.Interval(goog.date.Interval.DAYS, offset));\n  } else if (week) {\n    goog.date.setDateFromIso8601Week_(d, week, dayOfWeek);\n  } else {\n    if (month) {\n      d.setDate(1);\n      d.setMonth(month - 1);\n    }\n    if (date) {\n      d.setDate(date);\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Sets date fields based on an ISO 8601 week string.\n * See {@link http://en.wikipedia.org/wiki/ISO_week_date}, \"Relation with the\n * Gregorian Calendar\".  The first week of a new ISO year is the week with the\n * majority of its days in the new Gregorian year.  I.e., ISO Week 1's Thursday\n * is in that year.  ISO weeks always start on Monday. So ISO Week 1 can\n * contain a few days from the previous Gregorian year.  And ISO weeks always\n * end on Sunday, so the last ISO week (Week 52 or 53) can have a few days from\n * the following Gregorian year.\n * Example: '1997-W01' lasts from 1996-12-30 to 1997-01-05.  January 1, 1997 is\n * a Wednesday. So W01's Monday is Dec.30, 1996, and Sunday is January 5, 1997.\n *\n * @param {!goog.date.Date} d Object whose fields will be set.\n * @param {number} week ISO week number.\n * @param {number} dayOfWeek ISO day of week.\n * @private\n */\ngoog.date.setDateFromIso8601Week_ = function(d, week, dayOfWeek) {\n  // calculate offset for first week\n  d.setMonth(0);\n  d.setDate(1);\n  var jsDay = d.getDay();\n  // switch Sunday (0) to index 7; ISO days are 1-indexed\n  var jan1WeekDay = jsDay || 7;\n\n  var THURSDAY = 4;\n  if (jan1WeekDay <= THURSDAY) {\n    // was extended back to Monday\n    var startDelta = 1 - jan1WeekDay;  // e.g., Thu(4) ==> -3\n  } else {\n    // was extended forward to Monday\n    startDelta = 8 - jan1WeekDay;  // e.g., Fri(5) ==> +3\n  }\n\n  // find the absolute number of days to offset from the start of year\n  // to arrive close to the Gregorian equivalent (pending adjustments above)\n  // Note: decrement week multiplier by one because 1st week is\n  // represented by dayOfWeek value\n  var absoluteDays = Number(dayOfWeek) + (7 * (Number(week) - 1));\n\n  // convert from ISO weekday format to Gregorian calendar date\n  // note: subtract 1 because 1-indexed; offset should not include 1st of month\n  var delta = startDelta + absoluteDays - 1;\n  var interval = new goog.date.Interval(goog.date.Interval.DAYS, delta);\n  d.add(interval);\n};\n\n\n/**\n * Sets time fields based on an ISO 8601 format string.\n * Note: only time fields, not date fields.\n *\n * @param {!goog.date.DateTime} d Object whose fields will be set.\n * @param {string} formatted A time expressed in ISO 8601 format.\n * @return {boolean} Whether the parsing succeeded.\n * @private\n */\ngoog.date.setIso8601TimeOnly_ = function(d, formatted) {\n  // first strip timezone info from the end\n  var parts = formatted.match(goog.date.splitTimezoneStringRegex_);\n\n  var offset = 0;  // local time if no timezone info\n  if (parts) {\n    if (parts[0] != 'Z') {\n      offset = Number(parts[2]) * 60 + Number(parts[3]);\n      offset *= parts[1] == '-' ? 1 : -1;\n    }\n    offset -= d.getTimezoneOffset();\n    formatted = formatted.substr(0, formatted.length - parts[0].length);\n  }\n\n  // then work out the time\n  parts = formatted.match(goog.date.splitTimeStringRegex_);\n  if (!parts) {\n    return false;\n  }\n\n  d.setHours(Number(parts[1]));\n  d.setMinutes(Number(parts[2]) || 0);\n  d.setSeconds(Number(parts[3]) || 0);\n  d.setMilliseconds(parts[4] ? Number(parts[4]) * 1000 : 0);\n\n  if (offset != 0) {\n    // adjust the date and time according to the specified timezone\n    d.setTime(d.getTime() + offset * 60000);\n  }\n\n  return true;\n};\n\n\n\n/**\n * Class representing a date/time interval. Used for date calculations.\n * <pre>\n * new goog.date.Interval(0, 1) // One month\n * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour\n * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day\n * </pre>\n *\n * @param {number|string=} opt_years Years or string representing date part.\n * @param {number=} opt_months Months or number of whatever date part specified\n *     by first parameter.\n * @param {number=} opt_days Days.\n * @param {number=} opt_hours Hours.\n * @param {number=} opt_minutes Minutes.\n * @param {number=} opt_seconds Seconds.\n * @constructor\n * @struct\n * @final\n */\ngoog.date.Interval = function(\n    opt_years, opt_months, opt_days, opt_hours, opt_minutes, opt_seconds) {\n  if (goog.isString(opt_years)) {\n    var type = opt_years;\n    var interval = /** @type {number} */ (opt_months);\n    /** @type {number} */\n    this.years = type == goog.date.Interval.YEARS ? interval : 0;\n    /** @type {number} */\n    this.months = type == goog.date.Interval.MONTHS ? interval : 0;\n    /** @type {number} */\n    this.days = type == goog.date.Interval.DAYS ? interval : 0;\n    /** @type {number} */\n    this.hours = type == goog.date.Interval.HOURS ? interval : 0;\n    /** @type {number} */\n    this.minutes = type == goog.date.Interval.MINUTES ? interval : 0;\n    /** @type {number} */\n    this.seconds = type == goog.date.Interval.SECONDS ? interval : 0;\n  } else {\n    this.years = /** @type {number} */ (opt_years) || 0;\n    this.months = opt_months || 0;\n    this.days = opt_days || 0;\n    this.hours = opt_hours || 0;\n    this.minutes = opt_minutes || 0;\n    this.seconds = opt_seconds || 0;\n  }\n};\n\n\n/**\n * Parses an XML Schema duration (ISO 8601 extended).\n * @see http://www.w3.org/TR/xmlschema-2/#duration\n *\n * @param  {string} duration An XML schema duration in textual format.\n *     Recurring durations and weeks are not supported.\n * @return {goog.date.Interval} The duration as a goog.date.Interval or null\n *     if the parse fails.\n */\ngoog.date.Interval.fromIsoString = function(duration) {\n  var parts = duration.match(goog.date.splitDurationRegex_);\n  if (!parts) {\n    return null;\n  }\n\n  var timeEmpty = !(parts[6] || parts[7] || parts[8]);\n  var dateTimeEmpty = timeEmpty && !(parts[2] || parts[3] || parts[4]);\n  if (dateTimeEmpty || timeEmpty && parts[5]) {\n    return null;\n  }\n\n  var negative = parts[1];\n  var years = parseInt(parts[2], 10) || 0;\n  var months = parseInt(parts[3], 10) || 0;\n  var days = parseInt(parts[4], 10) || 0;\n  var hours = parseInt(parts[6], 10) || 0;\n  var minutes = parseInt(parts[7], 10) || 0;\n  var seconds = parseFloat(parts[8]) || 0;\n  return negative ?\n      new goog.date.Interval(\n          -years, -months, -days, -hours, -minutes, -seconds) :\n      new goog.date.Interval(years, months, days, hours, minutes, seconds);\n};\n\n\n/**\n * Serializes goog.date.Interval into XML Schema duration (ISO 8601 extended).\n * @see http://www.w3.org/TR/xmlschema-2/#duration\n *\n * @param {boolean=} opt_verbose Include zero fields in the duration string.\n * @return {?string} An XML schema duration in ISO 8601 extended format,\n *     or null if the interval contains both positive and negative fields.\n */\ngoog.date.Interval.prototype.toIsoString = function(opt_verbose) {\n  var minField = Math.min(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n  var maxField = Math.max(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n  if (minField < 0 && maxField > 0) {\n    return null;\n  }\n\n  // Return 0 seconds if all fields are zero.\n  if (!opt_verbose && minField == 0 && maxField == 0) {\n    return 'PT0S';\n  }\n\n  var res = [];\n\n  // Add sign and 'P' prefix.\n  if (minField < 0) {\n    res.push('-');\n  }\n  res.push('P');\n\n  // Add date.\n  if (this.years || opt_verbose) {\n    res.push(Math.abs(this.years) + 'Y');\n  }\n  if (this.months || opt_verbose) {\n    res.push(Math.abs(this.months) + 'M');\n  }\n  if (this.days || opt_verbose) {\n    res.push(Math.abs(this.days) + 'D');\n  }\n\n  // Add time.\n  if (this.hours || this.minutes || this.seconds || opt_verbose) {\n    res.push('T');\n    if (this.hours || opt_verbose) {\n      res.push(Math.abs(this.hours) + 'H');\n    }\n    if (this.minutes || opt_verbose) {\n      res.push(Math.abs(this.minutes) + 'M');\n    }\n    if (this.seconds || opt_verbose) {\n      res.push(Math.abs(this.seconds) + 'S');\n    }\n  }\n\n  return res.join('');\n};\n\n\n/**\n * Tests whether the given interval is equal to this interval.\n * Note, this is a simple field-by-field comparison, it doesn't\n * account for comparisons like \"12 months == 1 year\".\n *\n * @param {goog.date.Interval} other The interval to test.\n * @return {boolean} Whether the intervals are equal.\n */\ngoog.date.Interval.prototype.equals = function(other) {\n  return other.years == this.years && other.months == this.months &&\n      other.days == this.days && other.hours == this.hours &&\n      other.minutes == this.minutes && other.seconds == this.seconds;\n};\n\n\n/**\n * @return {!goog.date.Interval} A clone of the interval object.\n */\ngoog.date.Interval.prototype.clone = function() {\n  return new goog.date.Interval(\n      this.years, this.months, this.days, this.hours, this.minutes,\n      this.seconds);\n};\n\n\n/**\n * Years constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.YEARS = 'y';\n\n\n/**\n * Months constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.MONTHS = 'm';\n\n\n/**\n * Days constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.DAYS = 'd';\n\n\n/**\n * Hours constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.HOURS = 'h';\n\n\n/**\n * Minutes constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.MINUTES = 'n';\n\n\n/**\n * Seconds constant for the date parts.\n * @type {string}\n */\ngoog.date.Interval.SECONDS = 's';\n\n\n/**\n * @return {boolean} Whether all fields of the interval are zero.\n */\ngoog.date.Interval.prototype.isZero = function() {\n  return this.years == 0 && this.months == 0 && this.days == 0 &&\n      this.hours == 0 && this.minutes == 0 && this.seconds == 0;\n};\n\n\n/**\n * @return {!goog.date.Interval} Negative of this interval.\n */\ngoog.date.Interval.prototype.getInverse = function() {\n  return this.times(-1);\n};\n\n\n/**\n * Calculates n * (this interval) by memberwise multiplication.\n * @param {number} n An integer.\n * @return {!goog.date.Interval} n * this.\n */\ngoog.date.Interval.prototype.times = function(n) {\n  return new goog.date.Interval(\n      this.years * n, this.months * n, this.days * n, this.hours * n,\n      this.minutes * n, this.seconds * n);\n};\n\n\n/**\n * Gets the total number of seconds in the time interval. Assumes that months\n * and years are empty.\n * @return {number} Total number of seconds in the interval.\n */\ngoog.date.Interval.prototype.getTotalSeconds = function() {\n  goog.asserts.assert(this.years == 0 && this.months == 0);\n  return ((this.days * 24 + this.hours) * 60 + this.minutes) * 60 +\n      this.seconds;\n};\n\n\n/**\n * Adds the Interval in the argument to this Interval field by field.\n *\n * @param {goog.date.Interval} interval The Interval to add.\n */\ngoog.date.Interval.prototype.add = function(interval) {\n  this.years += interval.years;\n  this.months += interval.months;\n  this.days += interval.days;\n  this.hours += interval.hours;\n  this.minutes += interval.minutes;\n  this.seconds += interval.seconds;\n};\n\n\n\n/**\n * Class representing a date. Defaults to current date if none is specified.\n *\n * Implements most methods of the native js Date object (except the time related\n * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just\n * as if goog.date.Date was a synonym of Date. To make this more transparent,\n * Closure APIs should accept goog.date.DateLike instead of the real Date\n * object.\n *\n * @param {number|goog.date.DateLike=} opt_year Four digit year or a date-like\n *     object. If not set, the created object will contain the date\n *     determined by goog.now().\n * @param {number=} opt_month Month, 0 = Jan, 11 = Dec.\n * @param {number=} opt_date Date of month, 1 - 31.\n * @constructor\n * @struct\n * @see goog.date.DateTime\n */\ngoog.date.Date = function(opt_year, opt_month, opt_date) {\n  /** @protected {!Date} The wrapped date or datetime. */\n  this.date;\n  // goog.date.DateTime assumes that only this.date is added in this ctor.\n  if (goog.isNumber(opt_year)) {\n    this.date = this.buildDate_(opt_year, opt_month || 0, opt_date || 1);\n    this.maybeFixDst_(opt_date || 1);\n  } else if (goog.isObject(opt_year)) {\n    this.date = this.buildDate_(\n        opt_year.getFullYear(), opt_year.getMonth(), opt_year.getDate());\n    this.maybeFixDst_(opt_year.getDate());\n  } else {\n    this.date = new Date(goog.now());\n    var expectedDate = this.date.getDate();\n    this.date.setHours(0);\n    this.date.setMinutes(0);\n    this.date.setSeconds(0);\n    this.date.setMilliseconds(0);\n    // In some time zones there is no \"0\" hour on certain days during DST.\n    // Adjust here, if necessary. See:\n    // https://github.com/google/closure-library/issues/34.\n    this.maybeFixDst_(expectedDate);\n  }\n};\n\n\n/**\n * new Date(y, m, d) treats years in the interval [0, 100) as two digit years,\n * adding 1900 to them. This method ensures that calling the date constructor\n * as a copy constructor returns a value that is equal to the passed in\n * date value by explicitly setting the full year.\n * @private\n * @param {number} fullYear The full year (including century).\n * @param {number} month The month, from 0-11.\n * @param {number} date The day of the month.\n * @return {!Date} The constructed Date object.\n */\ngoog.date.Date.prototype.buildDate_ = function(fullYear, month, date) {\n  var d = new Date(fullYear, month, date);\n  if (fullYear >= 0 && fullYear < 100) {\n    // Can't just setFullYear as new Date() can flip over for e.g. month = 13.\n    d.setFullYear(d.getFullYear() - 1900);\n  }\n  return d;\n};\n\n\n/**\n * First day of week. 0 = Mon, 6 = Sun.\n * @type {number}\n * @private\n */\ngoog.date.Date.prototype.firstDayOfWeek_ =\n    goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK;\n\n\n/**\n * The cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.\n * @type {number}\n * @private\n */\ngoog.date.Date.prototype.firstWeekCutOffDay_ =\n    goog.i18n.DateTimeSymbols.FIRSTWEEKCUTOFFDAY;\n\n\n/**\n * @return {!goog.date.Date} A clone of the date object.\n */\ngoog.date.Date.prototype.clone = function() {\n  var date = new goog.date.Date(this.date);\n  date.firstDayOfWeek_ = this.firstDayOfWeek_;\n  date.firstWeekCutOffDay_ = this.firstWeekCutOffDay_;\n\n  return date;\n};\n\n\n/**\n * @return {number} The four digit year of date.\n */\ngoog.date.Date.prototype.getFullYear = function() {\n  return this.date.getFullYear();\n};\n\n\n/**\n * Alias for getFullYear.\n *\n * @return {number} The four digit year of date.\n * @see #getFullYear\n */\ngoog.date.Date.prototype.getYear = function() {\n  return this.getFullYear();\n};\n\n\n/**\n * @return {goog.date.month} The month of date, 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.getMonth = function() {\n  return /** @type {goog.date.month} */ (this.date.getMonth());\n};\n\n\n/**\n * @return {number} The date of month.\n */\ngoog.date.Date.prototype.getDate = function() {\n  return this.date.getDate();\n};\n\n\n/**\n * Returns the number of milliseconds since 1 January 1970 00:00:00.\n *\n * @return {number} The number of milliseconds since 1 January 1970 00:00:00.\n */\ngoog.date.Date.prototype.getTime = function() {\n  return this.date.getTime();\n};\n\n\n/**\n * @return {number} The day of week, US style. 0 = Sun, 6 = Sat.\n */\ngoog.date.Date.prototype.getDay = function() {\n  return this.date.getDay();\n};\n\n\n/**\n * @return {goog.date.weekDay} The day of week, ISO style. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getIsoWeekday = function() {\n  return /** @type {goog.date.weekDay} */ ((this.getDay() + 6) % 7);\n};\n\n\n/**\n * @return {number} The day of week according to firstDayOfWeek setting.\n */\ngoog.date.Date.prototype.getWeekday = function() {\n  return (this.getIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\n};\n\n\n/**\n * @return {number} The four digit year of date according to universal time.\n */\ngoog.date.Date.prototype.getUTCFullYear = function() {\n  return this.date.getUTCFullYear();\n};\n\n\n/**\n * @return {goog.date.month} The month of date according to universal time,\n *     0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.getUTCMonth = function() {\n  return /** @type {goog.date.month} */ (this.date.getUTCMonth());\n};\n\n\n/**\n * @return {number} The date of month according to universal time.\n */\ngoog.date.Date.prototype.getUTCDate = function() {\n  return this.date.getUTCDate();\n};\n\n\n/**\n * @return {number} The day of week according to universal time, US style.\n *     0 = Sun, 1 = Mon, 6 = Sat.\n */\ngoog.date.Date.prototype.getUTCDay = function() {\n  return this.date.getDay();\n};\n\n\n/**\n * @return {number} The hours value according to universal time.\n */\ngoog.date.Date.prototype.getUTCHours = function() {\n  return this.date.getUTCHours();\n};\n\n\n/**\n * @return {number} The minutes value according to universal time.\n */\ngoog.date.Date.prototype.getUTCMinutes = function() {\n  return this.date.getUTCMinutes();\n};\n\n\n/**\n * @return {goog.date.weekDay} The day of week according to universal time, ISO\n *     style. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getUTCIsoWeekday = function() {\n  return /** @type {goog.date.weekDay} */ ((this.date.getUTCDay() + 6) % 7);\n};\n\n\n/**\n * @return {number} The day of week according to universal time and\n *     firstDayOfWeek setting.\n */\ngoog.date.Date.prototype.getUTCWeekday = function() {\n  return (this.getUTCIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\n};\n\n\n/**\n * @return {number} The first day of the week. 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getFirstDayOfWeek = function() {\n  return this.firstDayOfWeek_;\n};\n\n\n/**\n * @return {number} The cut off weekday used for week number calculations.\n *     0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.getFirstWeekCutOffDay = function() {\n  return this.firstWeekCutOffDay_;\n};\n\n\n/**\n * @return {number} The number of days for the selected month.\n */\ngoog.date.Date.prototype.getNumberOfDaysInMonth = function() {\n  return goog.date.getNumberOfDaysInMonth(this.getFullYear(), this.getMonth());\n};\n\n\n/**\n * @return {number} The week number.\n */\ngoog.date.Date.prototype.getWeekNumber = function() {\n  return goog.date.getWeekNumber(\n      this.getFullYear(), this.getMonth(), this.getDate(),\n      this.firstWeekCutOffDay_, this.firstDayOfWeek_);\n};\n\n\n/**\n * Returns year in “Week of Year” based calendars in which the year transition\n * occurs on a week boundary.\n * @return {number} The four digit year in \"Week of Year\"\n */\ngoog.date.Date.prototype.getYearOfWeek = function() {\n  return goog.date.getYearOfWeek(\n      this.getFullYear(), this.getMonth(), this.getDate(),\n      this.firstWeekCutOffDay_, this.firstDayOfWeek_);\n};\n\n\n/**\n * @return {number} The day of year.\n */\ngoog.date.Date.prototype.getDayOfYear = function() {\n  var dayOfYear = this.getDate();\n  var year = this.getFullYear();\n  for (var m = this.getMonth() - 1; m >= 0; m--) {\n    dayOfYear += goog.date.getNumberOfDaysInMonth(year, m);\n  }\n\n  return dayOfYear;\n};\n\n\n/**\n * Returns timezone offset. The timezone offset is the delta in minutes between\n * UTC and your local time. E.g., UTC+10 returns -600. Daylight savings time\n * prevents this value from being constant.\n *\n * @return {number} The timezone offset.\n */\ngoog.date.Date.prototype.getTimezoneOffset = function() {\n  return this.date.getTimezoneOffset();\n};\n\n\n/**\n * Returns timezone offset as a string. Returns offset in [+-]HH:mm format or Z\n * for UTC.\n *\n * @return {string} The timezone offset as a string.\n */\ngoog.date.Date.prototype.getTimezoneOffsetString = function() {\n  var tz;\n  var offset = this.getTimezoneOffset();\n\n  if (offset == 0) {\n    tz = 'Z';\n  } else {\n    var n = Math.abs(offset) / 60;\n    var h = Math.floor(n);\n    var m = (n - h) * 60;\n    tz = (offset > 0 ? '-' : '+') + goog.string.padNumber(h, 2) + ':' +\n        goog.string.padNumber(m, 2);\n  }\n\n  return tz;\n};\n\n\n/**\n * Sets the date.\n *\n * @param {goog.date.Date} date Date object to set date from.\n */\ngoog.date.Date.prototype.set = function(date) {\n  this.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n};\n\n\n/**\n * Sets the year part of the date.\n *\n * @param {number} year Four digit year.\n */\ngoog.date.Date.prototype.setFullYear = function(year) {\n  this.date.setFullYear(year);\n};\n\n\n/**\n * Alias for setFullYear.\n *\n * @param {number} year Four digit year.\n * @see #setFullYear\n */\ngoog.date.Date.prototype.setYear = function(year) {\n  this.setFullYear(year);\n};\n\n\n/**\n * Sets the month part of the date.\n *\n * TODO(nnaze): Update type to goog.date.month.\n *\n * @param {number} month The month, where 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.setMonth = function(month) {\n  this.date.setMonth(month);\n};\n\n\n/**\n * Sets the day part of the date.\n *\n * @param {number} date The day part.\n */\ngoog.date.Date.prototype.setDate = function(date) {\n  this.date.setDate(date);\n};\n\n\n/**\n * Sets the value of the date object as expressed in the number of milliseconds\n * since 1 January 1970 00:00:00.\n *\n * @param {number} ms Number of milliseconds since 1 Jan 1970.\n */\ngoog.date.Date.prototype.setTime = function(ms) {\n  this.date.setTime(ms);\n};\n\n\n/**\n * Sets the year part of the date according to universal time.\n *\n * @param {number} year Four digit year.\n */\ngoog.date.Date.prototype.setUTCFullYear = function(year) {\n  this.date.setUTCFullYear(year);\n};\n\n\n/**\n * Sets the month part of the date according to universal time.\n *\n * @param {number} month The month, where 0 = Jan, 11 = Dec.\n */\ngoog.date.Date.prototype.setUTCMonth = function(month) {\n  this.date.setUTCMonth(month);\n};\n\n\n/**\n * Sets the day part of the date according to universal time.\n *\n * @param {number} date The UTC date.\n */\ngoog.date.Date.prototype.setUTCDate = function(date) {\n  this.date.setUTCDate(date);\n};\n\n\n/**\n * Sets the first day of week.\n *\n * @param {number} day 0 = Mon, 6 = Sun.\n */\ngoog.date.Date.prototype.setFirstDayOfWeek = function(day) {\n  this.firstDayOfWeek_ = day;\n};\n\n\n/**\n * Sets cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.\n *\n * @param {number} day The cut off weekday.\n */\ngoog.date.Date.prototype.setFirstWeekCutOffDay = function(day) {\n  this.firstWeekCutOffDay_ = day;\n};\n\n\n/**\n * Performs date calculation by adding the supplied interval to the date.\n *\n * @param {goog.date.Interval} interval Date interval to add.\n */\ngoog.date.Date.prototype.add = function(interval) {\n  if (interval.years || interval.months) {\n    // As months have different number of days adding a month to Jan 31 by just\n    // setting the month would result in a date in early March rather than Feb\n    // 28 or 29. Doing it this way overcomes that problem.\n\n    // adjust year and month, accounting for both directions\n    var month = this.getMonth() + interval.months + interval.years * 12;\n    var year = this.getYear() + Math.floor(month / 12);\n    month %= 12;\n    if (month < 0) {\n      month += 12;\n    }\n\n    var daysInTargetMonth = goog.date.getNumberOfDaysInMonth(year, month);\n    var date = Math.min(daysInTargetMonth, this.getDate());\n\n    // avoid inadvertently causing rollovers to adjacent months\n    this.setDate(1);\n\n    this.setFullYear(year);\n    this.setMonth(month);\n    this.setDate(date);\n  }\n\n  if (interval.days) {\n    // Convert the days to milliseconds and add it to the UNIX timestamp.\n    // Taking noon helps to avoid 1 day error due to the daylight saving.\n    var noon = new Date(this.getYear(), this.getMonth(), this.getDate(), 12);\n    var result = new Date(noon.getTime() + interval.days * 86400000);\n\n    // Set date to 1 to prevent rollover caused by setting the year or month.\n    this.setDate(1);\n    this.setFullYear(result.getFullYear());\n    this.setMonth(result.getMonth());\n    this.setDate(result.getDate());\n\n    this.maybeFixDst_(result.getDate());\n  }\n};\n\n\n/**\n * Returns ISO 8601 string representation of date.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included\n *     in the string.\n * @return {string} ISO 8601 string representation of date.\n */\ngoog.date.Date.prototype.toIsoString = function(opt_verbose, opt_tz) {\n  var str = [\n    this.getFullYear(), goog.string.padNumber(this.getMonth() + 1, 2),\n    goog.string.padNumber(this.getDate(), 2)\n  ];\n\n  return str.join((opt_verbose) ? '-' : '') +\n      (opt_tz ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns ISO 8601 string representation of date according to universal time.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included in\n *     the string.\n * @return {string} ISO 8601 string representation of date according to\n *     universal time.\n */\ngoog.date.Date.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\n  var str = [\n    this.getUTCFullYear(), goog.string.padNumber(this.getUTCMonth() + 1, 2),\n    goog.string.padNumber(this.getUTCDate(), 2)\n  ];\n\n  return str.join((opt_verbose) ? '-' : '') + (opt_tz ? 'Z' : '');\n};\n\n\n/**\n * Tests whether given date is equal to this Date.\n * Note: This ignores units more precise than days (hours and below)\n * and also ignores timezone considerations.\n *\n * @param {goog.date.Date} other The date to compare.\n * @return {boolean} Whether the given date is equal to this one.\n */\ngoog.date.Date.prototype.equals = function(other) {\n  return !!(\n      other && this.getYear() == other.getYear() &&\n      this.getMonth() == other.getMonth() && this.getDate() == other.getDate());\n};\n\n\n/**\n * Overloaded toString method for object.\n * @return {string} ISO 8601 string representation of date.\n * @override\n */\ngoog.date.Date.prototype.toString = function() {\n  return this.toIsoString();\n};\n\n\n/**\n * Fixes date to account for daylight savings time in browsers that fail to do\n * so automatically.\n * @param {number} expected Expected date.\n * @private\n */\ngoog.date.Date.prototype.maybeFixDst_ = function(expected) {\n  if (this.getDate() != expected) {\n    var dir = this.getDate() < expected ? 1 : -1;\n    this.date.setUTCHours(this.date.getUTCHours() + dir);\n  }\n};\n\n\n/**\n * @return {number} Value of wrapped date.\n * @override\n */\ngoog.date.Date.prototype.valueOf = function() {\n  return this.date.valueOf();\n};\n\n\n/**\n * Compares two dates.  May be used as a sorting function.\n * @see goog.array.sort\n * @param {!goog.date.DateLike} date1 Date to compare.\n * @param {!goog.date.DateLike} date2 Date to compare.\n * @return {number} Comparison result. 0 if dates are the same, less than 0 if\n *     date1 is earlier than date2, greater than 0 if date1 is later than date2.\n */\ngoog.date.Date.compare = function(date1, date2) {\n  return date1.getTime() - date2.getTime();\n};\n\n\n/**\n * Parses an ISO 8601 string as a `goog.date.Date`.\n * @param {string} formatted ISO 8601 string to parse.\n * @return {?goog.date.Date} Parsed date or null if parse fails.\n */\ngoog.date.Date.fromIsoString = function(formatted) {\n  var ret = new goog.date.Date(2000);\n  return goog.date.setIso8601DateOnly_(ret, formatted) ? ret : null;\n};\n\n\n\n/**\n * Class representing a date and time. Defaults to current date and time if none\n * is specified.\n *\n * Implements most methods of the native js Date object and can be used\n * interchangeably with it just as if goog.date.DateTime was a subclass of Date.\n *\n * @param {(number|{getTime:?}|null)=} opt_year Four digit year or a date-like\n *     object. If not set, the created object will contain the date determined\n *     by goog.now().\n * @param {number=} opt_month Month, 0 = Jan, 11 = Dec.\n * @param {number=} opt_date Date of month, 1 - 31.\n * @param {number=} opt_hours Hours, 0 - 23.\n * @param {number=} opt_minutes Minutes, 0 - 59.\n * @param {number=} opt_seconds Seconds, 0 - 61.\n * @param {number=} opt_milliseconds Milliseconds, 0 - 999.\n * @constructor\n * @struct\n * @extends {goog.date.Date}\n */\ngoog.date.DateTime = function(\n    opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds,\n    opt_milliseconds) {\n  if (goog.isNumber(opt_year)) {\n    /** @override */\n    this.date = new Date(\n        opt_year, opt_month || 0, opt_date || 1, opt_hours || 0,\n        opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);\n  } else {\n    this.date = new Date(\n        opt_year && opt_year.getTime ? opt_year.getTime() : goog.now());\n  }\n};\ngoog.inherits(goog.date.DateTime, goog.date.Date);\n\n\n/**\n * @param {number} timestamp Number of milliseconds since Epoch.\n * @return {!goog.date.DateTime}\n */\ngoog.date.DateTime.fromTimestamp = function(timestamp) {\n  var date = new goog.date.DateTime();\n  date.setTime(timestamp);\n  return date;\n};\n\n\n/**\n * Creates a DateTime from a datetime string expressed in RFC 822 format.\n *\n * @param {string} formatted A date or datetime expressed in RFC 822 format.\n * @return {goog.date.DateTime} Parsed date or null if parse fails.\n */\ngoog.date.DateTime.fromRfc822String = function(formatted) {\n  var date = new Date(formatted);\n  return !isNaN(date.getTime()) ? new goog.date.DateTime(date) : null;\n};\n\n\n/**\n * Returns the hours part of the datetime.\n *\n * @return {number} An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.getHours = function() {\n  return this.date.getHours();\n};\n\n\n/**\n * Returns the minutes part of the datetime.\n *\n * @return {number} An integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.getMinutes = function() {\n  return this.date.getMinutes();\n};\n\n\n/**\n * Returns the seconds part of the datetime.\n *\n * @return {number} An integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.getSeconds = function() {\n  return this.date.getSeconds();\n};\n\n\n/**\n * Returns the milliseconds part of the datetime.\n *\n * @return {number} An integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.getMilliseconds = function() {\n  return this.date.getMilliseconds();\n};\n\n\n/**\n * Returns the day of week according to universal time, US style.\n *\n * @return {goog.date.weekDay} Day of week, 0 = Sun, 1 = Mon, 6 = Sat.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCDay = function() {\n  return /** @type {goog.date.weekDay} */ (this.date.getUTCDay());\n};\n\n\n/**\n * Returns the hours part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 23, representing the hour.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCHours = function() {\n  return this.date.getUTCHours();\n};\n\n\n/**\n * Returns the minutes part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 59, representing the minutes.\n * @override\n */\ngoog.date.DateTime.prototype.getUTCMinutes = function() {\n  return this.date.getUTCMinutes();\n};\n\n\n/**\n * Returns the seconds part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.getUTCSeconds = function() {\n  return this.date.getUTCSeconds();\n};\n\n\n/**\n * Returns the milliseconds part of the datetime according to universal time.\n *\n * @return {number} An integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.getUTCMilliseconds = function() {\n  return this.date.getUTCMilliseconds();\n};\n\n\n/**\n * Sets the hours part of the datetime.\n *\n * @param {number} hours An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.setHours = function(hours) {\n  this.date.setHours(hours);\n};\n\n\n/**\n * Sets the minutes part of the datetime.\n *\n * @param {number} minutes Integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.setMinutes = function(minutes) {\n  this.date.setMinutes(minutes);\n};\n\n\n/**\n * Sets the seconds part of the datetime.\n *\n * @param {number} seconds Integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.setSeconds = function(seconds) {\n  this.date.setSeconds(seconds);\n};\n\n\n/**\n * Sets the milliseconds part of the datetime.\n *\n * @param {number} ms Integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.setMilliseconds = function(ms) {\n  this.date.setMilliseconds(ms);\n};\n\n\n/**\n * Sets the hours part of the datetime according to universal time.\n *\n * @param {number} hours An integer between 0 and 23, representing the hour.\n */\ngoog.date.DateTime.prototype.setUTCHours = function(hours) {\n  this.date.setUTCHours(hours);\n};\n\n\n/**\n * Sets the minutes part of the datetime according to universal time.\n *\n * @param {number} minutes Integer between 0 and 59, representing the minutes.\n */\ngoog.date.DateTime.prototype.setUTCMinutes = function(minutes) {\n  this.date.setUTCMinutes(minutes);\n};\n\n\n/**\n * Sets the seconds part of the datetime according to universal time.\n *\n * @param {number} seconds Integer between 0 and 59, representing the seconds.\n */\ngoog.date.DateTime.prototype.setUTCSeconds = function(seconds) {\n  this.date.setUTCSeconds(seconds);\n};\n\n\n/**\n * Sets the seconds part of the datetime according to universal time.\n *\n * @param {number} ms Integer between 0 and 999, representing the milliseconds.\n */\ngoog.date.DateTime.prototype.setUTCMilliseconds = function(ms) {\n  this.date.setUTCMilliseconds(ms);\n};\n\n\n/**\n * @return {boolean} Whether the datetime is aligned to midnight.\n */\ngoog.date.DateTime.prototype.isMidnight = function() {\n  return this.getHours() == 0 && this.getMinutes() == 0 &&\n      this.getSeconds() == 0 && this.getMilliseconds() == 0;\n};\n\n\n/**\n * Performs date calculation by adding the supplied interval to the date.\n *\n * @param {goog.date.Interval} interval Date interval to add.\n * @override\n */\ngoog.date.DateTime.prototype.add = function(interval) {\n  goog.date.Date.prototype.add.call(this, interval);\n\n  if (interval.hours) {\n    this.setUTCHours(this.date.getUTCHours() + interval.hours);\n  }\n  if (interval.minutes) {\n    this.setUTCMinutes(this.date.getUTCMinutes() + interval.minutes);\n  }\n  if (interval.seconds) {\n    this.setUTCSeconds(this.date.getUTCSeconds() + interval.seconds);\n  }\n};\n\n\n/**\n * Returns ISO 8601 string representation of date/time.\n *\n * @param {boolean=} opt_verbose Whether the verbose format should be used\n *     instead of the default compact one.\n * @param {boolean=} opt_tz Whether the timezone offset should be included\n *     in the string.\n * @return {string} ISO 8601 string representation of date/time.\n * @override\n */\ngoog.date.DateTime.prototype.toIsoString = function(opt_verbose, opt_tz) {\n  var dateString = goog.date.Date.prototype.toIsoString.call(this, opt_verbose);\n\n  if (opt_verbose) {\n    return dateString + ' ' + goog.string.padNumber(this.getHours(), 2) + ':' +\n        goog.string.padNumber(this.getMinutes(), 2) + ':' +\n        goog.string.padNumber(this.getSeconds(), 2) +\n        (opt_tz ? this.getTimezoneOffsetString() : '');\n  }\n\n  return dateString + 'T' + goog.string.padNumber(this.getHours(), 2) +\n      goog.string.padNumber(this.getMinutes(), 2) +\n      goog.string.padNumber(this.getSeconds(), 2) +\n      (opt_tz ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns XML Schema 2 string representation of date/time.\n * The return value is also ISO 8601 compliant.\n *\n * @param {boolean=} opt_timezone Should the timezone offset be included in the\n *     string?.\n * @return {string} XML Schema 2 string representation of date/time.\n */\ngoog.date.DateTime.prototype.toXmlDateTime = function(opt_timezone) {\n  return goog.date.Date.prototype.toIsoString.call(this, true) + 'T' +\n      goog.string.padNumber(this.getHours(), 2) + ':' +\n      goog.string.padNumber(this.getMinutes(), 2) + ':' +\n      goog.string.padNumber(this.getSeconds(), 2) +\n      (opt_timezone ? this.getTimezoneOffsetString() : '');\n};\n\n\n/**\n * Returns ISO 8601 string representation of date/time according to universal\n * time.\n *\n * @param {boolean=} opt_verbose Whether the opt_verbose format should be\n *     returned instead of the default compact one.\n * @param {boolean=} opt_tz Whether the the timezone offset should be included\n *     in the string.\n * @return {string} ISO 8601 string representation of date/time according to\n *     universal time.\n * @override\n */\ngoog.date.DateTime.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\n  var dateStr = goog.date.Date.prototype.toUTCIsoString.call(this, opt_verbose);\n\n  if (opt_verbose) {\n    return dateStr + ' ' + goog.string.padNumber(this.getUTCHours(), 2) + ':' +\n        goog.string.padNumber(this.getUTCMinutes(), 2) + ':' +\n        goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');\n  }\n\n  return dateStr + 'T' + goog.string.padNumber(this.getUTCHours(), 2) +\n      goog.string.padNumber(this.getUTCMinutes(), 2) +\n      goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');\n};\n\n\n/**\n * Returns RFC 3339 string representation of datetime in UTC.\n *\n * @return {string} A UTC datetime expressed in RFC 3339 format.\n */\ngoog.date.DateTime.prototype.toUTCRfc3339String = function() {\n  var date = this.toUTCIsoString(true).replace(' ', 'T');\n  var millis = this.getUTCMilliseconds();\n  return (millis ? date + '.' + goog.string.padNumber(millis, 3) : date) + 'Z';\n};\n\n\n/**\n * Tests whether given datetime is exactly equal to this DateTime.\n *\n * @param {goog.date.Date} other The datetime to compare.\n * @return {boolean} Whether the given datetime is exactly equal to this one.\n * @override\n */\ngoog.date.DateTime.prototype.equals = function(other) {\n  return this.getTime() == other.getTime();\n};\n\n\n/**\n * Overloaded toString method for object.\n * @return {string} ISO 8601 string representation of date/time.\n * @override\n */\ngoog.date.DateTime.prototype.toString = function() {\n  return this.toIsoString();\n};\n\n\n/**\n * Generates time label for the datetime, e.g., '5:30 AM'.\n * By default this does not pad hours (e.g., to '05:30') and it does add\n * an am/pm suffix.\n * TODO(user): i18n -- hardcoding time format like this is bad.  E.g., in CJK\n *               locales, need Chinese characters for hour and minute units.\n * @param {boolean=} opt_padHours Whether to pad hours, e.g., '05:30' vs '5:30'.\n * @param {boolean=} opt_showAmPm Whether to show the 'am' and 'pm' suffix.\n * @param {boolean=} opt_omitZeroMinutes E.g., '5:00pm' becomes '5pm',\n *                                      but '5:01pm' remains '5:01pm'.\n * @return {string} The time label.\n * @deprecated Use goog.i18n.DateTimeFormat with\n *     goog.i18n.DateTimeFormat.Format.FULL_TIME or\n *     goog.i18n.DateTimeFormat.Format.LONG_TIME or\n *     goog.i18n.DateTimeFormat.Format.MEDIUM_TIME or\n *     goog.i18n.DateTimeFormat.Format.SHORT_TIME.\n */\ngoog.date.DateTime.prototype.toUsTimeString = function(\n    opt_padHours, opt_showAmPm, opt_omitZeroMinutes) {\n  var hours = this.getHours();\n\n  // show am/pm marker by default\n  if (!goog.isDef(opt_showAmPm)) {\n    opt_showAmPm = true;\n  }\n\n  // 12pm\n  var isPM = hours == 12;\n\n  // change from 1-24 to 1-12 basis\n  if (hours > 12) {\n    hours -= 12;\n    isPM = true;\n  }\n\n  // midnight is expressed as \"12am\", but if am/pm marker omitted, keep as '0'\n  if (hours == 0 && opt_showAmPm) {\n    hours = 12;\n  }\n\n  var label = opt_padHours ? goog.string.padNumber(hours, 2) : String(hours);\n  var minutes = this.getMinutes();\n  if (!opt_omitZeroMinutes || minutes > 0) {\n    label += ':' + goog.string.padNumber(minutes, 2);\n  }\n\n  // by default, show am/pm suffix\n  if (opt_showAmPm) {\n    label += isPM ? ' PM' : ' AM';\n  }\n  return label;\n};\n\n\n/**\n * Generates time label for the datetime in standard ISO 24-hour time format.\n * E.g., '06:00:00' or '23:30:15'.\n * @param {boolean=} opt_showSeconds Whether to shows seconds. Defaults to TRUE.\n * @return {string} The time label.\n */\ngoog.date.DateTime.prototype.toIsoTimeString = function(opt_showSeconds) {\n  var hours = this.getHours();\n  var label = goog.string.padNumber(hours, 2) + ':' +\n      goog.string.padNumber(this.getMinutes(), 2);\n  if (!goog.isDef(opt_showSeconds) || opt_showSeconds) {\n    label += ':' + goog.string.padNumber(this.getSeconds(), 2);\n  }\n  return label;\n};\n\n\n/**\n * @return {!goog.date.DateTime} A clone of the datetime object.\n * @override\n */\ngoog.date.DateTime.prototype.clone = function() {\n  var date = new goog.date.DateTime(this.date);\n  date.setFirstDayOfWeek(this.getFirstDayOfWeek());\n  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());\n  return date;\n};\n\n\n/**\n * Parses an ISO 8601 string as a `goog.date.DateTime`.\n * @param {string} formatted ISO 8601 string to parse.\n * @return {?goog.date.DateTime} Parsed date or null if parse fails.\n * @override\n */\ngoog.date.DateTime.fromIsoString = function(formatted) {\n  var ret = new goog.date.DateTime(2000);\n  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;\n};\n","~:compiled-at",1566016956914,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.date.date.js\",\n\"lineCount\":1061,\n\"mappings\":\"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\",\n\"sources\":[\"goog/date/date.js\"],\n\"sourcesContent\":[\"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Functions and objects for date representation and manipulation.\\n * @suppress {checkPrototypalTypes}\\n *\\n * @author eae@google.com (Emil A Eklund)\\n */\\n\\ngoog.provide('goog.date');\\ngoog.provide('goog.date.Date');\\ngoog.provide('goog.date.DateTime');\\ngoog.provide('goog.date.Interval');\\ngoog.provide('goog.date.month');\\ngoog.provide('goog.date.weekDay');\\n\\ngoog.require('goog.asserts');\\n/** @suppress {extraRequire} */\\ngoog.require('goog.date.DateLike');\\ngoog.require('goog.i18n.DateTimeSymbols');\\ngoog.require('goog.string');\\n\\n\\n/**\\n * Constants for weekdays.\\n * @enum {number}\\n */\\ngoog.date.weekDay = {\\n  MON: 0,\\n  TUE: 1,\\n  WED: 2,\\n  THU: 3,\\n  FRI: 4,\\n  SAT: 5,\\n  SUN: 6\\n};\\n\\n\\n/**\\n * Constants for months.\\n * @enum {number}\\n */\\ngoog.date.month = {\\n  JAN: 0,\\n  FEB: 1,\\n  MAR: 2,\\n  APR: 3,\\n  MAY: 4,\\n  JUN: 5,\\n  JUL: 6,\\n  AUG: 7,\\n  SEP: 8,\\n  OCT: 9,\\n  NOV: 10,\\n  DEC: 11\\n};\\n\\n\\n/**\\n * Formats a month/year string.\\n * Example: \\\"January 2008\\\"\\n *\\n * @param {string} monthName The month name to use in the result.\\n * @param {number} yearNum The numeric year to use in the result.\\n * @return {string} A formatted month/year string.\\n * @deprecated Use goog.i18n.DateTimeFormat with\\n *     goog.i18n.DateTimeFormat.Format.YEAR_MONTH_ABBR or\\n *     goog.i18n.DateTimeFormat.Format.YEAR_MONTH_FULL.\\n */\\ngoog.date.formatMonthAndYear = function(monthName, yearNum) {\\n  /** @desc Month/year format given the month name and the numeric year. */\\n  var MSG_MONTH_AND_YEAR = goog.getMsg(\\n      '{$monthName} {$yearNum}',\\n      {'monthName': monthName, 'yearNum': String(yearNum)});\\n  return MSG_MONTH_AND_YEAR;\\n};\\n\\n\\n/**\\n * Regular expression for splitting date parts from ISO 8601 styled string.\\n * Examples: '20060210' or '2005-02-22' or '20050222' or '2005-08'\\n * or '2005-W22' or '2005W22' or '2005-W22-4', etc.\\n * For explanation and more examples, see:\\n * {@link http://en.wikipedia.org/wiki/ISO_8601}\\n *\\n * @type {RegExp}\\n * @private\\n */\\ngoog.date.splitDateStringRegex_ = new RegExp(\\n    '^(\\\\\\\\d{4})(?:(?:-?(\\\\\\\\d{2})(?:-?(\\\\\\\\d{2}))?)|' +\\n    '(?:-?(\\\\\\\\d{3}))|(?:-?W(\\\\\\\\d{2})(?:-?([1-7]))?))?$');\\n\\n\\n/**\\n * Regular expression for splitting time parts from ISO 8601 styled string.\\n * Examples: '18:46:39.994' or '184639.994'\\n *\\n * @type {RegExp}\\n * @private\\n */\\ngoog.date.splitTimeStringRegex_ =\\n    /^(\\\\d{2})(?::?(\\\\d{2})(?::?(\\\\d{2})(\\\\.\\\\d+)?)?)?$/;\\n\\n\\n/**\\n * Regular expression for splitting timezone parts from ISO 8601 styled string.\\n * Example: The part after the '+' in '18:46:39+07:00'.  Or '09:30Z' (UTC).\\n *\\n * @type {RegExp}\\n * @private\\n */\\ngoog.date.splitTimezoneStringRegex_ = /Z|(?:([-+])(\\\\d{2})(?::?(\\\\d{2}))?)$/;\\n\\n\\n/**\\n * Regular expression for splitting duration parts from ISO 8601 styled string.\\n * Example: '-P1Y2M3DT4H5M6.7S'\\n *\\n * @type {RegExp}\\n * @private\\n */\\ngoog.date.splitDurationRegex_ = new RegExp(\\n    '^(-)?P(?:(\\\\\\\\d+)Y)?(?:(\\\\\\\\d+)M)?(?:(\\\\\\\\d+)D)?' +\\n    '(T(?:(\\\\\\\\d+)H)?(?:(\\\\\\\\d+)M)?(?:(\\\\\\\\d+(?:\\\\\\\\.\\\\\\\\d+)?)S)?)?$');\\n\\n\\n/**\\n * Number of milliseconds in a day.\\n * @type {number}\\n */\\ngoog.date.MS_PER_DAY = 24 * 60 * 60 * 1000;\\n\\n\\n/**\\n * Returns whether the given year is a leap year.\\n *\\n * @param {number} year Year part of date.\\n * @return {boolean} Whether the given year is a leap year.\\n */\\ngoog.date.isLeapYear = function(year) {\\n  // Leap year logic; the 4-100-400 rule\\n  return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\\n};\\n\\n\\n/**\\n * Returns whether the given year is a long ISO year.\\n * See {@link http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm}.\\n *\\n * @param {number} year Full year part of date.\\n * @return {boolean} Whether the given year is a long ISO year.\\n */\\ngoog.date.isLongIsoYear = function(year) {\\n  var n = 5 * year + 12 - 4 * (Math.floor(year / 100) - Math.floor(year / 400));\\n  n += Math.floor((year - 100) / 400) - Math.floor((year - 102) / 400);\\n  n += Math.floor((year - 200) / 400) - Math.floor((year - 199) / 400);\\n\\n  return n % 28 < 5;\\n};\\n\\n\\n/**\\n * Returns the number of days for a given month.\\n *\\n * @param {number} year Year part of date.\\n * @param {number} month Month part of date.\\n * @return {number} The number of days for the given month.\\n */\\ngoog.date.getNumberOfDaysInMonth = function(year, month) {\\n  switch (month) {\\n    case goog.date.month.FEB:\\n      return goog.date.isLeapYear(year) ? 29 : 28;\\n    case goog.date.month.JUN:\\n    case goog.date.month.SEP:\\n    case goog.date.month.NOV:\\n    case goog.date.month.APR:\\n      return 30;\\n  }\\n  return 31;\\n};\\n\\n\\n/**\\n * Returns true if the 2 dates are in the same day.\\n * @param {goog.date.DateLike} date The time to check.\\n * @param {goog.date.DateLike=} opt_now The current time.\\n * @return {boolean} Whether the dates are on the same day.\\n */\\ngoog.date.isSameDay = function(date, opt_now) {\\n  var now = opt_now || new Date(goog.now());\\n  return date.getDate() == now.getDate() && goog.date.isSameMonth(date, now);\\n};\\n\\n\\n/**\\n * Returns true if the 2 dates are in the same month.\\n * @param {goog.date.DateLike} date The time to check.\\n * @param {goog.date.DateLike=} opt_now The current time.\\n * @return {boolean} Whether the dates are in the same calendar month.\\n */\\ngoog.date.isSameMonth = function(date, opt_now) {\\n  var now = opt_now || new Date(goog.now());\\n  return date.getMonth() == now.getMonth() && goog.date.isSameYear(date, now);\\n};\\n\\n\\n/**\\n * Returns true if the 2 dates are in the same year.\\n * @param {goog.date.DateLike} date The time to check.\\n * @param {goog.date.DateLike=} opt_now The current time.\\n * @return {boolean} Whether the dates are in the same calendar year.\\n */\\ngoog.date.isSameYear = function(date, opt_now) {\\n  var now = opt_now || new Date(goog.now());\\n  return date.getFullYear() == now.getFullYear();\\n};\\n\\n\\n/**\\n * Static function for the day of the same week that determines the week number\\n * and year of week.\\n *\\n * @param {number} year Year part of date.\\n * @param {number} month Month part of date (0-11).\\n * @param {number} date Day part of date (1-31).\\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\\n *     Monday.\\n *     Monday=0, Sunday=6.\\n * @return {number} the cutoff day of the same week in millis since epoch.\\n * @private\\n */\\ngoog.date.getCutOffSameWeek_ = function(\\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\\n  var d = new Date(year, month, date);\\n\\n  // Default to Thursday for cut off as per ISO 8601.\\n  var cutoff = goog.isDef(opt_weekDay) ? opt_weekDay : goog.date.weekDay.THU;\\n\\n  // Default to Monday for first day of the week as per ISO 8601.\\n  var firstday = opt_firstDayOfWeek || goog.date.weekDay.MON;\\n\\n  // The d.getDay() has to be converted first to ISO weekday (Monday=0).\\n  var isoday = (d.getDay() + 6) % 7;\\n\\n  // Position of given day in the picker grid w.r.t. first day of week\\n  var daypos = (isoday - firstday + 7) % 7;\\n\\n  // Position of cut off day in the picker grid w.r.t. first day of week\\n  var cutoffpos = (cutoff - firstday + 7) % 7;\\n\\n  // Unix timestamp of the midnight of the cutoff day in the week of 'd'.\\n  // There might be +-1 hour shift in the result due to the daylight saving,\\n  // but it doesn't affect the year.\\n  return d.valueOf() + (cutoffpos - daypos) * goog.date.MS_PER_DAY;\\n};\\n\\n\\n/**\\n * Static function for week number calculation. ISO 8601 implementation.\\n *\\n * @param {number} year Year part of date.\\n * @param {number} month Month part of date (0-11).\\n * @param {number} date Day part of date (1-31).\\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\\n *     Monday.\\n *     Monday=0, Sunday=6.\\n * @return {number} The week number (1-53).\\n */\\ngoog.date.getWeekNumber = function(\\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(\\n      year, month, date, opt_weekDay, opt_firstDayOfWeek);\\n\\n  // Unix timestamp of January 1 in the year of the week.\\n  var jan1 = new Date(new Date(cutoffSameWeek).getFullYear(), 0, 1).valueOf();\\n\\n  // Number of week. The round() eliminates the effect of daylight saving.\\n  return Math.floor(\\n             Math.round((cutoffSameWeek - jan1) / goog.date.MS_PER_DAY) / 7) +\\n      1;\\n};\\n\\n\\n/**\\n * Static function for year of the week. ISO 8601 implementation.\\n *\\n * @param {number} year Year part of date.\\n * @param {number} month Month part of date (0-11).\\n * @param {number} date Day part of date (1-31).\\n * @param {number=} opt_weekDay Cut off weekday, defaults to Thursday.\\n * @param {number=} opt_firstDayOfWeek First day of the week, defaults to\\n *     Monday.\\n *     Monday=0, Sunday=6.\\n * @return {number} The four digit year of date.\\n */\\ngoog.date.getYearOfWeek = function(\\n    year, month, date, opt_weekDay, opt_firstDayOfWeek) {\\n  var cutoffSameWeek = goog.date.getCutOffSameWeek_(\\n      year, month, date, opt_weekDay, opt_firstDayOfWeek);\\n\\n  return new Date(cutoffSameWeek).getFullYear();\\n};\\n\\n\\n/**\\n * @param {T} date1 A datelike object.\\n * @param {S} date2 Another datelike object.\\n * @return {T|S} The earlier of them in time.\\n * @template T,S\\n */\\ngoog.date.min = function(date1, date2) {\\n  return date1 < date2 ? date1 : date2;\\n};\\n\\n\\n/**\\n * @param {T} date1 A datelike object.\\n * @param {S} date2 Another datelike object.\\n * @return {T|S} The later of them in time.\\n * @template T,S\\n */\\ngoog.date.max = function(date1, date2) {\\n  return date1 > date2 ? date1 : date2;\\n};\\n\\n\\n/**\\n * Parses a datetime string expressed in ISO 8601 format. Overwrites the date\\n * and optionally the time part of the given object with the parsed values.\\n *\\n * @param {!goog.date.DateTime} dateTime Object whose fields will be set.\\n * @param {string} formatted A date or datetime expressed in ISO 8601 format.\\n * @return {boolean} Whether the parsing succeeded.\\n */\\ngoog.date.setIso8601DateTime = function(dateTime, formatted) {\\n  formatted = goog.string.trim(formatted);\\n  var delim = formatted.indexOf('T') == -1 ? ' ' : 'T';\\n  var parts = formatted.split(delim);\\n  return goog.date.setIso8601DateOnly_(dateTime, parts[0]) &&\\n      (parts.length < 2 || goog.date.setIso8601TimeOnly_(dateTime, parts[1]));\\n};\\n\\n\\n/**\\n * Sets date fields based on an ISO 8601 format string.\\n *\\n * @param {!goog.date.Date} d Object whose fields will be set.\\n * @param {string} formatted A date expressed in ISO 8601 format.\\n * @return {boolean} Whether the parsing succeeded.\\n * @private\\n */\\ngoog.date.setIso8601DateOnly_ = function(d, formatted) {\\n  // split the formatted ISO date string into its date fields\\n  var parts = formatted.match(goog.date.splitDateStringRegex_);\\n  if (!parts) {\\n    return false;\\n  }\\n\\n  var year = Number(parts[1]);\\n  var month = Number(parts[2]);\\n  var date = Number(parts[3]);\\n  var dayOfYear = Number(parts[4]);\\n  var week = Number(parts[5]);\\n  // ISO weekdays start with 1, native getDay() values start with 0\\n  var dayOfWeek = Number(parts[6]) || 1;\\n\\n  d.setFullYear(year);\\n\\n  if (dayOfYear) {\\n    d.setDate(1);\\n    d.setMonth(0);\\n    var offset = dayOfYear - 1;  // offset, so 1-indexed, i.e., skip day 1\\n    d.add(new goog.date.Interval(goog.date.Interval.DAYS, offset));\\n  } else if (week) {\\n    goog.date.setDateFromIso8601Week_(d, week, dayOfWeek);\\n  } else {\\n    if (month) {\\n      d.setDate(1);\\n      d.setMonth(month - 1);\\n    }\\n    if (date) {\\n      d.setDate(date);\\n    }\\n  }\\n\\n  return true;\\n};\\n\\n\\n/**\\n * Sets date fields based on an ISO 8601 week string.\\n * See {@link http://en.wikipedia.org/wiki/ISO_week_date}, \\\"Relation with the\\n * Gregorian Calendar\\\".  The first week of a new ISO year is the week with the\\n * majority of its days in the new Gregorian year.  I.e., ISO Week 1's Thursday\\n * is in that year.  ISO weeks always start on Monday. So ISO Week 1 can\\n * contain a few days from the previous Gregorian year.  And ISO weeks always\\n * end on Sunday, so the last ISO week (Week 52 or 53) can have a few days from\\n * the following Gregorian year.\\n * Example: '1997-W01' lasts from 1996-12-30 to 1997-01-05.  January 1, 1997 is\\n * a Wednesday. So W01's Monday is Dec.30, 1996, and Sunday is January 5, 1997.\\n *\\n * @param {!goog.date.Date} d Object whose fields will be set.\\n * @param {number} week ISO week number.\\n * @param {number} dayOfWeek ISO day of week.\\n * @private\\n */\\ngoog.date.setDateFromIso8601Week_ = function(d, week, dayOfWeek) {\\n  // calculate offset for first week\\n  d.setMonth(0);\\n  d.setDate(1);\\n  var jsDay = d.getDay();\\n  // switch Sunday (0) to index 7; ISO days are 1-indexed\\n  var jan1WeekDay = jsDay || 7;\\n\\n  var THURSDAY = 4;\\n  if (jan1WeekDay <= THURSDAY) {\\n    // was extended back to Monday\\n    var startDelta = 1 - jan1WeekDay;  // e.g., Thu(4) ==> -3\\n  } else {\\n    // was extended forward to Monday\\n    startDelta = 8 - jan1WeekDay;  // e.g., Fri(5) ==> +3\\n  }\\n\\n  // find the absolute number of days to offset from the start of year\\n  // to arrive close to the Gregorian equivalent (pending adjustments above)\\n  // Note: decrement week multiplier by one because 1st week is\\n  // represented by dayOfWeek value\\n  var absoluteDays = Number(dayOfWeek) + (7 * (Number(week) - 1));\\n\\n  // convert from ISO weekday format to Gregorian calendar date\\n  // note: subtract 1 because 1-indexed; offset should not include 1st of month\\n  var delta = startDelta + absoluteDays - 1;\\n  var interval = new goog.date.Interval(goog.date.Interval.DAYS, delta);\\n  d.add(interval);\\n};\\n\\n\\n/**\\n * Sets time fields based on an ISO 8601 format string.\\n * Note: only time fields, not date fields.\\n *\\n * @param {!goog.date.DateTime} d Object whose fields will be set.\\n * @param {string} formatted A time expressed in ISO 8601 format.\\n * @return {boolean} Whether the parsing succeeded.\\n * @private\\n */\\ngoog.date.setIso8601TimeOnly_ = function(d, formatted) {\\n  // first strip timezone info from the end\\n  var parts = formatted.match(goog.date.splitTimezoneStringRegex_);\\n\\n  var offset = 0;  // local time if no timezone info\\n  if (parts) {\\n    if (parts[0] != 'Z') {\\n      offset = Number(parts[2]) * 60 + Number(parts[3]);\\n      offset *= parts[1] == '-' ? 1 : -1;\\n    }\\n    offset -= d.getTimezoneOffset();\\n    formatted = formatted.substr(0, formatted.length - parts[0].length);\\n  }\\n\\n  // then work out the time\\n  parts = formatted.match(goog.date.splitTimeStringRegex_);\\n  if (!parts) {\\n    return false;\\n  }\\n\\n  d.setHours(Number(parts[1]));\\n  d.setMinutes(Number(parts[2]) || 0);\\n  d.setSeconds(Number(parts[3]) || 0);\\n  d.setMilliseconds(parts[4] ? Number(parts[4]) * 1000 : 0);\\n\\n  if (offset != 0) {\\n    // adjust the date and time according to the specified timezone\\n    d.setTime(d.getTime() + offset * 60000);\\n  }\\n\\n  return true;\\n};\\n\\n\\n\\n/**\\n * Class representing a date/time interval. Used for date calculations.\\n * <pre>\\n * new goog.date.Interval(0, 1) // One month\\n * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour\\n * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day\\n * </pre>\\n *\\n * @param {number|string=} opt_years Years or string representing date part.\\n * @param {number=} opt_months Months or number of whatever date part specified\\n *     by first parameter.\\n * @param {number=} opt_days Days.\\n * @param {number=} opt_hours Hours.\\n * @param {number=} opt_minutes Minutes.\\n * @param {number=} opt_seconds Seconds.\\n * @constructor\\n * @struct\\n * @final\\n */\\ngoog.date.Interval = function(\\n    opt_years, opt_months, opt_days, opt_hours, opt_minutes, opt_seconds) {\\n  if (goog.isString(opt_years)) {\\n    var type = opt_years;\\n    var interval = /** @type {number} */ (opt_months);\\n    /** @type {number} */\\n    this.years = type == goog.date.Interval.YEARS ? interval : 0;\\n    /** @type {number} */\\n    this.months = type == goog.date.Interval.MONTHS ? interval : 0;\\n    /** @type {number} */\\n    this.days = type == goog.date.Interval.DAYS ? interval : 0;\\n    /** @type {number} */\\n    this.hours = type == goog.date.Interval.HOURS ? interval : 0;\\n    /** @type {number} */\\n    this.minutes = type == goog.date.Interval.MINUTES ? interval : 0;\\n    /** @type {number} */\\n    this.seconds = type == goog.date.Interval.SECONDS ? interval : 0;\\n  } else {\\n    this.years = /** @type {number} */ (opt_years) || 0;\\n    this.months = opt_months || 0;\\n    this.days = opt_days || 0;\\n    this.hours = opt_hours || 0;\\n    this.minutes = opt_minutes || 0;\\n    this.seconds = opt_seconds || 0;\\n  }\\n};\\n\\n\\n/**\\n * Parses an XML Schema duration (ISO 8601 extended).\\n * @see http://www.w3.org/TR/xmlschema-2/#duration\\n *\\n * @param  {string} duration An XML schema duration in textual format.\\n *     Recurring durations and weeks are not supported.\\n * @return {goog.date.Interval} The duration as a goog.date.Interval or null\\n *     if the parse fails.\\n */\\ngoog.date.Interval.fromIsoString = function(duration) {\\n  var parts = duration.match(goog.date.splitDurationRegex_);\\n  if (!parts) {\\n    return null;\\n  }\\n\\n  var timeEmpty = !(parts[6] || parts[7] || parts[8]);\\n  var dateTimeEmpty = timeEmpty && !(parts[2] || parts[3] || parts[4]);\\n  if (dateTimeEmpty || timeEmpty && parts[5]) {\\n    return null;\\n  }\\n\\n  var negative = parts[1];\\n  var years = parseInt(parts[2], 10) || 0;\\n  var months = parseInt(parts[3], 10) || 0;\\n  var days = parseInt(parts[4], 10) || 0;\\n  var hours = parseInt(parts[6], 10) || 0;\\n  var minutes = parseInt(parts[7], 10) || 0;\\n  var seconds = parseFloat(parts[8]) || 0;\\n  return negative ?\\n      new goog.date.Interval(\\n          -years, -months, -days, -hours, -minutes, -seconds) :\\n      new goog.date.Interval(years, months, days, hours, minutes, seconds);\\n};\\n\\n\\n/**\\n * Serializes goog.date.Interval into XML Schema duration (ISO 8601 extended).\\n * @see http://www.w3.org/TR/xmlschema-2/#duration\\n *\\n * @param {boolean=} opt_verbose Include zero fields in the duration string.\\n * @return {?string} An XML schema duration in ISO 8601 extended format,\\n *     or null if the interval contains both positive and negative fields.\\n */\\ngoog.date.Interval.prototype.toIsoString = function(opt_verbose) {\\n  var minField = Math.min(\\n      this.years, this.months, this.days, this.hours, this.minutes,\\n      this.seconds);\\n  var maxField = Math.max(\\n      this.years, this.months, this.days, this.hours, this.minutes,\\n      this.seconds);\\n  if (minField < 0 && maxField > 0) {\\n    return null;\\n  }\\n\\n  // Return 0 seconds if all fields are zero.\\n  if (!opt_verbose && minField == 0 && maxField == 0) {\\n    return 'PT0S';\\n  }\\n\\n  var res = [];\\n\\n  // Add sign and 'P' prefix.\\n  if (minField < 0) {\\n    res.push('-');\\n  }\\n  res.push('P');\\n\\n  // Add date.\\n  if (this.years || opt_verbose) {\\n    res.push(Math.abs(this.years) + 'Y');\\n  }\\n  if (this.months || opt_verbose) {\\n    res.push(Math.abs(this.months) + 'M');\\n  }\\n  if (this.days || opt_verbose) {\\n    res.push(Math.abs(this.days) + 'D');\\n  }\\n\\n  // Add time.\\n  if (this.hours || this.minutes || this.seconds || opt_verbose) {\\n    res.push('T');\\n    if (this.hours || opt_verbose) {\\n      res.push(Math.abs(this.hours) + 'H');\\n    }\\n    if (this.minutes || opt_verbose) {\\n      res.push(Math.abs(this.minutes) + 'M');\\n    }\\n    if (this.seconds || opt_verbose) {\\n      res.push(Math.abs(this.seconds) + 'S');\\n    }\\n  }\\n\\n  return res.join('');\\n};\\n\\n\\n/**\\n * Tests whether the given interval is equal to this interval.\\n * Note, this is a simple field-by-field comparison, it doesn't\\n * account for comparisons like \\\"12 months == 1 year\\\".\\n *\\n * @param {goog.date.Interval} other The interval to test.\\n * @return {boolean} Whether the intervals are equal.\\n */\\ngoog.date.Interval.prototype.equals = function(other) {\\n  return other.years == this.years && other.months == this.months &&\\n      other.days == this.days && other.hours == this.hours &&\\n      other.minutes == this.minutes && other.seconds == this.seconds;\\n};\\n\\n\\n/**\\n * @return {!goog.date.Interval} A clone of the interval object.\\n */\\ngoog.date.Interval.prototype.clone = function() {\\n  return new goog.date.Interval(\\n      this.years, this.months, this.days, this.hours, this.minutes,\\n      this.seconds);\\n};\\n\\n\\n/**\\n * Years constant for the date parts.\\n * @type {string}\\n */\\ngoog.date.Interval.YEARS = 'y';\\n\\n\\n/**\\n * Months constant for the date parts.\\n * @type {string}\\n */\\ngoog.date.Interval.MONTHS = 'm';\\n\\n\\n/**\\n * Days constant for the date parts.\\n * @type {string}\\n */\\ngoog.date.Interval.DAYS = 'd';\\n\\n\\n/**\\n * Hours constant for the date parts.\\n * @type {string}\\n */\\ngoog.date.Interval.HOURS = 'h';\\n\\n\\n/**\\n * Minutes constant for the date parts.\\n * @type {string}\\n */\\ngoog.date.Interval.MINUTES = 'n';\\n\\n\\n/**\\n * Seconds constant for the date parts.\\n * @type {string}\\n */\\ngoog.date.Interval.SECONDS = 's';\\n\\n\\n/**\\n * @return {boolean} Whether all fields of the interval are zero.\\n */\\ngoog.date.Interval.prototype.isZero = function() {\\n  return this.years == 0 && this.months == 0 && this.days == 0 &&\\n      this.hours == 0 && this.minutes == 0 && this.seconds == 0;\\n};\\n\\n\\n/**\\n * @return {!goog.date.Interval} Negative of this interval.\\n */\\ngoog.date.Interval.prototype.getInverse = function() {\\n  return this.times(-1);\\n};\\n\\n\\n/**\\n * Calculates n * (this interval) by memberwise multiplication.\\n * @param {number} n An integer.\\n * @return {!goog.date.Interval} n * this.\\n */\\ngoog.date.Interval.prototype.times = function(n) {\\n  return new goog.date.Interval(\\n      this.years * n, this.months * n, this.days * n, this.hours * n,\\n      this.minutes * n, this.seconds * n);\\n};\\n\\n\\n/**\\n * Gets the total number of seconds in the time interval. Assumes that months\\n * and years are empty.\\n * @return {number} Total number of seconds in the interval.\\n */\\ngoog.date.Interval.prototype.getTotalSeconds = function() {\\n  goog.asserts.assert(this.years == 0 && this.months == 0);\\n  return ((this.days * 24 + this.hours) * 60 + this.minutes) * 60 +\\n      this.seconds;\\n};\\n\\n\\n/**\\n * Adds the Interval in the argument to this Interval field by field.\\n *\\n * @param {goog.date.Interval} interval The Interval to add.\\n */\\ngoog.date.Interval.prototype.add = function(interval) {\\n  this.years += interval.years;\\n  this.months += interval.months;\\n  this.days += interval.days;\\n  this.hours += interval.hours;\\n  this.minutes += interval.minutes;\\n  this.seconds += interval.seconds;\\n};\\n\\n\\n\\n/**\\n * Class representing a date. Defaults to current date if none is specified.\\n *\\n * Implements most methods of the native js Date object (except the time related\\n * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just\\n * as if goog.date.Date was a synonym of Date. To make this more transparent,\\n * Closure APIs should accept goog.date.DateLike instead of the real Date\\n * object.\\n *\\n * @param {number|goog.date.DateLike=} opt_year Four digit year or a date-like\\n *     object. If not set, the created object will contain the date\\n *     determined by goog.now().\\n * @param {number=} opt_month Month, 0 = Jan, 11 = Dec.\\n * @param {number=} opt_date Date of month, 1 - 31.\\n * @constructor\\n * @struct\\n * @see goog.date.DateTime\\n */\\ngoog.date.Date = function(opt_year, opt_month, opt_date) {\\n  /** @protected {!Date} The wrapped date or datetime. */\\n  this.date;\\n  // goog.date.DateTime assumes that only this.date is added in this ctor.\\n  if (goog.isNumber(opt_year)) {\\n    this.date = this.buildDate_(opt_year, opt_month || 0, opt_date || 1);\\n    this.maybeFixDst_(opt_date || 1);\\n  } else if (goog.isObject(opt_year)) {\\n    this.date = this.buildDate_(\\n        opt_year.getFullYear(), opt_year.getMonth(), opt_year.getDate());\\n    this.maybeFixDst_(opt_year.getDate());\\n  } else {\\n    this.date = new Date(goog.now());\\n    var expectedDate = this.date.getDate();\\n    this.date.setHours(0);\\n    this.date.setMinutes(0);\\n    this.date.setSeconds(0);\\n    this.date.setMilliseconds(0);\\n    // In some time zones there is no \\\"0\\\" hour on certain days during DST.\\n    // Adjust here, if necessary. See:\\n    // https://github.com/google/closure-library/issues/34.\\n    this.maybeFixDst_(expectedDate);\\n  }\\n};\\n\\n\\n/**\\n * new Date(y, m, d) treats years in the interval [0, 100) as two digit years,\\n * adding 1900 to them. This method ensures that calling the date constructor\\n * as a copy constructor returns a value that is equal to the passed in\\n * date value by explicitly setting the full year.\\n * @private\\n * @param {number} fullYear The full year (including century).\\n * @param {number} month The month, from 0-11.\\n * @param {number} date The day of the month.\\n * @return {!Date} The constructed Date object.\\n */\\ngoog.date.Date.prototype.buildDate_ = function(fullYear, month, date) {\\n  var d = new Date(fullYear, month, date);\\n  if (fullYear >= 0 && fullYear < 100) {\\n    // Can't just setFullYear as new Date() can flip over for e.g. month = 13.\\n    d.setFullYear(d.getFullYear() - 1900);\\n  }\\n  return d;\\n};\\n\\n\\n/**\\n * First day of week. 0 = Mon, 6 = Sun.\\n * @type {number}\\n * @private\\n */\\ngoog.date.Date.prototype.firstDayOfWeek_ =\\n    goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK;\\n\\n\\n/**\\n * The cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.\\n * @type {number}\\n * @private\\n */\\ngoog.date.Date.prototype.firstWeekCutOffDay_ =\\n    goog.i18n.DateTimeSymbols.FIRSTWEEKCUTOFFDAY;\\n\\n\\n/**\\n * @return {!goog.date.Date} A clone of the date object.\\n */\\ngoog.date.Date.prototype.clone = function() {\\n  var date = new goog.date.Date(this.date);\\n  date.firstDayOfWeek_ = this.firstDayOfWeek_;\\n  date.firstWeekCutOffDay_ = this.firstWeekCutOffDay_;\\n\\n  return date;\\n};\\n\\n\\n/**\\n * @return {number} The four digit year of date.\\n */\\ngoog.date.Date.prototype.getFullYear = function() {\\n  return this.date.getFullYear();\\n};\\n\\n\\n/**\\n * Alias for getFullYear.\\n *\\n * @return {number} The four digit year of date.\\n * @see #getFullYear\\n */\\ngoog.date.Date.prototype.getYear = function() {\\n  return this.getFullYear();\\n};\\n\\n\\n/**\\n * @return {goog.date.month} The month of date, 0 = Jan, 11 = Dec.\\n */\\ngoog.date.Date.prototype.getMonth = function() {\\n  return /** @type {goog.date.month} */ (this.date.getMonth());\\n};\\n\\n\\n/**\\n * @return {number} The date of month.\\n */\\ngoog.date.Date.prototype.getDate = function() {\\n  return this.date.getDate();\\n};\\n\\n\\n/**\\n * Returns the number of milliseconds since 1 January 1970 00:00:00.\\n *\\n * @return {number} The number of milliseconds since 1 January 1970 00:00:00.\\n */\\ngoog.date.Date.prototype.getTime = function() {\\n  return this.date.getTime();\\n};\\n\\n\\n/**\\n * @return {number} The day of week, US style. 0 = Sun, 6 = Sat.\\n */\\ngoog.date.Date.prototype.getDay = function() {\\n  return this.date.getDay();\\n};\\n\\n\\n/**\\n * @return {goog.date.weekDay} The day of week, ISO style. 0 = Mon, 6 = Sun.\\n */\\ngoog.date.Date.prototype.getIsoWeekday = function() {\\n  return /** @type {goog.date.weekDay} */ ((this.getDay() + 6) % 7);\\n};\\n\\n\\n/**\\n * @return {number} The day of week according to firstDayOfWeek setting.\\n */\\ngoog.date.Date.prototype.getWeekday = function() {\\n  return (this.getIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\\n};\\n\\n\\n/**\\n * @return {number} The four digit year of date according to universal time.\\n */\\ngoog.date.Date.prototype.getUTCFullYear = function() {\\n  return this.date.getUTCFullYear();\\n};\\n\\n\\n/**\\n * @return {goog.date.month} The month of date according to universal time,\\n *     0 = Jan, 11 = Dec.\\n */\\ngoog.date.Date.prototype.getUTCMonth = function() {\\n  return /** @type {goog.date.month} */ (this.date.getUTCMonth());\\n};\\n\\n\\n/**\\n * @return {number} The date of month according to universal time.\\n */\\ngoog.date.Date.prototype.getUTCDate = function() {\\n  return this.date.getUTCDate();\\n};\\n\\n\\n/**\\n * @return {number} The day of week according to universal time, US style.\\n *     0 = Sun, 1 = Mon, 6 = Sat.\\n */\\ngoog.date.Date.prototype.getUTCDay = function() {\\n  return this.date.getDay();\\n};\\n\\n\\n/**\\n * @return {number} The hours value according to universal time.\\n */\\ngoog.date.Date.prototype.getUTCHours = function() {\\n  return this.date.getUTCHours();\\n};\\n\\n\\n/**\\n * @return {number} The minutes value according to universal time.\\n */\\ngoog.date.Date.prototype.getUTCMinutes = function() {\\n  return this.date.getUTCMinutes();\\n};\\n\\n\\n/**\\n * @return {goog.date.weekDay} The day of week according to universal time, ISO\\n *     style. 0 = Mon, 6 = Sun.\\n */\\ngoog.date.Date.prototype.getUTCIsoWeekday = function() {\\n  return /** @type {goog.date.weekDay} */ ((this.date.getUTCDay() + 6) % 7);\\n};\\n\\n\\n/**\\n * @return {number} The day of week according to universal time and\\n *     firstDayOfWeek setting.\\n */\\ngoog.date.Date.prototype.getUTCWeekday = function() {\\n  return (this.getUTCIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;\\n};\\n\\n\\n/**\\n * @return {number} The first day of the week. 0 = Mon, 6 = Sun.\\n */\\ngoog.date.Date.prototype.getFirstDayOfWeek = function() {\\n  return this.firstDayOfWeek_;\\n};\\n\\n\\n/**\\n * @return {number} The cut off weekday used for week number calculations.\\n *     0 = Mon, 6 = Sun.\\n */\\ngoog.date.Date.prototype.getFirstWeekCutOffDay = function() {\\n  return this.firstWeekCutOffDay_;\\n};\\n\\n\\n/**\\n * @return {number} The number of days for the selected month.\\n */\\ngoog.date.Date.prototype.getNumberOfDaysInMonth = function() {\\n  return goog.date.getNumberOfDaysInMonth(this.getFullYear(), this.getMonth());\\n};\\n\\n\\n/**\\n * @return {number} The week number.\\n */\\ngoog.date.Date.prototype.getWeekNumber = function() {\\n  return goog.date.getWeekNumber(\\n      this.getFullYear(), this.getMonth(), this.getDate(),\\n      this.firstWeekCutOffDay_, this.firstDayOfWeek_);\\n};\\n\\n\\n/**\\n * Returns year in \\u201cWeek of Year\\u201d based calendars in which the year transition\\n * occurs on a week boundary.\\n * @return {number} The four digit year in \\\"Week of Year\\\"\\n */\\ngoog.date.Date.prototype.getYearOfWeek = function() {\\n  return goog.date.getYearOfWeek(\\n      this.getFullYear(), this.getMonth(), this.getDate(),\\n      this.firstWeekCutOffDay_, this.firstDayOfWeek_);\\n};\\n\\n\\n/**\\n * @return {number} The day of year.\\n */\\ngoog.date.Date.prototype.getDayOfYear = function() {\\n  var dayOfYear = this.getDate();\\n  var year = this.getFullYear();\\n  for (var m = this.getMonth() - 1; m >= 0; m--) {\\n    dayOfYear += goog.date.getNumberOfDaysInMonth(year, m);\\n  }\\n\\n  return dayOfYear;\\n};\\n\\n\\n/**\\n * Returns timezone offset. The timezone offset is the delta in minutes between\\n * UTC and your local time. E.g., UTC+10 returns -600. Daylight savings time\\n * prevents this value from being constant.\\n *\\n * @return {number} The timezone offset.\\n */\\ngoog.date.Date.prototype.getTimezoneOffset = function() {\\n  return this.date.getTimezoneOffset();\\n};\\n\\n\\n/**\\n * Returns timezone offset as a string. Returns offset in [+-]HH:mm format or Z\\n * for UTC.\\n *\\n * @return {string} The timezone offset as a string.\\n */\\ngoog.date.Date.prototype.getTimezoneOffsetString = function() {\\n  var tz;\\n  var offset = this.getTimezoneOffset();\\n\\n  if (offset == 0) {\\n    tz = 'Z';\\n  } else {\\n    var n = Math.abs(offset) / 60;\\n    var h = Math.floor(n);\\n    var m = (n - h) * 60;\\n    tz = (offset > 0 ? '-' : '+') + goog.string.padNumber(h, 2) + ':' +\\n        goog.string.padNumber(m, 2);\\n  }\\n\\n  return tz;\\n};\\n\\n\\n/**\\n * Sets the date.\\n *\\n * @param {goog.date.Date} date Date object to set date from.\\n */\\ngoog.date.Date.prototype.set = function(date) {\\n  this.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\\n};\\n\\n\\n/**\\n * Sets the year part of the date.\\n *\\n * @param {number} year Four digit year.\\n */\\ngoog.date.Date.prototype.setFullYear = function(year) {\\n  this.date.setFullYear(year);\\n};\\n\\n\\n/**\\n * Alias for setFullYear.\\n *\\n * @param {number} year Four digit year.\\n * @see #setFullYear\\n */\\ngoog.date.Date.prototype.setYear = function(year) {\\n  this.setFullYear(year);\\n};\\n\\n\\n/**\\n * Sets the month part of the date.\\n *\\n * TODO(nnaze): Update type to goog.date.month.\\n *\\n * @param {number} month The month, where 0 = Jan, 11 = Dec.\\n */\\ngoog.date.Date.prototype.setMonth = function(month) {\\n  this.date.setMonth(month);\\n};\\n\\n\\n/**\\n * Sets the day part of the date.\\n *\\n * @param {number} date The day part.\\n */\\ngoog.date.Date.prototype.setDate = function(date) {\\n  this.date.setDate(date);\\n};\\n\\n\\n/**\\n * Sets the value of the date object as expressed in the number of milliseconds\\n * since 1 January 1970 00:00:00.\\n *\\n * @param {number} ms Number of milliseconds since 1 Jan 1970.\\n */\\ngoog.date.Date.prototype.setTime = function(ms) {\\n  this.date.setTime(ms);\\n};\\n\\n\\n/**\\n * Sets the year part of the date according to universal time.\\n *\\n * @param {number} year Four digit year.\\n */\\ngoog.date.Date.prototype.setUTCFullYear = function(year) {\\n  this.date.setUTCFullYear(year);\\n};\\n\\n\\n/**\\n * Sets the month part of the date according to universal time.\\n *\\n * @param {number} month The month, where 0 = Jan, 11 = Dec.\\n */\\ngoog.date.Date.prototype.setUTCMonth = function(month) {\\n  this.date.setUTCMonth(month);\\n};\\n\\n\\n/**\\n * Sets the day part of the date according to universal time.\\n *\\n * @param {number} date The UTC date.\\n */\\ngoog.date.Date.prototype.setUTCDate = function(date) {\\n  this.date.setUTCDate(date);\\n};\\n\\n\\n/**\\n * Sets the first day of week.\\n *\\n * @param {number} day 0 = Mon, 6 = Sun.\\n */\\ngoog.date.Date.prototype.setFirstDayOfWeek = function(day) {\\n  this.firstDayOfWeek_ = day;\\n};\\n\\n\\n/**\\n * Sets cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.\\n *\\n * @param {number} day The cut off weekday.\\n */\\ngoog.date.Date.prototype.setFirstWeekCutOffDay = function(day) {\\n  this.firstWeekCutOffDay_ = day;\\n};\\n\\n\\n/**\\n * Performs date calculation by adding the supplied interval to the date.\\n *\\n * @param {goog.date.Interval} interval Date interval to add.\\n */\\ngoog.date.Date.prototype.add = function(interval) {\\n  if (interval.years || interval.months) {\\n    // As months have different number of days adding a month to Jan 31 by just\\n    // setting the month would result in a date in early March rather than Feb\\n    // 28 or 29. Doing it this way overcomes that problem.\\n\\n    // adjust year and month, accounting for both directions\\n    var month = this.getMonth() + interval.months + interval.years * 12;\\n    var year = this.getYear() + Math.floor(month / 12);\\n    month %= 12;\\n    if (month < 0) {\\n      month += 12;\\n    }\\n\\n    var daysInTargetMonth = goog.date.getNumberOfDaysInMonth(year, month);\\n    var date = Math.min(daysInTargetMonth, this.getDate());\\n\\n    // avoid inadvertently causing rollovers to adjacent months\\n    this.setDate(1);\\n\\n    this.setFullYear(year);\\n    this.setMonth(month);\\n    this.setDate(date);\\n  }\\n\\n  if (interval.days) {\\n    // Convert the days to milliseconds and add it to the UNIX timestamp.\\n    // Taking noon helps to avoid 1 day error due to the daylight saving.\\n    var noon = new Date(this.getYear(), this.getMonth(), this.getDate(), 12);\\n    var result = new Date(noon.getTime() + interval.days * 86400000);\\n\\n    // Set date to 1 to prevent rollover caused by setting the year or month.\\n    this.setDate(1);\\n    this.setFullYear(result.getFullYear());\\n    this.setMonth(result.getMonth());\\n    this.setDate(result.getDate());\\n\\n    this.maybeFixDst_(result.getDate());\\n  }\\n};\\n\\n\\n/**\\n * Returns ISO 8601 string representation of date.\\n *\\n * @param {boolean=} opt_verbose Whether the verbose format should be used\\n *     instead of the default compact one.\\n * @param {boolean=} opt_tz Whether the timezone offset should be included\\n *     in the string.\\n * @return {string} ISO 8601 string representation of date.\\n */\\ngoog.date.Date.prototype.toIsoString = function(opt_verbose, opt_tz) {\\n  var str = [\\n    this.getFullYear(), goog.string.padNumber(this.getMonth() + 1, 2),\\n    goog.string.padNumber(this.getDate(), 2)\\n  ];\\n\\n  return str.join((opt_verbose) ? '-' : '') +\\n      (opt_tz ? this.getTimezoneOffsetString() : '');\\n};\\n\\n\\n/**\\n * Returns ISO 8601 string representation of date according to universal time.\\n *\\n * @param {boolean=} opt_verbose Whether the verbose format should be used\\n *     instead of the default compact one.\\n * @param {boolean=} opt_tz Whether the timezone offset should be included in\\n *     the string.\\n * @return {string} ISO 8601 string representation of date according to\\n *     universal time.\\n */\\ngoog.date.Date.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\\n  var str = [\\n    this.getUTCFullYear(), goog.string.padNumber(this.getUTCMonth() + 1, 2),\\n    goog.string.padNumber(this.getUTCDate(), 2)\\n  ];\\n\\n  return str.join((opt_verbose) ? '-' : '') + (opt_tz ? 'Z' : '');\\n};\\n\\n\\n/**\\n * Tests whether given date is equal to this Date.\\n * Note: This ignores units more precise than days (hours and below)\\n * and also ignores timezone considerations.\\n *\\n * @param {goog.date.Date} other The date to compare.\\n * @return {boolean} Whether the given date is equal to this one.\\n */\\ngoog.date.Date.prototype.equals = function(other) {\\n  return !!(\\n      other && this.getYear() == other.getYear() &&\\n      this.getMonth() == other.getMonth() && this.getDate() == other.getDate());\\n};\\n\\n\\n/**\\n * Overloaded toString method for object.\\n * @return {string} ISO 8601 string representation of date.\\n * @override\\n */\\ngoog.date.Date.prototype.toString = function() {\\n  return this.toIsoString();\\n};\\n\\n\\n/**\\n * Fixes date to account for daylight savings time in browsers that fail to do\\n * so automatically.\\n * @param {number} expected Expected date.\\n * @private\\n */\\ngoog.date.Date.prototype.maybeFixDst_ = function(expected) {\\n  if (this.getDate() != expected) {\\n    var dir = this.getDate() < expected ? 1 : -1;\\n    this.date.setUTCHours(this.date.getUTCHours() + dir);\\n  }\\n};\\n\\n\\n/**\\n * @return {number} Value of wrapped date.\\n * @override\\n */\\ngoog.date.Date.prototype.valueOf = function() {\\n  return this.date.valueOf();\\n};\\n\\n\\n/**\\n * Compares two dates.  May be used as a sorting function.\\n * @see goog.array.sort\\n * @param {!goog.date.DateLike} date1 Date to compare.\\n * @param {!goog.date.DateLike} date2 Date to compare.\\n * @return {number} Comparison result. 0 if dates are the same, less than 0 if\\n *     date1 is earlier than date2, greater than 0 if date1 is later than date2.\\n */\\ngoog.date.Date.compare = function(date1, date2) {\\n  return date1.getTime() - date2.getTime();\\n};\\n\\n\\n/**\\n * Parses an ISO 8601 string as a `goog.date.Date`.\\n * @param {string} formatted ISO 8601 string to parse.\\n * @return {?goog.date.Date} Parsed date or null if parse fails.\\n */\\ngoog.date.Date.fromIsoString = function(formatted) {\\n  var ret = new goog.date.Date(2000);\\n  return goog.date.setIso8601DateOnly_(ret, formatted) ? ret : null;\\n};\\n\\n\\n\\n/**\\n * Class representing a date and time. Defaults to current date and time if none\\n * is specified.\\n *\\n * Implements most methods of the native js Date object and can be used\\n * interchangeably with it just as if goog.date.DateTime was a subclass of Date.\\n *\\n * @param {(number|{getTime:?}|null)=} opt_year Four digit year or a date-like\\n *     object. If not set, the created object will contain the date determined\\n *     by goog.now().\\n * @param {number=} opt_month Month, 0 = Jan, 11 = Dec.\\n * @param {number=} opt_date Date of month, 1 - 31.\\n * @param {number=} opt_hours Hours, 0 - 23.\\n * @param {number=} opt_minutes Minutes, 0 - 59.\\n * @param {number=} opt_seconds Seconds, 0 - 61.\\n * @param {number=} opt_milliseconds Milliseconds, 0 - 999.\\n * @constructor\\n * @struct\\n * @extends {goog.date.Date}\\n */\\ngoog.date.DateTime = function(\\n    opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds,\\n    opt_milliseconds) {\\n  if (goog.isNumber(opt_year)) {\\n    /** @override */\\n    this.date = new Date(\\n        opt_year, opt_month || 0, opt_date || 1, opt_hours || 0,\\n        opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);\\n  } else {\\n    this.date = new Date(\\n        opt_year && opt_year.getTime ? opt_year.getTime() : goog.now());\\n  }\\n};\\ngoog.inherits(goog.date.DateTime, goog.date.Date);\\n\\n\\n/**\\n * @param {number} timestamp Number of milliseconds since Epoch.\\n * @return {!goog.date.DateTime}\\n */\\ngoog.date.DateTime.fromTimestamp = function(timestamp) {\\n  var date = new goog.date.DateTime();\\n  date.setTime(timestamp);\\n  return date;\\n};\\n\\n\\n/**\\n * Creates a DateTime from a datetime string expressed in RFC 822 format.\\n *\\n * @param {string} formatted A date or datetime expressed in RFC 822 format.\\n * @return {goog.date.DateTime} Parsed date or null if parse fails.\\n */\\ngoog.date.DateTime.fromRfc822String = function(formatted) {\\n  var date = new Date(formatted);\\n  return !isNaN(date.getTime()) ? new goog.date.DateTime(date) : null;\\n};\\n\\n\\n/**\\n * Returns the hours part of the datetime.\\n *\\n * @return {number} An integer between 0 and 23, representing the hour.\\n */\\ngoog.date.DateTime.prototype.getHours = function() {\\n  return this.date.getHours();\\n};\\n\\n\\n/**\\n * Returns the minutes part of the datetime.\\n *\\n * @return {number} An integer between 0 and 59, representing the minutes.\\n */\\ngoog.date.DateTime.prototype.getMinutes = function() {\\n  return this.date.getMinutes();\\n};\\n\\n\\n/**\\n * Returns the seconds part of the datetime.\\n *\\n * @return {number} An integer between 0 and 59, representing the seconds.\\n */\\ngoog.date.DateTime.prototype.getSeconds = function() {\\n  return this.date.getSeconds();\\n};\\n\\n\\n/**\\n * Returns the milliseconds part of the datetime.\\n *\\n * @return {number} An integer between 0 and 999, representing the milliseconds.\\n */\\ngoog.date.DateTime.prototype.getMilliseconds = function() {\\n  return this.date.getMilliseconds();\\n};\\n\\n\\n/**\\n * Returns the day of week according to universal time, US style.\\n *\\n * @return {goog.date.weekDay} Day of week, 0 = Sun, 1 = Mon, 6 = Sat.\\n * @override\\n */\\ngoog.date.DateTime.prototype.getUTCDay = function() {\\n  return /** @type {goog.date.weekDay} */ (this.date.getUTCDay());\\n};\\n\\n\\n/**\\n * Returns the hours part of the datetime according to universal time.\\n *\\n * @return {number} An integer between 0 and 23, representing the hour.\\n * @override\\n */\\ngoog.date.DateTime.prototype.getUTCHours = function() {\\n  return this.date.getUTCHours();\\n};\\n\\n\\n/**\\n * Returns the minutes part of the datetime according to universal time.\\n *\\n * @return {number} An integer between 0 and 59, representing the minutes.\\n * @override\\n */\\ngoog.date.DateTime.prototype.getUTCMinutes = function() {\\n  return this.date.getUTCMinutes();\\n};\\n\\n\\n/**\\n * Returns the seconds part of the datetime according to universal time.\\n *\\n * @return {number} An integer between 0 and 59, representing the seconds.\\n */\\ngoog.date.DateTime.prototype.getUTCSeconds = function() {\\n  return this.date.getUTCSeconds();\\n};\\n\\n\\n/**\\n * Returns the milliseconds part of the datetime according to universal time.\\n *\\n * @return {number} An integer between 0 and 999, representing the milliseconds.\\n */\\ngoog.date.DateTime.prototype.getUTCMilliseconds = function() {\\n  return this.date.getUTCMilliseconds();\\n};\\n\\n\\n/**\\n * Sets the hours part of the datetime.\\n *\\n * @param {number} hours An integer between 0 and 23, representing the hour.\\n */\\ngoog.date.DateTime.prototype.setHours = function(hours) {\\n  this.date.setHours(hours);\\n};\\n\\n\\n/**\\n * Sets the minutes part of the datetime.\\n *\\n * @param {number} minutes Integer between 0 and 59, representing the minutes.\\n */\\ngoog.date.DateTime.prototype.setMinutes = function(minutes) {\\n  this.date.setMinutes(minutes);\\n};\\n\\n\\n/**\\n * Sets the seconds part of the datetime.\\n *\\n * @param {number} seconds Integer between 0 and 59, representing the seconds.\\n */\\ngoog.date.DateTime.prototype.setSeconds = function(seconds) {\\n  this.date.setSeconds(seconds);\\n};\\n\\n\\n/**\\n * Sets the milliseconds part of the datetime.\\n *\\n * @param {number} ms Integer between 0 and 999, representing the milliseconds.\\n */\\ngoog.date.DateTime.prototype.setMilliseconds = function(ms) {\\n  this.date.setMilliseconds(ms);\\n};\\n\\n\\n/**\\n * Sets the hours part of the datetime according to universal time.\\n *\\n * @param {number} hours An integer between 0 and 23, representing the hour.\\n */\\ngoog.date.DateTime.prototype.setUTCHours = function(hours) {\\n  this.date.setUTCHours(hours);\\n};\\n\\n\\n/**\\n * Sets the minutes part of the datetime according to universal time.\\n *\\n * @param {number} minutes Integer between 0 and 59, representing the minutes.\\n */\\ngoog.date.DateTime.prototype.setUTCMinutes = function(minutes) {\\n  this.date.setUTCMinutes(minutes);\\n};\\n\\n\\n/**\\n * Sets the seconds part of the datetime according to universal time.\\n *\\n * @param {number} seconds Integer between 0 and 59, representing the seconds.\\n */\\ngoog.date.DateTime.prototype.setUTCSeconds = function(seconds) {\\n  this.date.setUTCSeconds(seconds);\\n};\\n\\n\\n/**\\n * Sets the seconds part of the datetime according to universal time.\\n *\\n * @param {number} ms Integer between 0 and 999, representing the milliseconds.\\n */\\ngoog.date.DateTime.prototype.setUTCMilliseconds = function(ms) {\\n  this.date.setUTCMilliseconds(ms);\\n};\\n\\n\\n/**\\n * @return {boolean} Whether the datetime is aligned to midnight.\\n */\\ngoog.date.DateTime.prototype.isMidnight = function() {\\n  return this.getHours() == 0 && this.getMinutes() == 0 &&\\n      this.getSeconds() == 0 && this.getMilliseconds() == 0;\\n};\\n\\n\\n/**\\n * Performs date calculation by adding the supplied interval to the date.\\n *\\n * @param {goog.date.Interval} interval Date interval to add.\\n * @override\\n */\\ngoog.date.DateTime.prototype.add = function(interval) {\\n  goog.date.Date.prototype.add.call(this, interval);\\n\\n  if (interval.hours) {\\n    this.setUTCHours(this.date.getUTCHours() + interval.hours);\\n  }\\n  if (interval.minutes) {\\n    this.setUTCMinutes(this.date.getUTCMinutes() + interval.minutes);\\n  }\\n  if (interval.seconds) {\\n    this.setUTCSeconds(this.date.getUTCSeconds() + interval.seconds);\\n  }\\n};\\n\\n\\n/**\\n * Returns ISO 8601 string representation of date/time.\\n *\\n * @param {boolean=} opt_verbose Whether the verbose format should be used\\n *     instead of the default compact one.\\n * @param {boolean=} opt_tz Whether the timezone offset should be included\\n *     in the string.\\n * @return {string} ISO 8601 string representation of date/time.\\n * @override\\n */\\ngoog.date.DateTime.prototype.toIsoString = function(opt_verbose, opt_tz) {\\n  var dateString = goog.date.Date.prototype.toIsoString.call(this, opt_verbose);\\n\\n  if (opt_verbose) {\\n    return dateString + ' ' + goog.string.padNumber(this.getHours(), 2) + ':' +\\n        goog.string.padNumber(this.getMinutes(), 2) + ':' +\\n        goog.string.padNumber(this.getSeconds(), 2) +\\n        (opt_tz ? this.getTimezoneOffsetString() : '');\\n  }\\n\\n  return dateString + 'T' + goog.string.padNumber(this.getHours(), 2) +\\n      goog.string.padNumber(this.getMinutes(), 2) +\\n      goog.string.padNumber(this.getSeconds(), 2) +\\n      (opt_tz ? this.getTimezoneOffsetString() : '');\\n};\\n\\n\\n/**\\n * Returns XML Schema 2 string representation of date/time.\\n * The return value is also ISO 8601 compliant.\\n *\\n * @param {boolean=} opt_timezone Should the timezone offset be included in the\\n *     string?.\\n * @return {string} XML Schema 2 string representation of date/time.\\n */\\ngoog.date.DateTime.prototype.toXmlDateTime = function(opt_timezone) {\\n  return goog.date.Date.prototype.toIsoString.call(this, true) + 'T' +\\n      goog.string.padNumber(this.getHours(), 2) + ':' +\\n      goog.string.padNumber(this.getMinutes(), 2) + ':' +\\n      goog.string.padNumber(this.getSeconds(), 2) +\\n      (opt_timezone ? this.getTimezoneOffsetString() : '');\\n};\\n\\n\\n/**\\n * Returns ISO 8601 string representation of date/time according to universal\\n * time.\\n *\\n * @param {boolean=} opt_verbose Whether the opt_verbose format should be\\n *     returned instead of the default compact one.\\n * @param {boolean=} opt_tz Whether the the timezone offset should be included\\n *     in the string.\\n * @return {string} ISO 8601 string representation of date/time according to\\n *     universal time.\\n * @override\\n */\\ngoog.date.DateTime.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {\\n  var dateStr = goog.date.Date.prototype.toUTCIsoString.call(this, opt_verbose);\\n\\n  if (opt_verbose) {\\n    return dateStr + ' ' + goog.string.padNumber(this.getUTCHours(), 2) + ':' +\\n        goog.string.padNumber(this.getUTCMinutes(), 2) + ':' +\\n        goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');\\n  }\\n\\n  return dateStr + 'T' + goog.string.padNumber(this.getUTCHours(), 2) +\\n      goog.string.padNumber(this.getUTCMinutes(), 2) +\\n      goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');\\n};\\n\\n\\n/**\\n * Returns RFC 3339 string representation of datetime in UTC.\\n *\\n * @return {string} A UTC datetime expressed in RFC 3339 format.\\n */\\ngoog.date.DateTime.prototype.toUTCRfc3339String = function() {\\n  var date = this.toUTCIsoString(true).replace(' ', 'T');\\n  var millis = this.getUTCMilliseconds();\\n  return (millis ? date + '.' + goog.string.padNumber(millis, 3) : date) + 'Z';\\n};\\n\\n\\n/**\\n * Tests whether given datetime is exactly equal to this DateTime.\\n *\\n * @param {goog.date.Date} other The datetime to compare.\\n * @return {boolean} Whether the given datetime is exactly equal to this one.\\n * @override\\n */\\ngoog.date.DateTime.prototype.equals = function(other) {\\n  return this.getTime() == other.getTime();\\n};\\n\\n\\n/**\\n * Overloaded toString method for object.\\n * @return {string} ISO 8601 string representation of date/time.\\n * @override\\n */\\ngoog.date.DateTime.prototype.toString = function() {\\n  return this.toIsoString();\\n};\\n\\n\\n/**\\n * Generates time label for the datetime, e.g., '5:30 AM'.\\n * By default this does not pad hours (e.g., to '05:30') and it does add\\n * an am/pm suffix.\\n * TODO(user): i18n -- hardcoding time format like this is bad.  E.g., in CJK\\n *               locales, need Chinese characters for hour and minute units.\\n * @param {boolean=} opt_padHours Whether to pad hours, e.g., '05:30' vs '5:30'.\\n * @param {boolean=} opt_showAmPm Whether to show the 'am' and 'pm' suffix.\\n * @param {boolean=} opt_omitZeroMinutes E.g., '5:00pm' becomes '5pm',\\n *                                      but '5:01pm' remains '5:01pm'.\\n * @return {string} The time label.\\n * @deprecated Use goog.i18n.DateTimeFormat with\\n *     goog.i18n.DateTimeFormat.Format.FULL_TIME or\\n *     goog.i18n.DateTimeFormat.Format.LONG_TIME or\\n *     goog.i18n.DateTimeFormat.Format.MEDIUM_TIME or\\n *     goog.i18n.DateTimeFormat.Format.SHORT_TIME.\\n */\\ngoog.date.DateTime.prototype.toUsTimeString = function(\\n    opt_padHours, opt_showAmPm, opt_omitZeroMinutes) {\\n  var hours = this.getHours();\\n\\n  // show am/pm marker by default\\n  if (!goog.isDef(opt_showAmPm)) {\\n    opt_showAmPm = true;\\n  }\\n\\n  // 12pm\\n  var isPM = hours == 12;\\n\\n  // change from 1-24 to 1-12 basis\\n  if (hours > 12) {\\n    hours -= 12;\\n    isPM = true;\\n  }\\n\\n  // midnight is expressed as \\\"12am\\\", but if am/pm marker omitted, keep as '0'\\n  if (hours == 0 && opt_showAmPm) {\\n    hours = 12;\\n  }\\n\\n  var label = opt_padHours ? goog.string.padNumber(hours, 2) : String(hours);\\n  var minutes = this.getMinutes();\\n  if (!opt_omitZeroMinutes || minutes > 0) {\\n    label += ':' + goog.string.padNumber(minutes, 2);\\n  }\\n\\n  // by default, show am/pm suffix\\n  if (opt_showAmPm) {\\n    label += isPM ? ' PM' : ' AM';\\n  }\\n  return label;\\n};\\n\\n\\n/**\\n * Generates time label for the datetime in standard ISO 24-hour time format.\\n * E.g., '06:00:00' or '23:30:15'.\\n * @param {boolean=} opt_showSeconds Whether to shows seconds. Defaults to TRUE.\\n * @return {string} The time label.\\n */\\ngoog.date.DateTime.prototype.toIsoTimeString = function(opt_showSeconds) {\\n  var hours = this.getHours();\\n  var label = goog.string.padNumber(hours, 2) + ':' +\\n      goog.string.padNumber(this.getMinutes(), 2);\\n  if (!goog.isDef(opt_showSeconds) || opt_showSeconds) {\\n    label += ':' + goog.string.padNumber(this.getSeconds(), 2);\\n  }\\n  return label;\\n};\\n\\n\\n/**\\n * @return {!goog.date.DateTime} A clone of the datetime object.\\n * @override\\n */\\ngoog.date.DateTime.prototype.clone = function() {\\n  var date = new goog.date.DateTime(this.date);\\n  date.setFirstDayOfWeek(this.getFirstDayOfWeek());\\n  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());\\n  return date;\\n};\\n\\n\\n/**\\n * Parses an ISO 8601 string as a `goog.date.DateTime`.\\n * @param {string} formatted ISO 8601 string to parse.\\n * @return {?goog.date.DateTime} Parsed date or null if parse fails.\\n * @override\\n */\\ngoog.date.DateTime.fromIsoString = function(formatted) {\\n  var ret = new goog.date.DateTime(2000);\\n  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"date\",\"weekDay\",\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\",\"SUN\",\"month\",\"JAN\",\"FEB\",\"MAR\",\"APR\",\"MAY\",\"JUN\",\"JUL\",\"AUG\",\"SEP\",\"OCT\",\"NOV\",\"DEC\",\"formatMonthAndYear\",\"goog.date.formatMonthAndYear\",\"monthName\",\"yearNum\",\"MSG_MONTH_AND_YEAR\",\"getMsg\",\"String\",\"splitDateStringRegex_\",\"RegExp\",\"splitTimeStringRegex_\",\"splitTimezoneStringRegex_\",\"splitDurationRegex_\",\"MS_PER_DAY\",\"isLeapYear\",\"goog.date.isLeapYear\",\"year\",\"isLongIsoYear\",\"goog.date.isLongIsoYear\",\"n\",\"Math\",\"floor\",\"getNumberOfDaysInMonth\",\"goog.date.getNumberOfDaysInMonth\",\"isSameDay\",\"goog.date.isSameDay\",\"opt_now\",\"now\",\"Date\",\"getDate\",\"isSameMonth\",\"goog.date.isSameMonth\",\"getMonth\",\"isSameYear\",\"goog.date.isSameYear\",\"getFullYear\",\"getCutOffSameWeek_\",\"goog.date.getCutOffSameWeek_\",\"opt_weekDay\",\"opt_firstDayOfWeek\",\"d\",\"cutoff\",\"isDef\",\"firstday\",\"isoday\",\"getDay\",\"daypos\",\"cutoffpos\",\"valueOf\",\"getWeekNumber\",\"goog.date.getWeekNumber\",\"cutoffSameWeek\",\"jan1\",\"round\",\"getYearOfWeek\",\"goog.date.getYearOfWeek\",\"min\",\"goog.date.min\",\"date1\",\"date2\",\"max\",\"goog.date.max\",\"setIso8601DateTime\",\"goog.date.setIso8601DateTime\",\"dateTime\",\"formatted\",\"string\",\"trim\",\"delim\",\"indexOf\",\"parts\",\"split\",\"setIso8601DateOnly_\",\"length\",\"setIso8601TimeOnly_\",\"goog.date.setIso8601DateOnly_\",\"match\",\"Number\",\"dayOfYear\",\"week\",\"dayOfWeek\",\"setFullYear\",\"setDate\",\"setMonth\",\"offset\",\"add\",\"Interval\",\"DAYS\",\"setDateFromIso8601Week_\",\"goog.date.setDateFromIso8601Week_\",\"jsDay\",\"jan1WeekDay\",\"THURSDAY\",\"startDelta\",\"absoluteDays\",\"delta\",\"interval\",\"goog.date.setIso8601TimeOnly_\",\"getTimezoneOffset\",\"substr\",\"setHours\",\"setMinutes\",\"setSeconds\",\"setMilliseconds\",\"setTime\",\"getTime\",\"goog.date.Interval\",\"opt_years\",\"opt_months\",\"opt_days\",\"opt_hours\",\"opt_minutes\",\"opt_seconds\",\"isString\",\"type\",\"years\",\"YEARS\",\"months\",\"MONTHS\",\"days\",\"hours\",\"HOURS\",\"minutes\",\"MINUTES\",\"seconds\",\"SECONDS\",\"fromIsoString\",\"goog.date.Interval.fromIsoString\",\"duration\",\"timeEmpty\",\"dateTimeEmpty\",\"negative\",\"parseInt\",\"parseFloat\",\"prototype\",\"toIsoString\",\"goog.date.Interval.prototype.toIsoString\",\"opt_verbose\",\"minField\",\"maxField\",\"res\",\"push\",\"abs\",\"join\",\"equals\",\"goog.date.Interval.prototype.equals\",\"other\",\"clone\",\"goog.date.Interval.prototype.clone\",\"isZero\",\"goog.date.Interval.prototype.isZero\",\"getInverse\",\"goog.date.Interval.prototype.getInverse\",\"times\",\"goog.date.Interval.prototype.times\",\"getTotalSeconds\",\"goog.date.Interval.prototype.getTotalSeconds\",\"asserts\",\"assert\",\"goog.date.Interval.prototype.add\",\"goog.date.Date\",\"opt_year\",\"opt_month\",\"opt_date\",\"isNumber\",\"buildDate_\",\"maybeFixDst_\",\"isObject\",\"expectedDate\",\"goog.date.Date.prototype.buildDate_\",\"fullYear\",\"firstDayOfWeek_\",\"i18n\",\"DateTimeSymbols\",\"FIRSTDAYOFWEEK\",\"firstWeekCutOffDay_\",\"FIRSTWEEKCUTOFFDAY\",\"goog.date.Date.prototype.clone\",\"goog.date.Date.prototype.getFullYear\",\"getYear\",\"goog.date.Date.prototype.getYear\",\"goog.date.Date.prototype.getMonth\",\"goog.date.Date.prototype.getDate\",\"goog.date.Date.prototype.getTime\",\"goog.date.Date.prototype.getDay\",\"getIsoWeekday\",\"goog.date.Date.prototype.getIsoWeekday\",\"getWeekday\",\"goog.date.Date.prototype.getWeekday\",\"getUTCFullYear\",\"goog.date.Date.prototype.getUTCFullYear\",\"getUTCMonth\",\"goog.date.Date.prototype.getUTCMonth\",\"getUTCDate\",\"goog.date.Date.prototype.getUTCDate\",\"getUTCDay\",\"goog.date.Date.prototype.getUTCDay\",\"getUTCHours\",\"goog.date.Date.prototype.getUTCHours\",\"getUTCMinutes\",\"goog.date.Date.prototype.getUTCMinutes\",\"getUTCIsoWeekday\",\"goog.date.Date.prototype.getUTCIsoWeekday\",\"getUTCWeekday\",\"goog.date.Date.prototype.getUTCWeekday\",\"getFirstDayOfWeek\",\"goog.date.Date.prototype.getFirstDayOfWeek\",\"getFirstWeekCutOffDay\",\"goog.date.Date.prototype.getFirstWeekCutOffDay\",\"goog.date.Date.prototype.getNumberOfDaysInMonth\",\"goog.date.Date.prototype.getWeekNumber\",\"goog.date.Date.prototype.getYearOfWeek\",\"getDayOfYear\",\"goog.date.Date.prototype.getDayOfYear\",\"m\",\"goog.date.Date.prototype.getTimezoneOffset\",\"getTimezoneOffsetString\",\"goog.date.Date.prototype.getTimezoneOffsetString\",\"tz\",\"h\",\"padNumber\",\"set\",\"goog.date.Date.prototype.set\",\"goog.date.Date.prototype.setFullYear\",\"setYear\",\"goog.date.Date.prototype.setYear\",\"goog.date.Date.prototype.setMonth\",\"goog.date.Date.prototype.setDate\",\"goog.date.Date.prototype.setTime\",\"ms\",\"setUTCFullYear\",\"goog.date.Date.prototype.setUTCFullYear\",\"setUTCMonth\",\"goog.date.Date.prototype.setUTCMonth\",\"setUTCDate\",\"goog.date.Date.prototype.setUTCDate\",\"setFirstDayOfWeek\",\"goog.date.Date.prototype.setFirstDayOfWeek\",\"day\",\"setFirstWeekCutOffDay\",\"goog.date.Date.prototype.setFirstWeekCutOffDay\",\"goog.date.Date.prototype.add\",\"daysInTargetMonth\",\"noon\",\"result\",\"goog.date.Date.prototype.toIsoString\",\"opt_tz\",\"str\",\"toUTCIsoString\",\"goog.date.Date.prototype.toUTCIsoString\",\"goog.date.Date.prototype.equals\",\"toString\",\"goog.date.Date.prototype.toString\",\"goog.date.Date.prototype.maybeFixDst_\",\"expected\",\"dir\",\"setUTCHours\",\"goog.date.Date.prototype.valueOf\",\"compare\",\"goog.date.Date.compare\",\"goog.date.Date.fromIsoString\",\"ret\",\"DateTime\",\"goog.date.DateTime\",\"opt_milliseconds\",\"inherits\",\"fromTimestamp\",\"goog.date.DateTime.fromTimestamp\",\"timestamp\",\"fromRfc822String\",\"goog.date.DateTime.fromRfc822String\",\"isNaN\",\"getHours\",\"goog.date.DateTime.prototype.getHours\",\"getMinutes\",\"goog.date.DateTime.prototype.getMinutes\",\"getSeconds\",\"goog.date.DateTime.prototype.getSeconds\",\"getMilliseconds\",\"goog.date.DateTime.prototype.getMilliseconds\",\"goog.date.DateTime.prototype.getUTCDay\",\"goog.date.DateTime.prototype.getUTCHours\",\"goog.date.DateTime.prototype.getUTCMinutes\",\"getUTCSeconds\",\"goog.date.DateTime.prototype.getUTCSeconds\",\"getUTCMilliseconds\",\"goog.date.DateTime.prototype.getUTCMilliseconds\",\"goog.date.DateTime.prototype.setHours\",\"goog.date.DateTime.prototype.setMinutes\",\"goog.date.DateTime.prototype.setSeconds\",\"goog.date.DateTime.prototype.setMilliseconds\",\"goog.date.DateTime.prototype.setUTCHours\",\"setUTCMinutes\",\"goog.date.DateTime.prototype.setUTCMinutes\",\"setUTCSeconds\",\"goog.date.DateTime.prototype.setUTCSeconds\",\"setUTCMilliseconds\",\"goog.date.DateTime.prototype.setUTCMilliseconds\",\"isMidnight\",\"goog.date.DateTime.prototype.isMidnight\",\"goog.date.DateTime.prototype.add\",\"call\",\"goog.date.DateTime.prototype.toIsoString\",\"dateString\",\"toXmlDateTime\",\"goog.date.DateTime.prototype.toXmlDateTime\",\"opt_timezone\",\"goog.date.DateTime.prototype.toUTCIsoString\",\"dateStr\",\"toUTCRfc3339String\",\"goog.date.DateTime.prototype.toUTCRfc3339String\",\"replace\",\"millis\",\"goog.date.DateTime.prototype.equals\",\"goog.date.DateTime.prototype.toString\",\"toUsTimeString\",\"goog.date.DateTime.prototype.toUsTimeString\",\"opt_padHours\",\"opt_showAmPm\",\"opt_omitZeroMinutes\",\"isPM\",\"label\",\"toIsoTimeString\",\"goog.date.DateTime.prototype.toIsoTimeString\",\"opt_showSeconds\",\"goog.date.DateTime.prototype.clone\",\"goog.date.DateTime.fromIsoString\"]\n}\n"]