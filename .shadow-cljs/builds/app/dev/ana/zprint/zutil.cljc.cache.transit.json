["^ ","~:output",["^ ","~:js","goog.provide('zprint.zutil');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('zprint.zfns');\ngoog.require('rewrite_clj.parser');\ngoog.require('rewrite_clj.node');\ngoog.require('rewrite_clj.zip');\ngoog.require('rewrite_clj.zip.base');\ngoog.require('rewrite_clj.zip.whitespace');\ngoog.require('rewrite_clj.zip.move');\ngoog.require('rewrite_clj.zip.removez');\ngoog.require('rewrite_clj.zip.editz');\ngoog.require('clojure.zip');\nzprint.zutil.down_STAR_ = clojure.zip.down;\nzprint.zutil.up_STAR_ = clojure.zip.up;\nzprint.zutil.right_STAR_ = clojure.zip.right;\nzprint.zutil.left_STAR_ = clojure.zip.left;\nzprint.zutil.next_STAR_ = clojure.zip.next;\nzprint.zutil.prev_STAR_ = clojure.zip.prev;\nzprint.zutil.replace_STAR_ = clojure.zip.replace;\nzprint.zutil.edn_STAR_ = rewrite_clj.zip.base.edn_STAR_;\nzprint.zutil.sexpr = rewrite_clj.zip.base.sexpr;\nzprint.zutil.string = rewrite_clj.zip.base.string;\nzprint.zutil.tag = rewrite_clj.zip.base.tag;\nzprint.zutil.skip = rewrite_clj.zip.whitespace.skip;\nzprint.zutil.skip_whitespace = rewrite_clj.zip.whitespace.skip_whitespace;\nzprint.zutil.whitespace_QMARK_ = rewrite_clj.zip.whitespace.whitespace_QMARK_;\nzprint.zutil.whitespace_or_comment_QMARK_ = rewrite_clj.zip.whitespace.whitespace_or_comment_QMARK_;\nzprint.zutil.length = rewrite_clj.zip.base.length;\nzprint.zutil.rightmost_QMARK_ = rewrite_clj.zip.move.rightmost_QMARK_;\nzprint.zutil.zremove = rewrite_clj.zip.removez.remove;\nzprint.zutil.zreplace = rewrite_clj.zip.editz.replace;\n/**\n * Is the zipper zloc equivalent to the path floc.  In this\n *   case, floc isn't a zipper, but was turned into a path early on.\n */\nzprint.zutil.zfocus = (function zprint$zutil$zfocus(zloc,floc){\nvar vec__49088 = (zprint.zutil.find_root_and_path.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.find_root_and_path.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.find_root_and_path.call(null,zloc));\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49088,(0),null);\nvar zpath = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__49088,(1),null);\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zpath,floc);\n});\n/**\n * Take the various inputs and come up with a style.\n */\nzprint.zutil.zfocus_style = (function zprint$zutil$zfocus_style(style,zloc,floc){\nvar style__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(style,new cljs.core.Keyword(null,\"f\",\"f\",-1597136552)))?style:((zprint.zutil.zfocus(zloc,floc))?new cljs.core.Keyword(null,\"f\",\"f\",-1597136552):new cljs.core.Keyword(null,\"b\",\"b\",1482224470)));\nreturn style__$1;\n});\n/**\n * Is the zloc a collection?\n */\nzprint.zutil.z_coll_QMARK_ = (function zprint$zutil$z_coll_QMARK_(zloc){\nreturn (rewrite_clj.zip.seq_QMARK_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.seq_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.seq_QMARK_.call(null,zloc));\n});\n/**\n * Is this a #_(...)\n */\nzprint.zutil.zuneval_QMARK_ = (function zprint$zutil$zuneval_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.tag.call(null,zloc)),new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707));\n});\n/**\n * Is this a ^{...}\n */\nzprint.zutil.zmeta_QMARK_ = (function zprint$zutil$zmeta_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.tag.call(null,zloc)),new cljs.core.Keyword(null,\"meta\",\"meta\",1499536964));\n});\n/**\n * Is this a '(...) or '[ ... ] or some other quote?\n */\nzprint.zutil.zquote_QMARK_ = (function zprint$zutil$zquote_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.tag.call(null,zloc)),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245));\n});\n/**\n * Is this a @...\n */\nzprint.zutil.zreader_macro_QMARK_ = (function zprint$zutil$zreader_macro_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.tag.call(null,zloc)),new cljs.core.Keyword(null,\"reader-macro\",\"reader-macro\",750056422));\n});\n/**\n * Return the tag for this zloc\n */\nzprint.zutil.ztag = (function zprint$zutil$ztag(zloc){\nreturn (zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.tag.call(null,zloc));\n});\n/**\n * Is this a namespaced map?\n */\nzprint.zutil.znamespacedmap_QMARK_ = (function zprint$zutil$znamespacedmap_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.tag.call(null,zloc)),new cljs.core.Keyword(null,\"namespaced-map\",\"namespaced-map\",1235665380));\n});\n/**\n * Returns true if this is a comment.\n */\nzprint.zutil.zcomment_QMARK_ = (function zprint$zutil$zcomment_QMARK_(zloc){\nif(cljs.core.truth_(zloc)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.tag.call(null,zloc)),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069));\n} else {\nreturn null;\n}\n});\n/**\n * Returns true if this is a newline.\n */\nzprint.zutil.znewline_QMARK_ = (function zprint$zutil$znewline_QMARK_(zloc){\nif(cljs.core.truth_(zloc)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.tag.call(null,zloc)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\n} else {\nreturn null;\n}\n});\n/**\n * Does z/string, but takes an additional argument for hex conversion.\n *   Hex conversion is not implemented for zippers, though, because at present\n *   it is only used for byte-arrays, which don't really show up here.\n */\nzprint.zutil.znumstr = (function zprint$zutil$znumstr(zloc,_,___$1){\nreturn (zprint.zutil.string.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.string.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.string.call(null,zloc));\n});\n/**\n * Find the first non-whitespace zloc inside of this zloc, or\n *   the first whitespace zloc that is the focus.\n */\nzprint.zutil.zfirst = (function zprint$zutil$zfirst(zloc){\nvar nloc = (zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.down_STAR_.call(null,zloc));\nif(cljs.core.truth_(nloc)){\nreturn (zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,nloc) : zprint.zutil.skip.call(null,zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,nloc));\n} else {\nreturn null;\n}\n});\n/**\n * Find the first non-whitespace and non-comment zloc inside of this zloc.\n */\nzprint.zutil.zfirst_no_comment = (function zprint$zutil$zfirst_no_comment(zloc){\nvar nloc = (zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.down_STAR_.call(null,zloc));\nif(cljs.core.truth_(nloc)){\nreturn (zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.right_STAR_,zprint.zutil.whitespace_or_comment_QMARK_,nloc) : zprint.zutil.skip.call(null,zprint.zutil.right_STAR_,zprint.zutil.whitespace_or_comment_QMARK_,nloc));\n} else {\nreturn null;\n}\n});\n/**\n * Find the second non-whitespace zloc inside of this zloc.\n */\nzprint.zutil.zsecond = (function zprint$zutil$zsecond(zloc){\nvar temp__5733__auto__ = zprint.zutil.zfirst(zloc);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar first_loc = temp__5733__auto__;\nvar temp__5733__auto____$1 = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(first_loc) : zprint.zutil.right_STAR_.call(null,first_loc));\nif(cljs.core.truth_(temp__5733__auto____$1)){\nvar nloc = temp__5733__auto____$1;\nreturn (zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,nloc) : zprint.zutil.skip.call(null,zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,nloc));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Find the third non-whitespace zloc inside of this zloc.\n */\nzprint.zutil.zthird = (function zprint$zutil$zthird(zloc){\nvar G__49103 = zprint.zutil.zfirst(zloc);\nvar G__49103__$1 = (((G__49103 == null))?null:(zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(G__49103) : zprint.zutil.right_STAR_.call(null,G__49103)));\nvar G__49103__$2 = (((G__49103__$1 == null))?null:(zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,G__49103__$1) : zprint.zutil.skip.call(null,zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,G__49103__$1)));\nvar G__49103__$3 = (((G__49103__$2 == null))?null:(zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(G__49103__$2) : zprint.zutil.right_STAR_.call(null,G__49103__$2)));\nif((G__49103__$3 == null)){\nreturn null;\n} else {\nreturn (zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,G__49103__$3) : zprint.zutil.skip.call(null,zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,G__49103__$3));\n}\n});\n/**\n * Find the fourth non-whitespace zloc inside of this zloc.\n */\nzprint.zutil.zfourth = (function zprint$zutil$zfourth(zloc){\nvar G__49104 = zprint.zutil.zfirst(zloc);\nvar G__49104__$1 = (((G__49104 == null))?null:(zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(G__49104) : zprint.zutil.right_STAR_.call(null,G__49104)));\nvar G__49104__$2 = (((G__49104__$1 == null))?null:(zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,G__49104__$1) : zprint.zutil.skip.call(null,zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,G__49104__$1)));\nvar G__49104__$3 = (((G__49104__$2 == null))?null:(zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(G__49104__$2) : zprint.zutil.right_STAR_.call(null,G__49104__$2)));\nvar G__49104__$4 = (((G__49104__$3 == null))?null:(zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,G__49104__$3) : zprint.zutil.skip.call(null,zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,G__49104__$3)));\nvar G__49104__$5 = (((G__49104__$4 == null))?null:(zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(G__49104__$4) : zprint.zutil.right_STAR_.call(null,G__49104__$4)));\nif((G__49104__$5 == null)){\nreturn null;\n} else {\nreturn (zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,G__49104__$5) : zprint.zutil.skip.call(null,zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,G__49104__$5));\n}\n});\n/**\n * Find the next non-whitespace zloc inside of this zloc.\n */\nzprint.zutil.zrightnws = (function zprint$zutil$zrightnws(zloc){\nif(cljs.core.truth_(zloc)){\nvar temp__5733__auto__ = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.right_STAR_.call(null,zloc));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar nloc = temp__5733__auto__;\nreturn (zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,nloc) : zprint.zutil.skip.call(null,zprint.zutil.right_STAR_,zprint.zutil.whitespace_QMARK_,nloc));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Find the rightmost non-whitespace zloc at this level\n */\nzprint.zutil.zrightmost = (function zprint$zutil$zrightmost(zloc){\nvar nloc = zprint.zutil.zrightnws(zloc);\nvar ploc = zloc;\nwhile(true){\nif(cljs.core.not(nloc)){\nreturn ploc;\n} else {\nvar G__49676 = zprint.zutil.zrightnws(nloc);\nvar G__49677 = nloc;\nnloc = G__49676;\nploc = G__49677;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Find the next non-whitespace zloc inside of this zloc.\n */\nzprint.zutil.zleftnws = (function zprint$zutil$zleftnws(zloc){\nif(cljs.core.truth_(zloc)){\nvar temp__5733__auto__ = (zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.left_STAR_.call(null,zloc));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar nloc = temp__5733__auto__;\nreturn (zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.left_STAR_,zprint.zutil.whitespace_QMARK_,nloc) : zprint.zutil.skip.call(null,zprint.zutil.left_STAR_,zprint.zutil.whitespace_QMARK_,nloc));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Find the leftmost non-whitespace zloc at this level\n */\nzprint.zutil.zleftmost = (function zprint$zutil$zleftmost(zloc){\nvar nloc = zprint.zutil.zleftnws(zloc);\nvar ploc = zloc;\nwhile(true){\nif(cljs.core.not(nloc)){\nreturn ploc;\n} else {\nvar G__49678 = zprint.zutil.zleftnws(nloc);\nvar G__49679 = nloc;\nnloc = G__49678;\nploc = G__49679;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Find the next non-whitespace zloc.\n */\nzprint.zutil.znextnws = (function zprint$zutil$znextnws(zloc){\nif(cljs.core.truth_((rewrite_clj.zip.end_QMARK_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.end_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.end_QMARK_.call(null,zloc)))){\nreturn zloc;\n} else {\nvar temp__5733__auto__ = (zprint.zutil.next_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.next_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.next_STAR_.call(null,zloc));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar nloc = temp__5733__auto__;\nreturn (zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.next_STAR_,zprint.zutil.whitespace_QMARK_,nloc) : zprint.zutil.skip.call(null,zprint.zutil.next_STAR_,zprint.zutil.whitespace_QMARK_,nloc));\n} else {\nreturn null;\n}\n}\n});\n/**\n * Find the next non-whitespace zloc.\n */\nzprint.zutil.zprevnws = (function zprint$zutil$zprevnws(zloc){\nvar temp__5733__auto__ = (zprint.zutil.prev_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.prev_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.prev_STAR_.call(null,zloc));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar ploc = temp__5733__auto__;\nreturn (zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3 ? zprint.zutil.skip.cljs$core$IFn$_invoke$arity$3(zprint.zutil.prev_STAR_,zprint.zutil.whitespace_QMARK_,ploc) : zprint.zutil.skip.call(null,zprint.zutil.prev_STAR_,zprint.zutil.whitespace_QMARK_,ploc));\n} else {\nreturn null;\n}\n});\n/**\n * Find the nth non-whitespace zloc inside of this zloc.\n */\nzprint.zutil.znthnext = (function zprint$zutil$znthnext(zloc,n){\nvar nloc = (function (){var G__49116 = (zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.down_STAR_.call(null,zloc));\nreturn (zprint.zutil.skip_whitespace.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.skip_whitespace.cljs$core$IFn$_invoke$arity$1(G__49116) : zprint.zutil.skip_whitespace.call(null,G__49116));\n})();\nvar i = n;\nwhile(true){\nif((((nloc == null)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(0))))){\nreturn nloc;\n} else {\nvar G__49682 = zprint.zutil.zrightnws(nloc);\nvar G__49683 = (i - (1));\nnloc = G__49682;\ni = G__49683;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Find the locations (counting from zero, and only counting non-whitespace\n *   elements) of the first zthing?.  Return its index if it is found, nil if not.\n */\nzprint.zutil.zfind = (function zprint$zutil$zfind(zthing_QMARK_,zloc){\nvar nloc = (function (){var G__49119 = (zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.down_STAR_.call(null,zloc));\nreturn (zprint.zutil.skip_whitespace.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.skip_whitespace.cljs$core$IFn$_invoke$arity$1(G__49119) : zprint.zutil.skip_whitespace.call(null,G__49119));\n})();\nvar i = (0);\nwhile(true){\nif((!((nloc == null)))){\nif(cljs.core.truth_((zthing_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zthing_QMARK_.cljs$core$IFn$_invoke$arity$1(nloc) : zthing_QMARK_.call(null,nloc)))){\nreturn i;\n} else {\nvar G__49684 = zprint.zutil.zrightnws(nloc);\nvar G__49685 = (i + (1));\nnloc = G__49684;\ni = G__49685;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\n/**\n * Return a vector containing the return of applying a function to \n *   every non-whitespace zloc inside of zloc.\n */\nzprint.zutil.zmap_w_nl = (function zprint$zutil$zmap_w_nl(zfn,zloc){\nvar nloc = (zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.down_STAR_.call(null,zloc));\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(nloc)){\nreturn out;\n} else {\nvar G__49693 = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.right_STAR_.call(null,nloc));\nvar G__49694 = (function (){var temp__5733__auto__ = ((cljs.core.not((function (){var and__4120__auto__ = (zprint.zutil.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.whitespace_QMARK_.call(null,nloc));\nif(cljs.core.truth_(and__4120__auto__)){\nreturn (!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((rewrite_clj.zip.tag.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.tag.cljs$core$IFn$_invoke$arity$1(nloc) : rewrite_clj.zip.tag.call(null,nloc)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))));\n} else {\nreturn and__4120__auto__;\n}\n})()))?(zfn.cljs$core$IFn$_invoke$arity$1 ? zfn.cljs$core$IFn$_invoke$arity$1(nloc) : zfn.call(null,nloc)):null);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar result = temp__5733__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,result);\n} else {\nreturn out;\n}\n})();\nnloc = G__49693;\nout = G__49694;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Return a vector containing the return of applying a function to \n *   every non-whitespace zloc inside of zloc.\n */\nzprint.zutil.zmap = (function zprint$zutil$zmap(zfn,zloc){\nvar nloc = (zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.down_STAR_.call(null,zloc));\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(nloc)){\nreturn out;\n} else {\nvar G__49695 = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.right_STAR_.call(null,nloc));\nvar G__49696 = (function (){var temp__5733__auto__ = ((cljs.core.not((zprint.zutil.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.whitespace_QMARK_.call(null,nloc))))?(zfn.cljs$core$IFn$_invoke$arity$1 ? zfn.cljs$core$IFn$_invoke$arity$1(nloc) : zfn.call(null,nloc)):null);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar result = temp__5733__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,result);\n} else {\nreturn out;\n}\n})();\nnloc = G__49695;\nout = G__49696;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Return a vector containing the return of applying a function to \n *   every zloc inside of zloc.\n */\nzprint.zutil.zmap_all = (function zprint$zutil$zmap_all(zfn,zloc){\nvar nloc = (zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.down_STAR_.call(null,zloc));\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(nloc)){\nreturn out;\n} else {\nvar G__49697 = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.right_STAR_.call(null,nloc));\nvar G__49698 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,(zfn.cljs$core$IFn$_invoke$arity$1 ? zfn.cljs$core$IFn$_invoke$arity$1(nloc) : zfn.call(null,nloc)));\nnloc = G__49697;\nout = G__49698;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Apply a function to every non-whitespace zloc to right of zloc.\n */\nzprint.zutil.zmap_right = (function zprint$zutil$zmap_right(zfn,zloc){\nvar nloc = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.right_STAR_.call(null,zloc));\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(nloc)){\nreturn out;\n} else {\nvar G__49700 = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.right_STAR_.call(null,nloc));\nvar G__49701 = (cljs.core.truth_((zprint.zutil.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.whitespace_QMARK_.call(null,nloc)))?out:cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,(zfn.cljs$core$IFn$_invoke$arity$1 ? zfn.cljs$core$IFn$_invoke$arity$1(nloc) : zfn.call(null,nloc))));\nnloc = G__49700;\nout = G__49701;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Return a seq of all of the non-whitespace children of zloc.\n */\nzprint.zutil.zseqnws = (function zprint$zutil$zseqnws(zloc){\nreturn zprint.zutil.zmap(cljs.core.identity,zloc);\n});\n/**\n * Remove everything to the right of the current zloc. In other words,\n *   make the current zloc the rightmost.\n */\nzprint.zutil.zremove_right = (function zprint$zutil$zremove_right(zloc){\nvar nloc = zloc;\nwhile(true){\nif(cljs.core.truth_((zprint.zutil.rightmost_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.rightmost_QMARK_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.rightmost_QMARK_.call(null,nloc)))){\nreturn nloc;\n} else {\nvar G__49704 = (function (){var G__49129 = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.right_STAR_.call(null,nloc));\nreturn (zprint.zutil.zremove.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.zremove.cljs$core$IFn$_invoke$arity$1(G__49129) : zprint.zutil.zremove.call(null,G__49129));\n})();\nnloc = G__49704;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Considering the current zloc a collection, move down into it and\n *   take n non-whitespace elements, dropping the rest.  Then append the\n *   given element to the end, coercing it into a node/zloc.  Note, this \n *   is not quite implemented that way, as it uses replace.\n */\nzprint.zutil.ztake_append = (function zprint$zutil$ztake_append(n,zloc,end_struct){\nvar nloc = (zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.down_STAR_.call(null,zloc));\nvar index = (0);\nwhile(true){\nif((index >= n)){\nvar G__49131 = zprint.zutil.zremove_right((zprint.zutil.zreplace.cljs$core$IFn$_invoke$arity$2 ? zprint.zutil.zreplace.cljs$core$IFn$_invoke$arity$2(nloc,end_struct) : zprint.zutil.zreplace.call(null,nloc,end_struct)));\nreturn (zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1(G__49131) : zprint.zutil.up_STAR_.call(null,G__49131));\n} else {\nvar xloc = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.right_STAR_.call(null,nloc));\nvar G__49707 = xloc;\nvar G__49708 = (cljs.core.truth_((zprint.zutil.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1(xloc) : zprint.zutil.whitespace_QMARK_.call(null,xloc)))?index:(index + (1)));\nnloc = G__49707;\nindex = G__49708;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * How many non-whitespace children does zloc have?\n */\nzprint.zutil.zcount = (function zprint$zutil$zcount(zloc){\nreturn cljs.core.count(zprint.zutil.zseqnws(zloc));\n});\n/**\n * Create a vector with the root as well as another vector\n *   which contains the number of right moves after each down\n *   down to find a particular zloc.  The right moves include\n *   both whitespace and comments.\n */\nzprint.zutil.find_root_and_path = (function zprint$zutil$find_root_and_path(zloc){\nif(cljs.core.truth_(zloc)){\nvar nloc = zloc;\nvar left = (0);\nvar out = cljs.core.List.EMPTY;\nwhile(true){\nif(cljs.core.not((zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.left_STAR_.call(null,nloc)))){\nif(cljs.core.not((zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.up_STAR_.call(null,nloc)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nloc,out], null);\n} else {\nvar G__49709 = (zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.up_STAR_.call(null,nloc));\nvar G__49710 = (0);\nvar G__49711 = cljs.core.cons(left,out);\nnloc = G__49709;\nleft = G__49710;\nout = G__49711;\ncontinue;\n}\n} else {\nvar G__49712 = (zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.left_STAR_.call(null,nloc));\nvar G__49713 = (left + (1));\nvar G__49714 = out;\nnloc = G__49712;\nleft = G__49713;\nout = G__49714;\ncontinue;\n}\nbreak;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Create a vector with the root as well as another vector\n *   which contains the number of right moves after each down\n *   down to find a particular zloc.  The right moves are\n *   non-whitespace, but include comments.\n */\nzprint.zutil.find_root_and_path_nw = (function zprint$zutil$find_root_and_path_nw(zloc){\nif(cljs.core.truth_(zloc)){\nvar nloc = zloc;\nvar left = (0);\nvar out = cljs.core.List.EMPTY;\nwhile(true){\nif(cljs.core.not((zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.left_STAR_.call(null,nloc)))){\nif(cljs.core.not((zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.up_STAR_.call(null,nloc)))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nloc,out], null);\n} else {\nvar G__49716 = (zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.up_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.up_STAR_.call(null,nloc));\nvar G__49717 = (0);\nvar G__49718 = cljs.core.cons(left,out);\nnloc = G__49716;\nleft = G__49717;\nout = G__49718;\ncontinue;\n}\n} else {\nvar G__49720 = (zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.left_STAR_.call(null,nloc));\nvar G__49721 = (cljs.core.truth_((zprint.zutil.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.whitespace_QMARK_.call(null,nloc)))?left:(left + (1)));\nvar G__49722 = out;\nnloc = G__49720;\nleft = G__49721;\nout = G__49722;\ncontinue;\n}\nbreak;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Find the root from a zloc by doing lots of ups.\n */\nzprint.zutil.find_root = (function zprint$zutil$find_root(zloc){\nvar nloc = zloc;\nwhile(true){\nif(cljs.core.not((rewrite_clj.zip.up.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.up.cljs$core$IFn$_invoke$arity$1(nloc) : rewrite_clj.zip.up.call(null,nloc)))){\nreturn nloc;\n} else {\nvar G__49723 = (rewrite_clj.zip.up.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.up.cljs$core$IFn$_invoke$arity$1(nloc) : rewrite_clj.zip.up.call(null,nloc));\nnloc = G__49723;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Move one down and then right a certain number of steps.\n */\nzprint.zutil.move_down_and_right = (function zprint$zutil$move_down_and_right(zloc,right_count){\nvar nloc = (zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.down_STAR_.call(null,zloc));\nvar remaining_right = right_count;\nwhile(true){\nif((remaining_right === (0))){\nreturn nloc;\n} else {\nvar G__49730 = (zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.right_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.right_STAR_.call(null,nloc));\nvar G__49731 = (remaining_right - (1));\nnloc = G__49730;\nremaining_right = G__49731;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Follow the path vector from the root and return the zloc\n *   at this location.\n */\nzprint.zutil.follow_path = (function zprint$zutil$follow_path(path_vec,zloc){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.zutil.move_down_and_right,zloc,path_vec);\n});\n/**\n * Is this an anonymous fn?\n */\nzprint.zutil.zanonfn_QMARK_ = (function zprint$zutil$zanonfn_QMARK_(zloc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.tag.call(null,zloc)),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204));\n});\n/**\n * Return the last non-whitespace (but possibly comment) element inside\n *   of this zloc.\n */\nzprint.zutil.zlast = (function zprint$zutil$zlast(zloc){\nvar nloc = (zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.down_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.down_STAR_.call(null,zloc));\nif(cljs.core.truth_(nloc)){\nreturn zprint.zutil.zrightmost(nloc);\n} else {\nreturn null;\n}\n});\n/**\n * Returns true if this can be converted to an sexpr. Works around a bug\n *   where n/printable-only? returns false for n/tag :fn, but z/sexpr fails\n *   on something with n/tag :fn\n */\nzprint.zutil.zsexpr_QMARK_ = (function zprint$zutil$zsexpr_QMARK_(zloc){\nvar and__4120__auto__ = zloc;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),(zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.tag.call(null,zloc)))) && (cljs.core.not((function (){var G__49144 = (rewrite_clj.zip.node.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.node.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.node.call(null,zloc));\nreturn (rewrite_clj.node.printable_only_QMARK_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.printable_only_QMARK_.cljs$core$IFn$_invoke$arity$1(G__49144) : rewrite_clj.node.printable_only_QMARK_.call(null,G__49144));\n})())));\n} else {\nreturn and__4120__auto__;\n}\n});\n/**\n * Returns true if this is a keyword.\n */\nzprint.zutil.zkeyword_QMARK_ = (function zprint$zutil$zkeyword_QMARK_(zloc){\nvar and__4120__auto__ = zloc;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn clojure.string.starts_with_QMARK_((rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.string.call(null,zloc)),\":\");\n} else {\nreturn and__4120__auto__;\n}\n});\n/**\n * Returns true if this is a symbol.\n */\nzprint.zutil.zsymbol_QMARK_ = (function zprint$zutil$zsymbol_QMARK_(zloc){\nvar and__4120__auto__ = zloc;\nif(cljs.core.truth_(and__4120__auto__)){\nvar and__4120__auto____$1 = zprint.zutil.zsexpr_QMARK_(zloc);\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn ((zprint.zutil.sexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.sexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.sexpr.call(null,zloc)) instanceof cljs.core.Symbol);\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n});\n/**\n * Returns true if this is nil.\n */\nzprint.zutil.znil_QMARK_ = (function zprint$zutil$znil_QMARK_(zloc){\nvar and__4120__auto__ = zloc;\nif(cljs.core.truth_(and__4120__auto__)){\nvar and__4120__auto____$1 = zprint.zutil.zsexpr_QMARK_(zloc);\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn ((rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.sexpr.call(null,zloc)) == null);\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n});\n/**\n * Returns true if this is a reader-conditional with a symbol in \n *   the first position (could be :clj or :cljs, whatever).\n */\nzprint.zutil.zreader_cond_w_symbol_QMARK_ = (function zprint$zutil$zreader_cond_w_symbol_QMARK_(zloc){\nvar result = ((zprint.zutil.zreader_macro_QMARK_(zloc))?(function (){var element = (rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.down.call(null,zloc));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(element) : rewrite_clj.zip.string.call(null,element)),\"?\")){\nvar element__$1 = (function (){var G__49179 = (rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(element) : rewrite_clj.zip.right.call(null,element));\nreturn (rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1(G__49179) : rewrite_clj.zip.down.call(null,G__49179));\n})();\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(element__$1) : rewrite_clj.zip.string.call(null,element__$1)),\":clj\")) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(element__$1) : rewrite_clj.zip.string.call(null,element__$1)),\":cljs\")))){\nreturn zprint.zutil.zsymbol_QMARK_((rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(element__$1) : rewrite_clj.zip.right.call(null,element__$1)));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n})():null);\nreturn result;\n});\n/**\n * Returns true if this is a reader-conditional with a collection in \n *   the first position (could be :clj or :cljs, whatever).\n */\nzprint.zutil.zreader_cond_w_coll_QMARK_ = (function zprint$zutil$zreader_cond_w_coll_QMARK_(zloc){\nvar result = ((zprint.zutil.zreader_macro_QMARK_(zloc))?(function (){var element = (rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.down.call(null,zloc));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(element) : rewrite_clj.zip.string.call(null,element)),\"?\")){\nvar element__$1 = (function (){var G__49186 = (rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(element) : rewrite_clj.zip.right.call(null,element));\nreturn (rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1(G__49186) : rewrite_clj.zip.down.call(null,G__49186));\n})();\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(element__$1) : rewrite_clj.zip.string.call(null,element__$1)),\":clj\")) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(element__$1) : rewrite_clj.zip.string.call(null,element__$1)),\":cljs\")))){\nreturn zprint.zutil.z_coll_QMARK_((rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(element__$1) : rewrite_clj.zip.right.call(null,element__$1)));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n})():null);\nreturn result;\n});\n/**\n * Return a zloc that will turn into a string of three dots.\n */\nzprint.zutil.zdotdotdot = (function zprint$zutil$zdotdotdot(){\nvar G__49188 = rewrite_clj.parser.parse_string(\"...\");\nreturn (zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1(G__49188) : zprint.zutil.edn_STAR_.call(null,G__49188));\n});\n/**\n * Returns true if this is a keyword, string, or number, in other words,\n *   a constant.\n */\nzprint.zutil.zconstant_QMARK_ = (function zprint$zutil$zconstant_QMARK_(zloc){\nvar ztag = (rewrite_clj.zip.tag.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.tag.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.tag.call(null,zloc));\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ztag,new cljs.core.Keyword(null,\"unquote\",\"unquote\",1649741032))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ztag,new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ztag,new cljs.core.Keyword(null,\"syntax-quote\",\"syntax-quote\",-1233164847))))){\nvar G__49195 = zprint.zutil.zfirst(zloc);\nreturn (zprint.zutil.zconstant_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.zconstant_QMARK_.cljs$core$IFn$_invoke$arity$1(G__49195) : zprint.zutil.zconstant_QMARK_.call(null,G__49195));\n} else {\nvar and__4120__auto__ = cljs.core.not(zprint.zutil.z_coll_QMARK_(zloc));\nif(and__4120__auto__){\nvar or__4131__auto__ = zprint.zutil.zkeyword_QMARK_(zloc);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nif(cljs.core.truth_(zprint.zutil.zsexpr_QMARK_(zloc))){\nvar sexpr = (zprint.zutil.sexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.sexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.sexpr.call(null,zloc));\nreturn ((typeof sexpr === 'string') || (typeof sexpr === 'number') || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"true\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sexpr))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"false\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sexpr))));\n} else {\nreturn null;\n}\n}\n} else {\nreturn and__4120__auto__;\n}\n}\n});\n/**\n * If this is an inline comment, returns the amount of space that\n *   was between this and the previous element.  That means that if\n *   we go left, we get something other than whitespace before a\n *   newline.  Assumes zloc is a comment.\n */\nzprint.zutil.zinlinecomment_QMARK_ = (function zprint$zutil$zinlinecomment_QMARK_(zloc){\nvar nloc = (zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zutil.left_STAR_.call(null,zloc));\nvar spaces = (0);\nwhile(true){\nvar tnloc = (zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.tag.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.tag.call(null,nloc));\nif((tnloc == null)){\nreturn null;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tnloc,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))){\nreturn null;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tnloc,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))){\nreturn null;\n} else {\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tnloc,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483))){\nreturn spaces;\n} else {\nvar G__49762 = (zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.left_STAR_.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.left_STAR_.call(null,nloc));\nvar G__49763 = ((zprint.zutil.length.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.length.cljs$core$IFn$_invoke$arity$1(nloc) : zprint.zutil.length.call(null,nloc)) + spaces);\nnloc = G__49762;\nspaces = G__49763;\ncontinue;\n\n}\n}\n}\n}\nbreak;\n}\n});\n/**\n * Given a zloc zipper of a map, find the :doc element.\n */\nzprint.zutil.find_doc_in_map = (function zprint$zutil$find_doc_in_map(zloc){\nvar nloc = (rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.down.call(null,zloc));\nwhile(true){\nif(cljs.core.truth_(nloc)){\nif(cljs.core.truth_((function (){var and__4120__auto__ = zprint.zutil.zkeyword_QMARK_(nloc);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(nloc) : rewrite_clj.zip.string.call(null,nloc)),\":doc\");\n} else {\nreturn and__4120__auto__;\n}\n})())){\nif(typeof (function (){var G__49228 = (rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(nloc) : rewrite_clj.zip.right.call(null,nloc));\nreturn (zprint.zutil.sexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.sexpr.cljs$core$IFn$_invoke$arity$1(G__49228) : zprint.zutil.sexpr.call(null,G__49228));\n})() === 'string'){\nreturn (rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(nloc) : rewrite_clj.zip.right.call(null,nloc));\n} else {\nreturn null;\n}\n} else {\nvar G__49764 = (function (){var G__49229 = (rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(nloc) : rewrite_clj.zip.right.call(null,nloc));\nreturn (rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(G__49229) : rewrite_clj.zip.right.call(null,G__49229));\n})();\nnloc = G__49764;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\n/**\n * Find a docstring in a zipper of a function.\n */\nzprint.zutil.find_docstring = (function zprint$zutil$find_docstring(zloc){\nvar fn_name = (function (){var G__49246 = (rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.down.call(null,zloc));\nreturn (rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(G__49246) : rewrite_clj.zip.string.call(null,G__49246));\n})();\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_name,\"defn\")) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_name,\"defmacro\")))){\nvar docloc = (function (){var G__49247 = (function (){var G__49248 = (rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.down.call(null,zloc));\nreturn (rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(G__49248) : rewrite_clj.zip.right.call(null,G__49248));\n})();\nreturn (rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(G__49247) : rewrite_clj.zip.right.call(null,G__49247));\n})();\nif(typeof (zprint.zutil.sexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.sexpr.cljs$core$IFn$_invoke$arity$1(docloc) : zprint.zutil.sexpr.call(null,docloc)) === 'string'){\nreturn docloc;\n} else {\nreturn null;\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_name,\"def\")){\nvar maploc = (function (){var G__49249 = (function (){var G__49250 = (rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1(zloc) : rewrite_clj.zip.down.call(null,zloc));\nreturn (rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.right.cljs$core$IFn$_invoke$arity$1(G__49250) : rewrite_clj.zip.right.call(null,G__49250));\n})();\nreturn (rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.down.cljs$core$IFn$_invoke$arity$1(G__49249) : rewrite_clj.zip.down.call(null,G__49249));\n})();\nif(cljs.core.truth_((rewrite_clj.zip.map_QMARK_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.map_QMARK_.cljs$core$IFn$_invoke$arity$1(maploc) : rewrite_clj.zip.map_QMARK_.call(null,maploc)))){\nreturn zprint.zutil.find_doc_in_map(maploc);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n\n}\n}\n});\n/**\n * Given a zipper of a function definition, add the spec info to\n *   the docstring. Works for docstring with (def ...) functions, but\n *   the left-indent isn't optimal.  But to fix that, we'd have to do\n *   the zprinting here, where we know the indent of the existing\n *   docstring.\n */\nzprint.zutil.add_spec_to_docstring = (function zprint$zutil$add_spec_to_docstring(zloc,spec_str){\nvar temp__5733__auto__ = zprint.zutil.find_docstring(zloc);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar doc_zloc = temp__5733__auto__;\nvar new_doc_zloc = (function (){var G__49266 = doc_zloc;\nvar G__49267 = (function (){var G__49268 = (function (){var G__49269 = rewrite_clj.parser.parse_string([\"\\\"\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((zprint.zutil.sexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.sexpr.cljs$core$IFn$_invoke$arity$1(doc_zloc) : zprint.zutil.sexpr.call(null,doc_zloc))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(spec_str),\"\\\"\"].join(''));\nreturn (zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1(G__49269) : zprint.zutil.edn_STAR_.call(null,G__49269));\n})();\nreturn (rewrite_clj.zip.node.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.node.cljs$core$IFn$_invoke$arity$1(G__49268) : rewrite_clj.zip.node.call(null,G__49268));\n})();\nreturn (zprint.zutil.replace_STAR_.cljs$core$IFn$_invoke$arity$2 ? zprint.zutil.replace_STAR_.cljs$core$IFn$_invoke$arity$2(G__49266,G__49267) : zprint.zutil.replace_STAR_.call(null,G__49266,G__49267));\n})();\nvar G__49275 = (rewrite_clj.zip.root.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.root.cljs$core$IFn$_invoke$arity$1(new_doc_zloc) : rewrite_clj.zip.root.call(null,new_doc_zloc));\nreturn (zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1(G__49275) : zprint.zutil.edn_STAR_.call(null,G__49275));\n} else {\nreturn zloc;\n}\n});\n/**\n * Perform a lift-ns on a pair-seq that is returned from\n *   partition-2-all-nc, which is a seq of pairs of zlocs that may or\n *   may not have been sorted and which may or may not have had things\n *   removed from it and may or may not actually be pairs.  Could be\n *   single things, could be multiple things.  If contains multiple\n *   things, the first thing is the key, but if it is just a single\n *   thing, the first thing is *not* a key. So we only need to work\n *   on the first of each seq which has more than one element in it,\n *   and possibly replace it. This will only lift out a ns if all keys\n *   in seqs with more than one element have the same namespace. Returns\n *   the [namespace pair-seq] or nil.\n */\nzprint.zutil.zlift_ns = (function zprint$zutil$zlift_ns(p__49292,pair_seq,ns){\nvar map__49293 = p__49292;\nvar map__49293__$1 = (((((!((map__49293 == null))))?(((((map__49293.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__49293.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__49293):map__49293);\nvar map_options = map__49293__$1;\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49293__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nvar lift_ns_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49293__$1,new cljs.core.Keyword(null,\"lift-ns?\",\"lift-ns?\",2021372853));\nvar lift_ns_in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49293__$1,new cljs.core.Keyword(null,\"lift-ns-in-code?\",\"lift-ns-in-code?\",1444279377));\nvar unlift_ns_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49293__$1,new cljs.core.Keyword(null,\"unlift-ns?\",\"unlift-ns?\",1065087867));\nif(cljs.core.truth_((function (){var and__4120__auto__ = lift_ns_QMARK_;\nif(cljs.core.truth_(and__4120__auto__)){\nif(cljs.core.truth_(in_code_QMARK_)){\nreturn lift_ns_in_code_QMARK_;\n} else {\nreturn true;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\nif(cljs.core.truth_(ns)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns,pair_seq], null);\n} else {\nvar strip_ns = ((function (map__49293,map__49293__$1,map_options,in_code_QMARK_,lift_ns_QMARK_,lift_ns_in_code_QMARK_,unlift_ns_QMARK_){\nreturn (function (named){\nif((named instanceof cljs.core.Symbol)){\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null,cljs.core.name(named));\n} else {\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(null,cljs.core.name(named));\n}\n});})(map__49293,map__49293__$1,map_options,in_code_QMARK_,lift_ns_QMARK_,lift_ns_in_code_QMARK_,unlift_ns_QMARK_))\n;\nvar ns__$1 = null;\nvar pair_seq__$1 = pair_seq;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nvar vec__49316 = cljs.core.first(pair_seq__$1);\nvar seq__49317 = cljs.core.seq(vec__49316);\nvar first__49318 = cljs.core.first(seq__49317);\nvar seq__49317__$1 = cljs.core.next(seq__49317);\nvar k = first__49318;\nvar rest_of_pair = seq__49317__$1;\nvar pair = vec__49316;\nvar current_ns = (cljs.core.truth_((function (){var and__4120__auto__ = rest_of_pair;\nif(and__4120__auto__){\nvar and__4120__auto____$1 = (!(clojure.string.starts_with_QMARK_((rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(k) : rewrite_clj.zip.string.call(null,k)),\"::\")));\nif(and__4120__auto____$1){\nvar or__4131__auto__ = zprint.zutil.zkeyword_QMARK_(k);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn zprint.zutil.zsymbol_QMARK_(k);\n}\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())?cljs.core.namespace((rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1(k) : rewrite_clj.zip.sexpr.call(null,k))):null);\nif(cljs.core.not(k)){\nif(cljs.core.truth_(ns__$1)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\":\",ns__$1].join(''),out], null);\n} else {\nreturn null;\n}\n} else {\nif(cljs.core.truth_(current_ns)){\nif(cljs.core.truth_(ns__$1)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ns__$1,current_ns)){\nvar G__49768 = ns__$1;\nvar G__49769 = cljs.core.next(pair_seq__$1);\nvar G__49770 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,cljs.core.cons((function (){var G__49328 = (function (){var G__49329 = strip_ns((rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1(k) : rewrite_clj.zip.sexpr.call(null,k)));\nreturn (rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1(G__49329) : rewrite_clj.node.token_node.call(null,G__49329));\n})();\nreturn (zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1(G__49328) : zprint.zutil.edn_STAR_.call(null,G__49328));\n})(),rest_of_pair));\nns__$1 = G__49768;\npair_seq__$1 = G__49769;\nout = G__49770;\ncontinue;\n} else {\nreturn null;\n}\n} else {\nvar G__49772 = current_ns;\nvar G__49773 = cljs.core.next(pair_seq__$1);\nvar G__49774 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,cljs.core.cons((function (){var G__49331 = (function (){var G__49332 = strip_ns((rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1(k) : rewrite_clj.zip.sexpr.call(null,k)));\nreturn (rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1(G__49332) : rewrite_clj.node.token_node.call(null,G__49332));\n})();\nreturn (zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1(G__49331) : zprint.zutil.edn_STAR_.call(null,G__49331));\n})(),rest_of_pair));\nns__$1 = G__49772;\npair_seq__$1 = G__49773;\nout = G__49774;\ncontinue;\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(pair),(1))){\nvar G__49775 = ns__$1;\nvar G__49776 = cljs.core.next(pair_seq__$1);\nvar G__49777 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,pair);\nns__$1 = G__49775;\npair_seq__$1 = G__49776;\nout = G__49777;\ncontinue;\n} else {\nreturn null;\n}\n}\n}\nbreak;\n}\n}\n} else {\nif(cljs.core.truth_((function (){var and__4120__auto__ = ns;\nif(cljs.core.truth_(and__4120__auto__)){\nvar and__4120__auto____$1 = unlift_ns_QMARK_;\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn cljs.core.not(lift_ns_QMARK_);\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\nvar pair_seq__$1 = pair_seq;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nvar vec__49349 = cljs.core.first(pair_seq__$1);\nvar seq__49350 = cljs.core.seq(vec__49349);\nvar first__49351 = cljs.core.first(seq__49350);\nvar seq__49350__$1 = cljs.core.next(seq__49350);\nvar k = first__49351;\nvar rest_of_pair = seq__49350__$1;\nvar pair = vec__49349;\nvar current_ns = (cljs.core.truth_((function (){var and__4120__auto__ = rest_of_pair;\nif(and__4120__auto__){\nvar and__4120__auto____$1 = (!(clojure.string.starts_with_QMARK_((rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.string.cljs$core$IFn$_invoke$arity$1(k) : rewrite_clj.zip.string.call(null,k)),\"::\")));\nif(and__4120__auto____$1){\nvar or__4131__auto__ = zprint.zutil.zkeyword_QMARK_(k);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn zprint.zutil.zsymbol_QMARK_(k);\n}\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())?cljs.core.namespace((rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1(k) : rewrite_clj.zip.sexpr.call(null,k))):null);\nif(cljs.core.not(k)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,out], null);\n} else {\nif(cljs.core.truth_(current_ns)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns,pair_seq__$1], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(pair),(1))){\nvar G__49780 = cljs.core.next(pair_seq__$1);\nvar G__49781 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,pair);\npair_seq__$1 = G__49780;\nout = G__49781;\ncontinue;\n} else {\nvar G__49782 = cljs.core.next(pair_seq__$1);\nvar G__49783 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,cljs.core.cons((function (){var G__49359 = (function (){var G__49360 = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns),\"/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.zip.sexpr.cljs$core$IFn$_invoke$arity$1(k) : rewrite_clj.zip.sexpr.call(null,k)))].join(''));\nreturn (rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.token_node.cljs$core$IFn$_invoke$arity$1(G__49360) : rewrite_clj.node.token_node.call(null,G__49360));\n})();\nreturn (zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1 ? zprint.zutil.edn_STAR_.cljs$core$IFn$_invoke$arity$1(G__49359) : zprint.zutil.edn_STAR_.call(null,G__49359));\n})(),rest_of_pair));\npair_seq__$1 = G__49782;\nout = G__49783;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns,pair_seq], null);\n\n}\n}\n});\n/**\n * Redefine all of the traversal functions for zippers, then\n *   call the function of no arguments passed in.\n */\nzprint.zutil.zredef_call = (function zprint$zutil$zredef_call(body_fn){\nvar zstring_orig_val__49363 = zprint.zfns.zstring;\nvar znumstr_orig_val__49364 = zprint.zfns.znumstr;\nvar zbyte_array_QMARK__orig_val__49365 = zprint.zfns.zbyte_array_QMARK_;\nvar zcomment_QMARK__orig_val__49366 = zprint.zfns.zcomment_QMARK_;\nvar zsexpr_orig_val__49367 = zprint.zfns.zsexpr;\nvar zseqnws_orig_val__49368 = zprint.zfns.zseqnws;\nvar zmap_right_orig_val__49369 = zprint.zfns.zmap_right;\nvar zfocus_style_orig_val__49370 = zprint.zfns.zfocus_style;\nvar zfirst_orig_val__49371 = zprint.zfns.zfirst;\nvar zfirst_no_comment_orig_val__49372 = zprint.zfns.zfirst_no_comment;\nvar zsecond_orig_val__49373 = zprint.zfns.zsecond;\nvar zthird_orig_val__49374 = zprint.zfns.zthird;\nvar zfourth_orig_val__49375 = zprint.zfns.zfourth;\nvar znthnext_orig_val__49376 = zprint.zfns.znthnext;\nvar zcount_orig_val__49377 = zprint.zfns.zcount;\nvar zmap_orig_val__49378 = zprint.zfns.zmap;\nvar zmap_w_nl_orig_val__49379 = zprint.zfns.zmap_w_nl;\nvar zanonfn_QMARK__orig_val__49380 = zprint.zfns.zanonfn_QMARK_;\nvar zfn_obj_QMARK__orig_val__49381 = zprint.zfns.zfn_obj_QMARK_;\nvar zfocus_orig_val__49382 = zprint.zfns.zfocus;\nvar zfind_path_orig_val__49383 = zprint.zfns.zfind_path;\nvar zwhitespace_QMARK__orig_val__49384 = zprint.zfns.zwhitespace_QMARK_;\nvar zlist_QMARK__orig_val__49385 = zprint.zfns.zlist_QMARK_;\nvar zvector_QMARK__orig_val__49386 = zprint.zfns.zvector_QMARK_;\nvar zmap_QMARK__orig_val__49387 = zprint.zfns.zmap_QMARK_;\nvar znamespacedmap_QMARK__orig_val__49388 = zprint.zfns.znamespacedmap_QMARK_;\nvar zset_QMARK__orig_val__49389 = zprint.zfns.zset_QMARK_;\nvar zcoll_QMARK__orig_val__49390 = zprint.zfns.zcoll_QMARK_;\nvar zuneval_QMARK__orig_val__49391 = zprint.zfns.zuneval_QMARK_;\nvar zmeta_QMARK__orig_val__49392 = zprint.zfns.zmeta_QMARK_;\nvar ztag_orig_val__49393 = zprint.zfns.ztag;\nvar zlast_orig_val__49394 = zprint.zfns.zlast;\nvar zarray_QMARK__orig_val__49395 = zprint.zfns.zarray_QMARK_;\nvar zatom_QMARK__orig_val__49396 = zprint.zfns.zatom_QMARK_;\nvar zderef_orig_val__49397 = zprint.zfns.zderef;\nvar zrecord_QMARK__orig_val__49398 = zprint.zfns.zrecord_QMARK_;\nvar zns_QMARK__orig_val__49399 = zprint.zfns.zns_QMARK_;\nvar zobj_to_vec_orig_val__49400 = zprint.zfns.zobj_to_vec;\nvar zexpandarray_orig_val__49401 = zprint.zfns.zexpandarray;\nvar znewline_QMARK__orig_val__49402 = zprint.zfns.znewline_QMARK_;\nvar zwhitespaceorcomment_QMARK__orig_val__49403 = zprint.zfns.zwhitespaceorcomment_QMARK_;\nvar zmap_all_orig_val__49404 = zprint.zfns.zmap_all;\nvar zpromise_QMARK__orig_val__49405 = zprint.zfns.zpromise_QMARK_;\nvar zfuture_QMARK__orig_val__49406 = zprint.zfns.zfuture_QMARK_;\nvar zdelay_QMARK__orig_val__49407 = zprint.zfns.zdelay_QMARK_;\nvar zkeyword_QMARK__orig_val__49408 = zprint.zfns.zkeyword_QMARK_;\nvar zconstant_QMARK__orig_val__49409 = zprint.zfns.zconstant_QMARK_;\nvar zagent_QMARK__orig_val__49410 = zprint.zfns.zagent_QMARK_;\nvar zreader_macro_QMARK__orig_val__49411 = zprint.zfns.zreader_macro_QMARK_;\nvar zarray_to_shift_seq_orig_val__49412 = zprint.zfns.zarray_to_shift_seq;\nvar zdotdotdot_orig_val__49413 = zprint.zfns.zdotdotdot;\nvar zsymbol_QMARK__orig_val__49414 = zprint.zfns.zsymbol_QMARK_;\nvar znil_QMARK__orig_val__49415 = zprint.zfns.znil_QMARK_;\nvar zreader_cond_w_symbol_QMARK__orig_val__49416 = zprint.zfns.zreader_cond_w_symbol_QMARK_;\nvar zreader_cond_w_coll_QMARK__orig_val__49417 = zprint.zfns.zreader_cond_w_coll_QMARK_;\nvar zlift_ns_orig_val__49418 = zprint.zfns.zlift_ns;\nvar zinlinecomment_QMARK__orig_val__49419 = zprint.zfns.zinlinecomment_QMARK_;\nvar zfind_orig_val__49420 = zprint.zfns.zfind;\nvar ztake_append_orig_val__49421 = zprint.zfns.ztake_append;\nvar zstring_temp_val__49422 = rewrite_clj.zip.string;\nvar znumstr_temp_val__49423 = zprint.zutil.znumstr;\nvar zbyte_array_QMARK__temp_val__49424 = cljs.core.constantly(false);\nvar zcomment_QMARK__temp_val__49425 = zprint.zutil.zcomment_QMARK_;\nvar zsexpr_temp_val__49426 = zprint.zutil.sexpr;\nvar zseqnws_temp_val__49427 = zprint.zutil.zseqnws;\nvar zmap_right_temp_val__49428 = zprint.zutil.zmap_right;\nvar zfocus_style_temp_val__49429 = zprint.zutil.zfocus_style;\nvar zfirst_temp_val__49430 = zprint.zutil.zfirst;\nvar zfirst_no_comment_temp_val__49431 = zprint.zutil.zfirst_no_comment;\nvar zsecond_temp_val__49432 = zprint.zutil.zsecond;\nvar zthird_temp_val__49433 = zprint.zutil.zthird;\nvar zfourth_temp_val__49434 = zprint.zutil.zfourth;\nvar znthnext_temp_val__49435 = zprint.zutil.znthnext;\nvar zcount_temp_val__49436 = zprint.zutil.zcount;\nvar zmap_temp_val__49437 = zprint.zutil.zmap;\nvar zmap_w_nl_temp_val__49438 = zprint.zutil.zmap_w_nl;\nvar zanonfn_QMARK__temp_val__49439 = zprint.zutil.zanonfn_QMARK_;\nvar zfn_obj_QMARK__temp_val__49440 = cljs.core.constantly(false);\nvar zfocus_temp_val__49441 = zprint.zutil.zfocus;\nvar zfind_path_temp_val__49442 = zprint.zutil.find_root_and_path_nw;\nvar zwhitespace_QMARK__temp_val__49443 = zprint.zutil.whitespace_QMARK_;\nvar zlist_QMARK__temp_val__49444 = rewrite_clj.zip.list_QMARK_;\nvar zvector_QMARK__temp_val__49445 = rewrite_clj.zip.vector_QMARK_;\nvar zmap_QMARK__temp_val__49446 = rewrite_clj.zip.map_QMARK_;\nvar znamespacedmap_QMARK__temp_val__49447 = zprint.zutil.znamespacedmap_QMARK_;\nvar zset_QMARK__temp_val__49448 = rewrite_clj.zip.set_QMARK_;\nvar zcoll_QMARK__temp_val__49449 = zprint.zutil.z_coll_QMARK_;\nvar zuneval_QMARK__temp_val__49450 = zprint.zutil.zuneval_QMARK_;\nvar zmeta_QMARK__temp_val__49451 = zprint.zutil.zmeta_QMARK_;\nvar ztag_temp_val__49452 = zprint.zutil.ztag;\nvar zlast_temp_val__49453 = zprint.zutil.zlast;\nvar zarray_QMARK__temp_val__49454 = cljs.core.constantly(false);\nvar zatom_QMARK__temp_val__49455 = cljs.core.constantly(false);\nvar zderef_temp_val__49456 = cljs.core.constantly(false);\nvar zrecord_QMARK__temp_val__49457 = cljs.core.constantly(false);\nvar zns_QMARK__temp_val__49458 = cljs.core.constantly(false);\nvar zobj_to_vec_temp_val__49459 = cljs.core.constantly(null);\nvar zexpandarray_temp_val__49460 = cljs.core.constantly(null);\nvar znewline_QMARK__temp_val__49461 = zprint.zutil.znewline_QMARK_;\nvar zwhitespaceorcomment_QMARK__temp_val__49462 = zprint.zutil.whitespace_or_comment_QMARK_;\nvar zmap_all_temp_val__49463 = zprint.zutil.zmap_all;\nvar zpromise_QMARK__temp_val__49464 = cljs.core.constantly(false);\nvar zfuture_QMARK__temp_val__49465 = cljs.core.constantly(false);\nvar zdelay_QMARK__temp_val__49466 = cljs.core.constantly(false);\nvar zkeyword_QMARK__temp_val__49467 = zprint.zutil.zkeyword_QMARK_;\nvar zconstant_QMARK__temp_val__49468 = zprint.zutil.zconstant_QMARK_;\nvar zagent_QMARK__temp_val__49469 = cljs.core.constantly(false);\nvar zreader_macro_QMARK__temp_val__49470 = zprint.zutil.zreader_macro_QMARK_;\nvar zarray_to_shift_seq_temp_val__49471 = cljs.core.constantly(null);\nvar zdotdotdot_temp_val__49472 = zprint.zutil.zdotdotdot;\nvar zsymbol_QMARK__temp_val__49473 = zprint.zutil.zsymbol_QMARK_;\nvar znil_QMARK__temp_val__49474 = zprint.zutil.znil_QMARK_;\nvar zreader_cond_w_symbol_QMARK__temp_val__49475 = zprint.zutil.zreader_cond_w_symbol_QMARK_;\nvar zreader_cond_w_coll_QMARK__temp_val__49476 = zprint.zutil.zreader_cond_w_coll_QMARK_;\nvar zlift_ns_temp_val__49477 = zprint.zutil.zlift_ns;\nvar zinlinecomment_QMARK__temp_val__49478 = zprint.zutil.zinlinecomment_QMARK_;\nvar zfind_temp_val__49479 = zprint.zutil.zfind;\nvar ztake_append_temp_val__49480 = zprint.zutil.ztake_append;\nzprint.zfns.zstring = zstring_temp_val__49422;\n\nzprint.zfns.znumstr = znumstr_temp_val__49423;\n\nzprint.zfns.zbyte_array_QMARK_ = zbyte_array_QMARK__temp_val__49424;\n\nzprint.zfns.zcomment_QMARK_ = zcomment_QMARK__temp_val__49425;\n\nzprint.zfns.zsexpr = zsexpr_temp_val__49426;\n\nzprint.zfns.zseqnws = zseqnws_temp_val__49427;\n\nzprint.zfns.zmap_right = zmap_right_temp_val__49428;\n\nzprint.zfns.zfocus_style = zfocus_style_temp_val__49429;\n\nzprint.zfns.zfirst = zfirst_temp_val__49430;\n\nzprint.zfns.zfirst_no_comment = zfirst_no_comment_temp_val__49431;\n\nzprint.zfns.zsecond = zsecond_temp_val__49432;\n\nzprint.zfns.zthird = zthird_temp_val__49433;\n\nzprint.zfns.zfourth = zfourth_temp_val__49434;\n\nzprint.zfns.znthnext = znthnext_temp_val__49435;\n\nzprint.zfns.zcount = zcount_temp_val__49436;\n\nzprint.zfns.zmap = zmap_temp_val__49437;\n\nzprint.zfns.zmap_w_nl = zmap_w_nl_temp_val__49438;\n\nzprint.zfns.zanonfn_QMARK_ = zanonfn_QMARK__temp_val__49439;\n\nzprint.zfns.zfn_obj_QMARK_ = zfn_obj_QMARK__temp_val__49440;\n\nzprint.zfns.zfocus = zfocus_temp_val__49441;\n\nzprint.zfns.zfind_path = zfind_path_temp_val__49442;\n\nzprint.zfns.zwhitespace_QMARK_ = zwhitespace_QMARK__temp_val__49443;\n\nzprint.zfns.zlist_QMARK_ = zlist_QMARK__temp_val__49444;\n\nzprint.zfns.zvector_QMARK_ = zvector_QMARK__temp_val__49445;\n\nzprint.zfns.zmap_QMARK_ = zmap_QMARK__temp_val__49446;\n\nzprint.zfns.znamespacedmap_QMARK_ = znamespacedmap_QMARK__temp_val__49447;\n\nzprint.zfns.zset_QMARK_ = zset_QMARK__temp_val__49448;\n\nzprint.zfns.zcoll_QMARK_ = zcoll_QMARK__temp_val__49449;\n\nzprint.zfns.zuneval_QMARK_ = zuneval_QMARK__temp_val__49450;\n\nzprint.zfns.zmeta_QMARK_ = zmeta_QMARK__temp_val__49451;\n\nzprint.zfns.ztag = ztag_temp_val__49452;\n\nzprint.zfns.zlast = zlast_temp_val__49453;\n\nzprint.zfns.zarray_QMARK_ = zarray_QMARK__temp_val__49454;\n\nzprint.zfns.zatom_QMARK_ = zatom_QMARK__temp_val__49455;\n\nzprint.zfns.zderef = zderef_temp_val__49456;\n\nzprint.zfns.zrecord_QMARK_ = zrecord_QMARK__temp_val__49457;\n\nzprint.zfns.zns_QMARK_ = zns_QMARK__temp_val__49458;\n\nzprint.zfns.zobj_to_vec = zobj_to_vec_temp_val__49459;\n\nzprint.zfns.zexpandarray = zexpandarray_temp_val__49460;\n\nzprint.zfns.znewline_QMARK_ = znewline_QMARK__temp_val__49461;\n\nzprint.zfns.zwhitespaceorcomment_QMARK_ = zwhitespaceorcomment_QMARK__temp_val__49462;\n\nzprint.zfns.zmap_all = zmap_all_temp_val__49463;\n\nzprint.zfns.zpromise_QMARK_ = zpromise_QMARK__temp_val__49464;\n\nzprint.zfns.zfuture_QMARK_ = zfuture_QMARK__temp_val__49465;\n\nzprint.zfns.zdelay_QMARK_ = zdelay_QMARK__temp_val__49466;\n\nzprint.zfns.zkeyword_QMARK_ = zkeyword_QMARK__temp_val__49467;\n\nzprint.zfns.zconstant_QMARK_ = zconstant_QMARK__temp_val__49468;\n\nzprint.zfns.zagent_QMARK_ = zagent_QMARK__temp_val__49469;\n\nzprint.zfns.zreader_macro_QMARK_ = zreader_macro_QMARK__temp_val__49470;\n\nzprint.zfns.zarray_to_shift_seq = zarray_to_shift_seq_temp_val__49471;\n\nzprint.zfns.zdotdotdot = zdotdotdot_temp_val__49472;\n\nzprint.zfns.zsymbol_QMARK_ = zsymbol_QMARK__temp_val__49473;\n\nzprint.zfns.znil_QMARK_ = znil_QMARK__temp_val__49474;\n\nzprint.zfns.zreader_cond_w_symbol_QMARK_ = zreader_cond_w_symbol_QMARK__temp_val__49475;\n\nzprint.zfns.zreader_cond_w_coll_QMARK_ = zreader_cond_w_coll_QMARK__temp_val__49476;\n\nzprint.zfns.zlift_ns = zlift_ns_temp_val__49477;\n\nzprint.zfns.zinlinecomment_QMARK_ = zinlinecomment_QMARK__temp_val__49478;\n\nzprint.zfns.zfind = zfind_temp_val__49479;\n\nzprint.zfns.ztake_append = ztake_append_temp_val__49480;\n\ntry{return (body_fn.cljs$core$IFn$_invoke$arity$0 ? body_fn.cljs$core$IFn$_invoke$arity$0() : body_fn.call(null));\n}finally {zprint.zfns.ztake_append = ztake_append_orig_val__49421;\n\nzprint.zfns.zfind = zfind_orig_val__49420;\n\nzprint.zfns.zinlinecomment_QMARK_ = zinlinecomment_QMARK__orig_val__49419;\n\nzprint.zfns.zlift_ns = zlift_ns_orig_val__49418;\n\nzprint.zfns.zreader_cond_w_coll_QMARK_ = zreader_cond_w_coll_QMARK__orig_val__49417;\n\nzprint.zfns.zreader_cond_w_symbol_QMARK_ = zreader_cond_w_symbol_QMARK__orig_val__49416;\n\nzprint.zfns.znil_QMARK_ = znil_QMARK__orig_val__49415;\n\nzprint.zfns.zsymbol_QMARK_ = zsymbol_QMARK__orig_val__49414;\n\nzprint.zfns.zdotdotdot = zdotdotdot_orig_val__49413;\n\nzprint.zfns.zarray_to_shift_seq = zarray_to_shift_seq_orig_val__49412;\n\nzprint.zfns.zreader_macro_QMARK_ = zreader_macro_QMARK__orig_val__49411;\n\nzprint.zfns.zagent_QMARK_ = zagent_QMARK__orig_val__49410;\n\nzprint.zfns.zconstant_QMARK_ = zconstant_QMARK__orig_val__49409;\n\nzprint.zfns.zkeyword_QMARK_ = zkeyword_QMARK__orig_val__49408;\n\nzprint.zfns.zdelay_QMARK_ = zdelay_QMARK__orig_val__49407;\n\nzprint.zfns.zfuture_QMARK_ = zfuture_QMARK__orig_val__49406;\n\nzprint.zfns.zpromise_QMARK_ = zpromise_QMARK__orig_val__49405;\n\nzprint.zfns.zmap_all = zmap_all_orig_val__49404;\n\nzprint.zfns.zwhitespaceorcomment_QMARK_ = zwhitespaceorcomment_QMARK__orig_val__49403;\n\nzprint.zfns.znewline_QMARK_ = znewline_QMARK__orig_val__49402;\n\nzprint.zfns.zexpandarray = zexpandarray_orig_val__49401;\n\nzprint.zfns.zobj_to_vec = zobj_to_vec_orig_val__49400;\n\nzprint.zfns.zns_QMARK_ = zns_QMARK__orig_val__49399;\n\nzprint.zfns.zrecord_QMARK_ = zrecord_QMARK__orig_val__49398;\n\nzprint.zfns.zderef = zderef_orig_val__49397;\n\nzprint.zfns.zatom_QMARK_ = zatom_QMARK__orig_val__49396;\n\nzprint.zfns.zarray_QMARK_ = zarray_QMARK__orig_val__49395;\n\nzprint.zfns.zlast = zlast_orig_val__49394;\n\nzprint.zfns.ztag = ztag_orig_val__49393;\n\nzprint.zfns.zmeta_QMARK_ = zmeta_QMARK__orig_val__49392;\n\nzprint.zfns.zuneval_QMARK_ = zuneval_QMARK__orig_val__49391;\n\nzprint.zfns.zcoll_QMARK_ = zcoll_QMARK__orig_val__49390;\n\nzprint.zfns.zset_QMARK_ = zset_QMARK__orig_val__49389;\n\nzprint.zfns.znamespacedmap_QMARK_ = znamespacedmap_QMARK__orig_val__49388;\n\nzprint.zfns.zmap_QMARK_ = zmap_QMARK__orig_val__49387;\n\nzprint.zfns.zvector_QMARK_ = zvector_QMARK__orig_val__49386;\n\nzprint.zfns.zlist_QMARK_ = zlist_QMARK__orig_val__49385;\n\nzprint.zfns.zwhitespace_QMARK_ = zwhitespace_QMARK__orig_val__49384;\n\nzprint.zfns.zfind_path = zfind_path_orig_val__49383;\n\nzprint.zfns.zfocus = zfocus_orig_val__49382;\n\nzprint.zfns.zfn_obj_QMARK_ = zfn_obj_QMARK__orig_val__49381;\n\nzprint.zfns.zanonfn_QMARK_ = zanonfn_QMARK__orig_val__49380;\n\nzprint.zfns.zmap_w_nl = zmap_w_nl_orig_val__49379;\n\nzprint.zfns.zmap = zmap_orig_val__49378;\n\nzprint.zfns.zcount = zcount_orig_val__49377;\n\nzprint.zfns.znthnext = znthnext_orig_val__49376;\n\nzprint.zfns.zfourth = zfourth_orig_val__49375;\n\nzprint.zfns.zthird = zthird_orig_val__49374;\n\nzprint.zfns.zsecond = zsecond_orig_val__49373;\n\nzprint.zfns.zfirst_no_comment = zfirst_no_comment_orig_val__49372;\n\nzprint.zfns.zfirst = zfirst_orig_val__49371;\n\nzprint.zfns.zfocus_style = zfocus_style_orig_val__49370;\n\nzprint.zfns.zmap_right = zmap_right_orig_val__49369;\n\nzprint.zfns.zseqnws = zseqnws_orig_val__49368;\n\nzprint.zfns.zsexpr = zsexpr_orig_val__49367;\n\nzprint.zfns.zcomment_QMARK_ = zcomment_QMARK__orig_val__49366;\n\nzprint.zfns.zbyte_array_QMARK_ = zbyte_array_QMARK__orig_val__49365;\n\nzprint.zfns.znumstr = znumstr_orig_val__49364;\n\nzprint.zfns.zstring = zstring_orig_val__49363;\n}});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","zprint/zutil.cljc","~:line",1,"~:column",14,"~:end-line",1,"~:end-column",26,"~:no-doc",true],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$react-flip-move","~$module$node_modules$react_flip_move$dist$react_flip_move_cjs","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$zprint.zutil","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.parser","^V","~$zr","~$rewrite-clj.zip.removez","^X","^X","~$clojure.zip","^Y","~$p","^V","~$rewrite-clj.node","^Z","~$rewrite-clj.zip","^[","~$cljs.core","^10","~$goog","^11","~$zb","~$rewrite-clj.zip.base","~$zprint.zfns","^14","~$n","^Z","~$rewrite-clj.zip.whitespace","^15","~$rewrite-clj.zip.move","^16","~$zw","^15","~$zm","^16","~$rewrite-clj.zip.editz","^19","~$ze","^19","~$z","^[","~$clojure.string","^1;","^13","^13"],"~:seen",["^O",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^10","^10"],"~:form",["~#list",["~$ns","^Q",["^1A",["^1=","^1;","^14",["^V","~:as","~$p"],["^Z","^1C","~$n"],["^[","^1C","~$z"],["^13","^1C","^12"],["^15","^1C","^17"],["^16","^1C","^18"],["^X","^1C","^W"],["^19","^1C","^1:"],"^Y"]]]],"~:flags",["^ ","^1=",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^11","^10","^1;","^14","^V","^Z","^[","^13","^15","^16","^X","^19","^Y"]],"^S","^Q","~:resource-id",["~:shadow.build.classpath/resource","zprint/zutil.cljc"],"~:compiled-at",1566016974567,"~:resource-name","zprint/zutil.cljc","~:warnings",[],"~:source","(ns ^:no-doc zprint.zutil\n  (:require\n    #?@(:clj [[zprint.macros :refer [do-redef-vars]]])\n    clojure.string\n    zprint.zfns\n    #?@(:clj [[zprint.redef]])\n    [rewrite-clj.parser :as p]\n    [rewrite-clj.node :as n]\n    [rewrite-clj.zip :as z]\n    #?@(:cljs [[rewrite-clj.zip.base :as zb] [rewrite-clj.zip.whitespace :as zw]\n               [rewrite-clj.zip.move :as zm] [rewrite-clj.zip.removez :as zr]\n               [rewrite-clj.zip.editz :as ze] clojure.zip])))\n\n;;\n;; # Zipper oriented style printers\n;;\n\n;;\n;; Note that both rewrite-clj and rewrite-cljs use the following namespaces:\n;;\n;; rewrite-clj.parse\n;; rewrite-clj.node\n;; rewrite-clj.zip\n;;\n;; and have many common routines.  So it is fine to use z/<fn> as long as\n;; that <fn> shows up in both libraries.\n;;\n\n;;\n;; ## clj and cljs compatibility routines\n;;\n;; ### Routines missing in :cljs since it uses clojure.zip\n;; \n\n(def down*\n  #?(:clj z/down*\n     :cljs clojure.zip/down))\n\n(def up*\n  #?(:clj z/up*\n     :cljs clojure.zip/up))\n\n(def right*\n  #?(:clj z/right*\n     :cljs clojure.zip/right))\n\n(def left*\n  #?(:clj z/left*\n     :cljs clojure.zip/left))\n\n(def next*\n  #?(:clj z/next*\n     :cljs clojure.zip/next))\n\n(def prev*\n  #?(:clj z/prev*\n     :cljs clojure.zip/prev))\n\n(def replace*\n  #?(:clj z/replace*\n     :cljs clojure.zip/replace))\n\n\n;;\n;; ### Routines with different namespaces\n;;\n\n(def edn*\n  #?(:clj z/edn*\n     :cljs zb/edn*))\n\n(def sexpr\n  #?(:clj z/sexpr\n     :cljs zb/sexpr))\n\n(def string\n  #?(:clj z/string\n     :cljs zb/string))\n\n(def tag\n  #?(:clj z/tag\n     :cljs zb/tag))\n\n(def skip\n  #?(:clj z/skip\n     :cljs zw/skip))\n\n(def skip-whitespace\n  #?(:clj z/skip-whitespace\n     :cljs zw/skip-whitespace))\n\n(def whitespace?\n  #?(:clj z/whitespace?\n     :cljs zw/whitespace?))\n\n(def whitespace-or-comment?\n  #?(:clj z/whitespace-or-comment?\n     :cljs zw/whitespace-or-comment?))\n\n(def length\n  #?(:clj z/length\n     :cljs zb/length))\n\n(def rightmost?\n  #?(:clj z/rightmost?\n     :cljs zm/rightmost?))\n\n; conflicts with clojure.core:\n\n(def zremove\n  #?(:clj z/remove\n     :cljs zr/remove))\n\n(def zreplace\n  #?(:clj z/replace\n     :cljs ze/replace))\n\n;;\n;; Check to see if we are at the focus by checking the\n;; path.\n;;\n\n(declare find-root-and-path)\n\n(defn zfocus\n  \"Is the zipper zloc equivalent to the path floc.  In this\n  case, floc isn't a zipper, but was turned into a path early on.\"\n  [zloc floc]\n  (let [[_ zpath] (find-root-and-path zloc)] (= zpath floc)))\n\n(defn zfocus-style\n  \"Take the various inputs and come up with a style.\"\n  [style zloc floc]\n  (let [style (if (= style :f) style (if (zfocus zloc floc) :f :b))] style))\n\n(defn z-coll? \"Is the zloc a collection?\" [zloc] (z/seq? zloc))\n\n(defn zuneval? \"Is this a #_(...)\" [zloc] (= (tag zloc) :uneval))\n\n(defn zmeta? \"Is this a ^{...}\" [zloc] (= (tag zloc) :meta))\n\n(defn zquote?\n  \"Is this a '(...) or '[ ... ] or some other quote?\"\n  [zloc]\n  (= (tag zloc) :quote))\n\n(defn zreader-macro? \"Is this a @...\" [zloc] (= (tag zloc) :reader-macro))\n\n(defn ztag \"Return the tag for this zloc\" [zloc] (tag zloc))\n\n(defn znamespacedmap?\n  \"Is this a namespaced map?\"\n  [zloc]\n  (= (tag zloc) :namespaced-map))\n\n(defn zcomment?\n  \"Returns true if this is a comment.\"\n  [zloc]\n  (when zloc (= (tag zloc) :comment)))\n\n(defn znewline?\n  \"Returns true if this is a newline.\"\n  [zloc]\n  (when zloc (= (tag zloc) :newline)))\n\n(defn znumstr\n  \"Does z/string, but takes an additional argument for hex conversion.\n  Hex conversion is not implemented for zippers, though, because at present\n  it is only used for byte-arrays, which don't really show up here.\"\n  [zloc _ _]\n  (string zloc))\n\n(defn zfirst\n  \"Find the first non-whitespace zloc inside of this zloc, or\n  the first whitespace zloc that is the focus.\"\n  [zloc]\n  (let [nloc (down* zloc)] (if nloc (skip right* whitespace? nloc))))\n\n(defn zfirst-no-comment\n  \"Find the first non-whitespace and non-comment zloc inside of this zloc.\"\n  [zloc]\n  (let [nloc (down* zloc)] (if nloc (skip right* whitespace-or-comment? nloc))))\n\n(defn zsecond\n  \"Find the second non-whitespace zloc inside of this zloc.\"\n  [zloc]\n  (if-let [first-loc (zfirst zloc)]\n    (if-let [nloc (right* first-loc)] (skip right* whitespace? nloc))))\n\n(defn zthird\n  \"Find the third non-whitespace zloc inside of this zloc.\"\n  [zloc]\n  (some->> (zfirst zloc)\n           right*\n           (skip right* whitespace?)\n           right*\n           (skip right* whitespace?)))\n\n(defn zfourth\n  \"Find the fourth non-whitespace zloc inside of this zloc.\"\n  [zloc]\n  (some->> (zfirst zloc)\n           right*\n           (skip right* whitespace?)\n           right*\n           (skip right* whitespace?)\n           right*\n           (skip right* whitespace?)))\n\n(defn zrightnws\n  \"Find the next non-whitespace zloc inside of this zloc.\"\n  [zloc]\n  (if zloc (if-let [nloc (right* zloc)] (skip right* whitespace? nloc))))\n\n(defn zrightmost\n  \"Find the rightmost non-whitespace zloc at this level\"\n  [zloc]\n  (loop [nloc (zrightnws zloc)\n         ploc zloc]\n    (if-not nloc ploc (recur (zrightnws nloc) nloc))))\n\n(defn zleftnws\n  \"Find the next non-whitespace zloc inside of this zloc.\"\n  [zloc]\n  (if zloc (if-let [nloc (left* zloc)] (skip left* whitespace? nloc))))\n\n(defn zleftmost\n  \"Find the leftmost non-whitespace zloc at this level\"\n  [zloc]\n  (loop [nloc (zleftnws zloc)\n         ploc zloc]\n    (if-not nloc ploc (recur (zleftnws nloc) nloc))))\n\n(defn znextnws\n  \"Find the next non-whitespace zloc.\"\n  [zloc]\n  (if (z/end? zloc)\n    zloc\n    (if-let [nloc (next* zloc)] (skip next* whitespace? nloc))))\n\n(defn zprevnws\n  \"Find the next non-whitespace zloc.\"\n  [zloc]\n  (if-let [ploc (prev* zloc)] (skip prev* whitespace? ploc)))\n\n(defn znthnext\n  \"Find the nth non-whitespace zloc inside of this zloc.\"\n  [zloc n]\n  (loop [nloc (skip-whitespace (down* zloc))\n         i ^long n]\n    (if (or (nil? nloc) (= i 0)) nloc (recur (zrightnws nloc) (dec i)))))\n\n(defn zfind\n  \"Find the locations (counting from zero, and only counting non-whitespace\n  elements) of the first zthing?.  Return its index if it is found, nil if not.\"\n  [zthing? zloc]\n  (loop [nloc (skip-whitespace (down* zloc))\n         i 0]\n    (when (not (nil? nloc))\n      (if (zthing? nloc) i (recur (zrightnws nloc) (inc i))))))\n\n(defn zmap-w-nl\n  \"Return a vector containing the return of applying a function to \n  every non-whitespace zloc inside of zloc.\"\n  [zfn zloc]\n  (loop [nloc (down* zloc)\n         out []]\n    (if-not nloc\n      out\n      (recur (right* nloc)\n             (if-let [result (when (not (and (whitespace? nloc)\n                                             (not (= (z/tag nloc) :newline))))\n                               (zfn nloc))]\n               (conj out result)\n               out)))))\n\n(defn zmap\n  \"Return a vector containing the return of applying a function to \n  every non-whitespace zloc inside of zloc.\"\n  [zfn zloc]\n  (loop [nloc (down* zloc)\n         out []]\n    (if-not nloc\n      out\n      (recur (right* nloc)\n             (if-let [result (when (not (whitespace? nloc)) (zfn nloc))]\n               (conj out result)\n               out)))))\n\n(defn zmap-all\n  \"Return a vector containing the return of applying a function to \n  every zloc inside of zloc.\"\n  [zfn zloc]\n  (loop [nloc (down* zloc)\n         out []]\n    (if-not nloc out (recur (right* nloc) (conj out (zfn nloc))))))\n\n(defn zmap-right\n  \"Apply a function to every non-whitespace zloc to right of zloc.\"\n  [zfn zloc]\n  (loop [nloc (right* zloc)\n         out []]\n    (if-not nloc\n      out\n      (recur (right* nloc) (if (whitespace? nloc) out (conj out (zfn nloc)))))))\n\n(defn zseqnws\n  \"Return a seq of all of the non-whitespace children of zloc.\"\n  [zloc]\n  (zmap identity zloc))\n\n(defn zremove-right\n  \"Remove everything to the right of the current zloc. In other words,\n  make the current zloc the rightmost.\"\n  [zloc]\n  (loop [nloc zloc]\n    (if (rightmost? nloc) nloc (recur (zremove (right* nloc))))))\n\n(defn ztake-append\n  \"Considering the current zloc a collection, move down into it and\n  take n non-whitespace elements, dropping the rest.  Then append the\n  given element to the end, coercing it into a node/zloc.  Note, this \n  is not quite implemented that way, as it uses replace.\"\n  [n zloc end-struct]\n  (loop [nloc (down* zloc)\n         index 0]\n    (if (>= index n)\n      (up* (zremove-right (zreplace nloc end-struct)))\n      (let [xloc (right* nloc)]\n        (recur xloc (if (whitespace? xloc) index (inc index)))))))\n\n(defn zcount\n  \"How many non-whitespace children does zloc have?\"\n  [zloc]\n  (count (zseqnws zloc)))\n\n(defn find-root-and-path\n  \"Create a vector with the root as well as another vector\n  which contains the number of right moves after each down\n  down to find a particular zloc.  The right moves include\n  both whitespace and comments.\"\n  [zloc]\n  (if zloc\n    (loop [nloc zloc\n           left 0\n           out ()]\n      (if-not (left* nloc)\n        (if-not (up* nloc) [nloc out] (recur (up* nloc) 0 (cons left out)))\n        (recur (left* nloc) (inc left) out)))))\n\n(defn find-root-and-path-nw\n  \"Create a vector with the root as well as another vector\n  which contains the number of right moves after each down\n  down to find a particular zloc.  The right moves are\n  non-whitespace, but include comments.\"\n  [zloc]\n  (if zloc\n    (loop [nloc zloc\n           left 0\n           out ()]\n      (if-not (left* nloc)\n        (if-not (up* nloc) [nloc out] (recur (up* nloc) 0 (cons left out)))\n        (recur (left* nloc) (if (whitespace? nloc) left (inc left)) out)))))\n\n(defn find-root\n  \"Find the root from a zloc by doing lots of ups.\"\n  [zloc]\n  (loop [nloc zloc] (if-not (z/up nloc) nloc (recur (z/up nloc)))))\n\n(defn move-down-and-right\n  \"Move one down and then right a certain number of steps.\"\n  [zloc ^long right-count]\n  (loop [nloc (down* zloc)\n         remaining-right right-count]\n    (if (zero? remaining-right)\n      nloc\n      (recur (right* nloc) (dec remaining-right)))))\n\n(defn follow-path\n  \"Follow the path vector from the root and return the zloc\n  at this location.\"\n  [path-vec zloc]\n  (reduce move-down-and-right zloc path-vec))\n\n(defn zanonfn? \"Is this an anonymous fn?\" [zloc] (= (tag zloc) :fn))\n\n(defn zlast\n  \"Return the last non-whitespace (but possibly comment) element inside\n  of this zloc.\"\n  [zloc]\n  (let [nloc (down* zloc)] (when nloc (zrightmost nloc))))\n\n(defn zsexpr?\n  \"Returns true if this can be converted to an sexpr. Works around a bug\n  where n/printable-only? returns false for n/tag :fn, but z/sexpr fails\n  on something with n/tag :fn\"\n  [zloc]\n  (and zloc (not= :fn (tag zloc)) (not (n/printable-only? (z/node zloc)))))\n\n;\n; This doesn't work, because there are situations where (zsexpr? zloc)\n; will fail but it is still a keyword.\n;\n#_(defn zkeyword?-alt\n    \"Returns true if this is a keyword.\"\n    [zloc]\n    (and zloc (zsexpr? zloc) (keyword? (sexpr zloc))))\n\n(defn zkeyword?\n  \"Returns true if this is a keyword.\"\n  [zloc]\n  (and zloc (clojure.string/starts-with? (z/string zloc) \":\")))\n\n(defn zsymbol?\n  \"Returns true if this is a symbol.\"\n  [zloc]\n  (and zloc (zsexpr? zloc) (symbol? (sexpr zloc))))\n\n(defn znil?\n  \"Returns true if this is nil.\"\n  [zloc]\n  (and zloc (zsexpr? zloc) (nil? (z/sexpr zloc))))\n\n(defn zreader-cond-w-symbol?\n  \"Returns true if this is a reader-conditional with a symbol in \n  the first position (could be :clj or :cljs, whatever).\"\n  [zloc]\n  (let [result (when (zreader-macro? zloc)\n                 (let [element (z/down zloc)]\n                   (when (= (z/string element) \"?\")\n                     (let [element (z/down (z/right element))]\n                       (when (or (= (z/string element) \":clj\")\n                                 (= (z/string element) \":cljs\"))\n                         (zsymbol? (z/right element)))))))]\n    #_(println \"zreader-cond-w-symbol?:\" (z/string zloc) \"result:\" result)\n    result))\n\n(defn zreader-cond-w-coll?\n  \"Returns true if this is a reader-conditional with a collection in \n  the first position (could be :clj or :cljs, whatever).\"\n  [zloc]\n  (let [result (when (zreader-macro? zloc)\n                 (let [element (z/down zloc)]\n                   (when (= (z/string element) \"?\")\n                     (let [element (z/down (z/right element))]\n                       (when (or (= (z/string element) \":clj\")\n                                 (= (z/string element) \":cljs\"))\n                         (z-coll? (z/right element)))))))]\n    #_(println \"zreader-cond-w-coll?:\" (z/string zloc) \"result:\" result)\n    result))\n\n(defn zdotdotdot\n  \"Return a zloc that will turn into a string of three dots.\"\n  []\n  (edn* (p/parse-string \"...\")))\n\n(defn zconstant?\n  \"Returns true if this is a keyword, string, or number, in other words,\n  a constant.\"\n  [zloc]\n  #_(println \"zconstant?\" (z/string zloc))\n  (let [ztag (z/tag zloc)]\n    (if (or (= ztag :unquote) (= ztag :quote) (= ztag :syntax-quote))\n      (zconstant? (zfirst zloc))\n      (and (not (z-coll? zloc))\n           (or (zkeyword? zloc)\n               #_(println \"zconstant? - not keyword:\" (z/string zloc))\n               (when (zsexpr? zloc)\n                 #_(println \"zconstant?:\" (z/string zloc)\n                            \"\\n z-coll?\" (z-coll? zloc)\n                            \"z/tag:\" (z/tag zloc))\n                 (let [sexpr (sexpr zloc)]\n                   (or (string? sexpr)\n                       (number? sexpr)\n                       (= \"true\" (str sexpr))\n                       (= \"false\" (str sexpr))))))))))\n\n(defn zinlinecomment?\n  \"If this is an inline comment, returns the amount of space that\n  was between this and the previous element.  That means that if\n  we go left, we get something other than whitespace before a\n  newline.  Assumes zloc is a comment.\"\n  [zloc]\n  (loop [nloc (left* zloc)\n         spaces 0]\n    (let [tnloc (tag nloc)]\n      (cond (nil? tnloc) nil\n            (= tnloc :newline) nil\n            (= tnloc :comment) nil\n            (not= tnloc :whitespace) spaces\n            :else (recur (left* nloc) ^long (+ ^long (length nloc) spaces))))))\n\n;;\n;; # Integrate specs with doc-string\n;;\n;; Find find-docstring could be a lot smarter, and perhaps\n;; find the docstring in the meta data (so that, defn might\n;; work, for instance).\n\n(defn find-doc-in-map\n  \"Given a zloc zipper of a map, find the :doc element.\"\n  [zloc]\n  (loop [nloc (z/down zloc)]\n    (when nloc\n      (if (and (zkeyword? nloc) (= (z/string nloc) \":doc\"))\n        (when (string? (sexpr (z/right nloc))) (z/right nloc))\n        (recur (z/right (z/right nloc)))))))\n\n(defn find-docstring\n  \"Find a docstring in a zipper of a function.\"\n  [zloc]\n  (let [fn-name (z/string (z/down zloc))]\n    (cond (or (= fn-name \"defn\") (= fn-name \"defmacro\"))\n            (let [docloc (z/right (z/right (z/down zloc)))]\n              (when (string? (sexpr docloc)) docloc))\n          (= fn-name \"def\") (let [maploc (z/down (z/right (z/down zloc)))]\n                              (when (z/map? maploc) (find-doc-in-map maploc)))\n          :else nil)))\n\n(defn add-spec-to-docstring\n  \"Given a zipper of a function definition, add the spec info to\n  the docstring. Works for docstring with (def ...) functions, but\n  the left-indent isn't optimal.  But to fix that, we'd have to do\n  the zprinting here, where we know the indent of the existing\n  docstring.\"\n  [zloc spec-str]\n  #_(println \"spec-str:\" spec-str)\n  (if-let [doc-zloc (find-docstring zloc)]\n    (let [new-doc-zloc (replace* doc-zloc\n                                 (z/node (edn* (p/parse-string\n                                                 (str \"\\\"\"\n                                                      (str (sexpr doc-zloc))\n                                                      spec-str\n                                                      \"\\\"\")))))]\n      (edn* (z/root new-doc-zloc)))\n    zloc))\n\n(defn zlift-ns\n  \"Perform a lift-ns on a pair-seq that is returned from\n  partition-2-all-nc, which is a seq of pairs of zlocs that may or\n  may not have been sorted and which may or may not have had things\n  removed from it and may or may not actually be pairs.  Could be\n  single things, could be multiple things.  If contains multiple\n  things, the first thing is the key, but if it is just a single\n  thing, the first thing is *not* a key. So we only need to work\n  on the first of each seq which has more than one element in it,\n  and possibly replace it. This will only lift out a ns if all keys\n  in seqs with more than one element have the same namespace. Returns\n  the [namespace pair-seq] or nil.\"\n  [{:keys [in-code? lift-ns? lift-ns-in-code? unlift-ns?], :as map-options}\n   pair-seq ns]\n  #_(println \"zlift-ns: lift-ns?\" lift-ns?)\n  (cond\n    (and lift-ns? (if in-code? lift-ns-in-code? true))\n      (if ns\n        ; Already lifted, leave it alone\n        [ns pair-seq]\n        ; Needs a lift, if possible\n        (let [strip-ns (fn [named]\n                         (if (symbol? named)\n                           (symbol nil (name named))\n                           (keyword nil (name named))))]\n          (loop [ns nil\n                 pair-seq pair-seq\n                 out []]\n            (let [[k & rest-of-pair :as pair] (first pair-seq)\n                  #_(println \"k:\" k \"rest-of-x-pair:\" rest-of-pair)\n                  current-ns\n                    (when (and ; This is at least a pair\n                               rest-of-pair\n                               ; It does not include an implicit ns\n                               (not (clojure.string/starts-with? (z/string k)\n                                                                 \"::\"))\n                               (or (zkeyword? k) (zsymbol? k)))\n                      (namespace (z/sexpr k)))]\n              (if-not k\n                (when ns [(str \":\" ns) out])\n                (if current-ns\n                  (if ns\n                    (when (= ns current-ns)\n                      (recur ns\n                             (next pair-seq)\n                             (conj out\n                                   (cons (edn* (n/token-node (strip-ns (z/sexpr\n                                                                         k))))\n                                         rest-of-pair))))\n                    (recur current-ns\n                           (next pair-seq)\n                           (conj out\n                                 (cons (edn* (n/token-node (strip-ns (z/sexpr\n                                                                       k))))\n                                       rest-of-pair))))\n                  (when (= (count pair) 1)\n                    (recur ns (next pair-seq) (conj out pair)))))))))\n    (and ns unlift-ns? (not lift-ns?))\n      ; We have a namespace that was already lifted, and we want to unlift\n      ; it,\n      ; and we didn't ask to have things lifted.  That last is so that\n      ; lift-ns?\n      ; has to be false for unlift-ns? to work.\n      (loop [pair-seq pair-seq\n             out []]\n        (let [[k & rest-of-pair :as pair] (first pair-seq)\n              #_(println \"k:\" k \"rest-of-y-pair:\" rest-of-pair)\n              current-ns\n                (when (and ; This is at least a pair\n                           rest-of-pair\n                           ; It does not include an implicit ns\n                           (not (clojure.string/starts-with? (z/string k) \"::\"))\n                           (or (zkeyword? k) (zsymbol? k)))\n                  (namespace (z/sexpr k)))]\n          (if-not k\n            [nil out]\n            (cond current-ns [ns pair-seq]\n                  (= (count pair) 1) (recur (next pair-seq) (conj out pair))\n                  :else (recur (next pair-seq)\n                               (conj out\n                                     ; put ns with k\n                                     (cons (edn* (n/token-node\n                                                   (symbol\n                                                     (str ns \"/\" (z/sexpr k)))))\n                                           rest-of-pair)))))))\n    :else [ns pair-seq]))\n\n;!zprint {:vector {:respect-nl? true}}\n(defn zredef-call\n  \"Redefine all of the traversal functions for zippers, then\n  call the function of no arguments passed in.\"\n  [body-fn]\n  (#?@(:clj [do-redef-vars :zipper]\n       :cljs [with-redefs])\n   [zprint.zfns/zstring z/string\n    zprint.zfns/znumstr znumstr\n    zprint.zfns/zbyte-array? (constantly false)\n    zprint.zfns/zcomment? zcomment?\n    zprint.zfns/zsexpr sexpr\n    zprint.zfns/zseqnws zseqnws\n    zprint.zfns/zmap-right zmap-right\n    zprint.zfns/zfocus-style zfocus-style\n    zprint.zfns/zfirst zfirst\n    zprint.zfns/zfirst-no-comment zfirst-no-comment\n    zprint.zfns/zsecond zsecond\n    zprint.zfns/zthird zthird\n    zprint.zfns/zfourth zfourth\n    zprint.zfns/znthnext znthnext\n    zprint.zfns/zcount zcount\n    zprint.zfns/zmap zmap\n    zprint.zfns/zmap-w-nl zmap-w-nl\n    zprint.zfns/zanonfn? zanonfn?\n    zprint.zfns/zfn-obj? (constantly false)\n    zprint.zfns/zfocus zfocus\n    zprint.zfns/zfind-path find-root-and-path-nw\n    zprint.zfns/zwhitespace? whitespace?\n    zprint.zfns/zlist? z/list?\n    zprint.zfns/zvector? z/vector?\n    zprint.zfns/zmap? z/map?\n    zprint.zfns/znamespacedmap? znamespacedmap?\n    zprint.zfns/zset? z/set?\n    zprint.zfns/zcoll? z-coll?\n    zprint.zfns/zuneval? zuneval?\n    zprint.zfns/zmeta? zmeta?\n    zprint.zfns/ztag ztag\n    zprint.zfns/zlast zlast\n    zprint.zfns/zarray? (constantly false)\n    zprint.zfns/zatom? (constantly false)\n    zprint.zfns/zderef (constantly false)\n    zprint.zfns/zrecord? (constantly false)\n    zprint.zfns/zns? (constantly false)\n    zprint.zfns/zobj-to-vec (constantly nil)\n    zprint.zfns/zexpandarray (constantly nil)\n    zprint.zfns/znewline? znewline?\n    zprint.zfns/zwhitespaceorcomment? whitespace-or-comment?\n    zprint.zfns/zmap-all zmap-all\n    zprint.zfns/zpromise? (constantly false)\n    zprint.zfns/zfuture? (constantly false)\n    zprint.zfns/zdelay? (constantly false)\n    zprint.zfns/zkeyword? zkeyword?\n    zprint.zfns/zconstant? zconstant?\n    zprint.zfns/zagent? (constantly false)\n    zprint.zfns/zreader-macro? zreader-macro?\n    zprint.zfns/zarray-to-shift-seq (constantly nil)\n    zprint.zfns/zdotdotdot zdotdotdot\n    zprint.zfns/zsymbol? zsymbol?\n    zprint.zfns/znil? znil?\n    zprint.zfns/zreader-cond-w-symbol? zreader-cond-w-symbol?\n    zprint.zfns/zreader-cond-w-coll? zreader-cond-w-coll?\n    zprint.zfns/zlift-ns zlift-ns\n    zprint.zfns/zinlinecomment? zinlinecomment?\n    zprint.zfns/zfind zfind\n    zprint.zfns/ztake-append ztake-append]\n   (body-fn)))","~:reader-features",["^O",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;;;;;;;;;;;AAkCA,AAAKA,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAOX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAIX,AAAKC,AAEMC;AAEX,AAAKC,AAEMC;AAOX,AAAA,AAEA;;;;AAAA,AAAMC,AAGHC,AAAKC;AAHR,AAIE,AAAAC,AAAgB,AAACI,AAAAA,AAAAA,AAAmBN,AAAAA;AAApC,AAAAG,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAASG;AAAT,AAA2C,AAACE,AAAEF,AAAMJ;;AAEtD;;;AAAA,AAAMO,AAEHC,AAAMT,AAAKC;AAFd,AAGE,AAAMQ,AAAM,AAAI,AAAA,AAACF,AAAEE,AAAUA,AAAM,AAAA,AAAA,AAAI,AAACV,AAAOC,AAAKC;AAApD,AAAmEQ;;AAErE;;;AAAA,AAAMC,AAAqCV;AAA3C,AAAiD,AAACW,AAAAA,AAAAA,AAAOX,AAAAA;;AAEzD;;;AAAA,AAAMY,AAA8BZ;AAApC,AAA0C,AAAA,AAACO,AAAE,AAAC1B,AAAAA,AAAAA,AAAImB,AAAAA;;AAElD;;;AAAA,AAAMa,AAA2Bb;AAAjC,AAAuC,AAAA,AAACO,AAAE,AAAC1B,AAAAA,AAAAA,AAAImB,AAAAA;;AAE/C;;;AAAA,AAAMc,AAEHd;AAFH,AAGE,AAAA,AAACO,AAAE,AAAC1B,AAAAA,AAAAA,AAAImB,AAAAA;;AAEV;;;AAAA,AAAMe,AAAiCf;AAAvC,AAA6C,AAAA,AAACO,AAAE,AAAC1B,AAAAA,AAAAA,AAAImB,AAAAA;;AAErD;;;AAAA,AAAMgB,AAAqChB;AAA3C,AAAiD,AAACnB,AAAAA,AAAAA,AAAImB,AAAAA;;AAEtD;;;AAAA,AAAMiB,AAEHjB;AAFH,AAGE,AAAA,AAACO,AAAE,AAAC1B,AAAAA,AAAAA,AAAImB,AAAAA;;AAEV;;;AAAA,AAAMkB,AAEHlB;AAFH,AAGE,AAAMA;AAAN,AAAW,AAAA,AAACO,AAAE,AAAC1B,AAAAA,AAAAA,AAAImB,AAAAA;;AAAnB;;;AAEF;;;AAAA,AAAMmB,AAEHnB;AAFH,AAGE,AAAMA;AAAN,AAAW,AAAA,AAACO,AAAE,AAAC1B,AAAAA,AAAAA,AAAImB,AAAAA;;AAAnB;;;AAEF;;;;;AAAA,AAAMoB,AAIHpB,AAAKI,AAAEA;AAJV,AAKE,AAACzB,AAAAA,AAAAA,AAAOqB,AAAAA;;AAEV;;;;AAAA,AAAMqB,AAGHrB;AAHH,AAIE,AAAMsB,AAAK,AAAC7D,AAAAA,AAAAA,AAAMuC,AAAAA;AAAlB,AAAyB,AAAIsB;AAAK,AAACvC,AAAAA,AAAAA,AAAKlB,AAAAA,AAAOsB,AAAAA,AAAYmC,AAAAA;;AAAlC;;;AAE3B;;;AAAA,AAAMC,AAEHvB;AAFH,AAGE,AAAMsB,AAAK,AAAC7D,AAAAA,AAAAA,AAAMuC,AAAAA;AAAlB,AAAyB,AAAIsB;AAAK,AAACvC,AAAAA,AAAAA,AAAKlB,AAAAA,AAAOwB,AAAAA,AAAuBiC,AAAAA;;AAA7C;;;AAE3B;;;AAAA,AAAME,AAEHxB;AAFH,AAGE,AAAAyB,AAAmB,AAACJ,AAAOrB;AAA3B,AAAA,AAAAyB;AAAA,AAAAA,AAASC;AAAT,AACE,AAAAD,AAAc,AAAC5D,AAAAA,AAAAA,AAAO6D,AAAAA;AAAtB,AAAA,AAAAD;AAAA,AAAAA,AAASH;AAAT,AAAkC,AAACvC,AAAAA,AAAAA,AAAKlB,AAAAA,AAAOsB,AAAAA,AAAYmC,AAAAA;;AAA3D;;;AADF;;;AAGF;;;AAAA,AAAMK,AAEH3B;AAFH,AAGE,AAAA4B,AAAS,AAACP,AAAOrB;AAAjB4B,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAAA,AACS/D,AAAAA,AAAAA;AADT+D,AAAA,AAAA,AAAAA,AAAA,AAAA,AAES,AAAAA,AAAAA,AAAC7C,AAAAA,AAAAA,AAAKlB,AAAAA,AAAOsB,AAAAA;AAFtByC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAAA,AAGS/D,AAAAA,AAAAA;AAHT,AAAA,AAAA,AAAA+D,AAAA;AAAA;;AAIS,AAAAA,AAAAA,AAAC7C,AAAAA,AAAAA,AAAKlB,AAAAA,AAAOsB,AAAAA;;;AAExB;;;AAAA,AAAM0C,AAEH7B;AAFH,AAGE,AAAA8B,AAAS,AAACT,AAAOrB;AAAjB8B,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAAA,AACSjE,AAAAA,AAAAA;AADTiE,AAAA,AAAA,AAAAA,AAAA,AAAA,AAES,AAAAA,AAAAA,AAAC/C,AAAAA,AAAAA,AAAKlB,AAAAA,AAAOsB,AAAAA;AAFtB2C,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAAA,AAGSjE,AAAAA,AAAAA;AAHTiE,AAAA,AAAA,AAAAA,AAAA,AAAA,AAIS,AAAAA,AAAAA,AAAC/C,AAAAA,AAAAA,AAAKlB,AAAAA,AAAOsB,AAAAA;AAJtB2C,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAAA,AAKSjE,AAAAA,AAAAA;AALT,AAAA,AAAA,AAAAiE,AAAA;AAAA;;AAMS,AAAAA,AAAAA,AAAC/C,AAAAA,AAAAA,AAAKlB,AAAAA,AAAOsB,AAAAA;;;AAExB;;;AAAA,AAAM4C,AAEH/B;AAFH,AAGE,AAAIA;AAAK,AAAAyB,AAAc,AAAC5D,AAAAA,AAAAA,AAAOmC,AAAAA;AAAtB,AAAA,AAAAyB;AAAA,AAAAA,AAASH;AAAT,AAA6B,AAACvC,AAAAA,AAAAA,AAAKlB,AAAAA,AAAOsB,AAAAA,AAAYmC,AAAAA;;AAAtD;;;AAAT;;;AAEF;;;AAAA,AAAMU,AAEHhC;AAFH,AAGE,AAAOsB,AAAK,AAACS,AAAU/B;AAChBiC,AAAKjC;;AADZ,AAEE,AAAA,AAAAkC,AAAQZ;AAAKW;;AAAK,AAAO,AAACF,AAAUT;AAAMA;;;;;;;;AAE9C;;;AAAA,AAAMa,AAEHnC;AAFH,AAGE,AAAIA;AAAK,AAAAyB,AAAc,AAAC1D,AAAAA,AAAAA,AAAMiC,AAAAA;AAArB,AAAA,AAAAyB;AAAA,AAAAA,AAASH;AAAT,AAA4B,AAACvC,AAAAA,AAAAA,AAAKhB,AAAAA,AAAMoB,AAAAA,AAAYmC,AAAAA;;AAApD;;;AAAT;;;AAEF;;;AAAA,AAAMc,AAEHpC;AAFH,AAGE,AAAOsB,AAAK,AAACa,AAASnC;AACfiC,AAAKjC;;AADZ,AAEE,AAAA,AAAAkC,AAAQZ;AAAKW;;AAAK,AAAO,AAACE,AAASb;AAAMA;;;;;;;;AAE7C;;;AAAA,AAAMe,AAEHrC;AAFH,AAGE,AAAI,AAACsC,AAAAA,AAAAA,AAAOtC,AAAAA;AACVA;;AACA,AAAAyB,AAAc,AAACxD,AAAAA,AAAAA,AAAM+B,AAAAA;AAArB,AAAA,AAAAyB;AAAA,AAAAA,AAASH;AAAT,AAA4B,AAACvC,AAAAA,AAAAA,AAAKd,AAAAA,AAAMkB,AAAAA,AAAYmC,AAAAA;;AAApD;;;;AAEJ;;;AAAA,AAAMiB,AAEHvC;AAFH,AAGE,AAAAyB,AAAc,AAACtD,AAAAA,AAAAA,AAAM6B,AAAAA;AAArB,AAAA,AAAAyB;AAAA,AAAAA,AAASQ;AAAT,AAA4B,AAAClD,AAAAA,AAAAA,AAAKZ,AAAAA,AAAMgB,AAAAA,AAAY8C,AAAAA;;AAApD;;;AAEF;;;AAAA,AAAMO,AAEHxC,AAAKyC;AAFR,AAGE,AAAOnB,AAAK,AAAAoB,AAAiB,AAACjF,AAAAA,AAAAA,AAAMuC,AAAAA;AAAxB,AAAA,AAAA0C,AAAAA,AAACzD,AAAAA,AAAAA;;AACN0D,AAAQF;;AADf,AAEE,AAAI,AAAI,AAAA,AAAMnB,AAAM,AAAA,AAACf,AAAEoC;AAAMrB;;AAAK,AAAO,AAACS,AAAUT;AAAM,AAAA,AAAKqB;;;;;;;;AAEnE;;;;AAAA,AAAMC,AAGHC,AAAQ7C;AAHX,AAIE,AAAOsB,AAAK,AAAAwB,AAAiB,AAACrF,AAAAA,AAAAA,AAAMuC,AAAAA;AAAxB,AAAA,AAAA8C,AAAAA,AAAC7D,AAAAA,AAAAA;;AAAb,AACO0D;;AADP,AAEE,AAAM,AAAK,AAAA,AAAMrB;AAAjB,AACE,AAAI,AAACuB,AAAAA,AAAAA,AAAQvB,AAAAA;AAAMqB;;AAAE,AAAO,AAACZ,AAAUT;AAAM,AAAA,AAAKqB;;;;;;AADpD;;;;;AAGJ;;;;AAAA,AAAMI,AAGHC,AAAIhD;AAHP,AAIE,AAAOsB,AAAK,AAAC7D,AAAAA,AAAAA,AAAMuC,AAAAA;AAAnB,AACOiD;;AADP,AAEE,AAAA,AAAAf,AAAQZ;AACN2B;;AACA,AAAO,AAACpF,AAAAA,AAAAA,AAAOyD,AAAAA;AACR,AAAAG,AAAgB,AAAM,AAACS,AAAI,AAAAiB,AAAK,AAAChE,AAAAA,AAAAA,AAAYmC,AAAAA;AAAlB,AAAA,AAAA6B;AACK,AAAK,AAAA,AAAC5C,AAAE,AAAC6C,AAAAA,AAAAA,AAAM9B,AAAAA;;AADpB6B;;AAAX,AAAA,AAEE,AAACH,AAAAA,AAAAA,AAAI1B,AAAAA;AAFvB,AAAA,AAAAG;AAAA,AAAAA,AAASyB;AAAT,AAGE,AAACG,AAAKJ,AAAIC;;AACVD;;;;;;;;;;AAEf;;;;AAAA,AAAMK,AAGHN,AAAIhD;AAHP,AAIE,AAAOsB,AAAK,AAAC7D,AAAAA,AAAAA,AAAMuC,AAAAA;AAAnB,AACOiD;;AADP,AAEE,AAAA,AAAAf,AAAQZ;AACN2B;;AACA,AAAO,AAACpF,AAAAA,AAAAA,AAAOyD,AAAAA;AACR,AAAAG,AAAgB,AAAA,AAAA,AAAM,AAACS,AAAI,AAAC/C,AAAAA,AAAAA,AAAYmC,AAAAA,AAAO,AAAC0B,AAAAA,AAAAA,AAAI1B,AAAAA;AAApD,AAAA,AAAAG;AAAA,AAAAA,AAASyB;AAAT,AACE,AAACG,AAAKJ,AAAIC;;AACVD;;;;;;;;;;AAEf;;;;AAAA,AAAMM,AAGHP,AAAIhD;AAHP,AAIE,AAAOsB,AAAK,AAAC7D,AAAAA,AAAAA,AAAMuC,AAAAA;AAAnB,AACOiD;;AADP,AAEE,AAAA,AAAAf,AAAQZ;AAAK2B;;AAAI,AAAO,AAACpF,AAAAA,AAAAA,AAAOyD,AAAAA;AAAM,AAAC+B,AAAKJ,AAAI,AAACD,AAAAA,AAAAA,AAAI1B,AAAAA;;;;;;;;AAEzD;;;AAAA,AAAMkC,AAEHR,AAAIhD;AAFP,AAGE,AAAOsB,AAAK,AAACzD,AAAAA,AAAAA,AAAOmC,AAAAA;AAApB,AACOiD;;AADP,AAEE,AAAA,AAAAf,AAAQZ;AACN2B;;AACA,AAAO,AAACpF,AAAAA,AAAAA,AAAOyD,AAAAA;AAAM,AAAI,AAACnC,AAAAA,AAAAA,AAAYmC,AAAAA,AAAM2B,AAAI,AAACI,AAAKJ,AAAI,AAACD,AAAAA,AAAAA,AAAI1B,AAAAA;;;;;;;;AAErE;;;AAAA,AAAMmC,AAEHzD;AAFH,AAGE,AAACsD,AAAKI,AAAS1D;;AAEjB;;;;AAAA,AAAM2D,AAGH3D;AAHH,AAIE,AAAOsB,AAAKtB;;AAAZ,AACE,AAAI,AAACP,AAAAA,AAAAA,AAAW6B,AAAAA;AAAMA;;AAAK,AAAO,AAAAsC,AAAS,AAAC/F,AAAAA,AAAAA,AAAOyD,AAAAA;AAAjB,AAAA,AAAAsC,AAAAA,AAACjE,AAAAA,AAAAA;;;;;;;;AAEvC;;;;;;AAAA,AAAMkE,AAKHpB,AAAEzC,AAAK8D;AALV,AAME,AAAOxC,AAAK,AAAC7D,AAAAA,AAAAA,AAAMuC,AAAAA;AAAnB,AACO+D;;AADP,AAEE,AAAI,AAAIA,AAAMtB;AACZ,AAAAuB,AAAK,AAACL,AAAc,AAAC9D,AAAAA,AAAAA,AAASyB,AAAAA,AAAKwC,AAAAA;AAAnC,AAAA,AAAAE,AAAAA,AAACrG,AAAAA,AAAAA;;AACD,AAAMsG,AAAK,AAACpG,AAAAA,AAAAA,AAAOyD,AAAAA;AAAnB,AACE,AAAO2C;AAAK,AAAI,AAAC9E,AAAAA,AAAAA,AAAY8E,AAAAA,AAAMF,AAAM,AAAA,AAAKA;;;;;;;;AAEtD;;;AAAA,AAAMG,AAEHlE;AAFH,AAGE,AAACmE,AAAM,AAACV,AAAQzD;;AAElB;;;;;;AAAA,AAAMM,AAKHN;AALH,AAME,AAAIA;AACF,AAAOsB,AAAKtB;AAAZ,AACOoE;AADP,AAEOnB;;AAFP,AAGE,AAAA,AAAAf,AAAQ,AAACnE,AAAAA,AAAAA,AAAMuD,AAAAA;AACb,AAAA,AAAAY,AAAQ,AAACvE,AAAAA,AAAAA,AAAI2D,AAAAA;AAAb,AAAoBA,AAAK2B;;AAAK,AAAO,AAACtF,AAAAA,AAAAA,AAAI2D,AAAAA;AAAZ;AAAoB,AAAC+C,AAAKD,AAAKnB;;;;;;;AAC7D,AAAO,AAAClF,AAAAA,AAAAA,AAAMuD,AAAAA;AAAM,AAAA,AAAK8C;AAAMnB;;;;;;;;;AANrC;;;AAQF;;;;;;AAAA,AAAMqB,AAKHtE;AALH,AAME,AAAIA;AACF,AAAOsB,AAAKtB;AAAZ,AACOoE;AADP,AAEOnB;;AAFP,AAGE,AAAA,AAAAf,AAAQ,AAACnE,AAAAA,AAAAA,AAAMuD,AAAAA;AACb,AAAA,AAAAY,AAAQ,AAACvE,AAAAA,AAAAA,AAAI2D,AAAAA;AAAb,AAAoBA,AAAK2B;;AAAK,AAAO,AAACtF,AAAAA,AAAAA,AAAI2D,AAAAA;AAAZ;AAAoB,AAAC+C,AAAKD,AAAKnB;;;;;;;AAC7D,AAAO,AAAClF,AAAAA,AAAAA,AAAMuD,AAAAA;AAAM,AAAI,AAACnC,AAAAA,AAAAA,AAAYmC,AAAAA,AAAM8C,AAAK,AAAA,AAAKA;AAAOnB;;;;;;;;;AANlE;;;AAQF;;;AAAA,AAAMsB,AAEHvE;AAFH,AAGE,AAAOsB,AAAKtB;;AAAZ,AAAkB,AAAA,AAAAkC,AAAQ,AAACsC,AAAAA,AAAAA,AAAKlD,AAAAA;AAAMA;;AAAK,AAAO,AAACkD,AAAAA,AAAAA,AAAKlD,AAAAA;;;;;;;AAE1D;;;AAAA,AAAMmD,AAEHzE,AAAW0E;AAFd,AAGE,AAAOpD,AAAK,AAAC7D,AAAAA,AAAAA,AAAMuC,AAAAA;AACZ2E,AAAgBD;;AADvB,AAEE,AAAI,AAAA,AAAOC;AACTrD;;AACA,AAAO,AAACzD,AAAAA,AAAAA,AAAOyD,AAAAA;AAAM,AAAA,AAAKqD;;;;;;;;AAEhC;;;;AAAA,AAAMC,AAGHC,AAAS7E;AAHZ,AAIE,AAAC8E,AAAOL,AAAoBzE,AAAK6E;;AAEnC;;;AAAA,AAAME,AAAqC/E;AAA3C,AAAiD,AAAA,AAACO,AAAE,AAAC1B,AAAAA,AAAAA,AAAImB,AAAAA;;AAEzD;;;;AAAA,AAAMgF,AAGHhF;AAHH,AAIE,AAAMsB,AAAK,AAAC7D,AAAAA,AAAAA,AAAMuC,AAAAA;AAAlB,AAAyB,AAAMsB;AAAN,AAAW,AAACU,AAAWV;;AAAvB;;;AAE3B;;;;;AAAA,AAAM2D,AAIHjF;AAJH,AAKE,AAAAmD,AAAKnD;AAAL,AAAA,AAAAmD;AAAA,AAAU,AAAA,AAAC+B,AAAS,AAACrG,AAAAA,AAAAA,AAAImB,AAAAA,AAAO,AAACkC,AAAI,AAAAiD,AAAmB,AAACE,AAAAA,AAAAA,AAAOrF,AAAAA;AAA3B,AAAA,AAAAmF,AAAAA,AAACC,AAAAA,AAAAA;;;AAAtCjC;;;AAWF;;;AAAA,AAAMmC,AAEHtF;AAFH,AAGE,AAAAmD,AAAKnD;AAAL,AAAA,AAAAmD;AAAU,AAAA,AAACoC,AAA4B,AAACC,AAAAA,AAAAA,AAASxF,AAAAA;;AAAjDmD;;;AAEF;;;AAAA,AAAMsC,AAEHzF;AAFH,AAGE,AAAAmD,AAAKnD;AAAL,AAAA,AAAAmD;AAAA,AAAAA,AAAU,AAAC8B,AAAQjF;AAAnB,AAAA,AAAAmD;AAAyB,AAAAuC,AAAS,AAACjH,AAAAA,AAAAA,AAAMuB,AAAAA;;AAAzCmD;;;AAAAA;;;AAEF;;;AAAA,AAAMwC,AAEH3F;AAFH,AAGE,AAAAmD,AAAKnD;AAAL,AAAA,AAAAmD;AAAA,AAAAA,AAAU,AAAC8B,AAAQjF;AAAnB,AAAA,AAAAmD;AAAyB,AAAA,AAAM,AAACyC,AAAAA,AAAAA,AAAQ5F,AAAAA;;AAAxCmD;;;AAAAA;;;AAEF;;;;AAAA,AAAM0C,AAGH7F;AAHH,AAIE,AAAMkD,AAAO,AAAA,AAAM,AAACnC,AAAef,AACpB,AAAM8F,AAAQ,AAACC,AAAAA,AAAAA,AAAO/F,AAAAA;AAAtB,AACE,AAAM,AAAA,AAACO,AAAE,AAACiF,AAAAA,AAAAA,AAASM,AAAAA;AAAnB,AACE,AAAMA,AAAQ,AAAAE,AAAQ,AAACC,AAAAA,AAAAA,AAAQH,AAAAA;AAAjB,AAAA,AAAAE,AAAAA,AAACD,AAAAA,AAAAA;;AAAf,AACE,AAAM,AAAI,AAAA,AAACxF,AAAE,AAACiF,AAAAA,AAAAA,AAASM,AAAAA,AACb,AAAA,AAACvF,AAAE,AAACiF,AAAAA,AAAAA,AAASM,AAAAA;AADvB,AAEE,AAACL,AAAS,AAACQ,AAAAA,AAAAA,AAAQH,AAAAA;;AAFrB;;;AAFJ;;AAFJ;AAAb,AAQE5C;;AAEJ;;;;AAAA,AAAMgD,AAGHlG;AAHH,AAIE,AAAMkD,AAAO,AAAA,AAAM,AAACnC,AAAef,AACpB,AAAM8F,AAAQ,AAACC,AAAAA,AAAAA,AAAO/F,AAAAA;AAAtB,AACE,AAAM,AAAA,AAACO,AAAE,AAACiF,AAAAA,AAAAA,AAASM,AAAAA;AAAnB,AACE,AAAMA,AAAQ,AAAAK,AAAQ,AAACF,AAAAA,AAAAA,AAAQH,AAAAA;AAAjB,AAAA,AAAAK,AAAAA,AAACJ,AAAAA,AAAAA;;AAAf,AACE,AAAM,AAAI,AAAA,AAACxF,AAAE,AAACiF,AAAAA,AAAAA,AAASM,AAAAA,AACb,AAAA,AAACvF,AAAE,AAACiF,AAAAA,AAAAA,AAASM,AAAAA;AADvB,AAEE,AAACpF,AAAQ,AAACuF,AAAAA,AAAAA,AAAQH,AAAAA;;AAFpB;;;AAFJ;;AAFJ;AAAb,AAQE5C;;AAEJ;;;AAAA,AAAMkD;AAAN,AAGE,AAAAC,AAAM,AAAA,AAACC;AAAP,AAAA,AAAAD,AAAAA,AAAC9H,AAAAA,AAAAA;;AAEH;;;;AAAA,AAAMgI,AAGHvG;AAHH,AAKE,AAAMwG,AAAK,AAACpD,AAAAA,AAAAA,AAAMpD,AAAAA;AAAlB,AACE,AAAI,AAAI,AAAA,AAACO,AAAEiG,AAAe,AAAA,AAACjG,AAAEiG,AAAa,AAAA,AAACjG,AAAEiG;AAC3C,AAAAC,AAAY,AAACpF,AAAOrB;AAApB,AAAA,AAAAyG,AAAAA,AAACF,AAAAA,AAAAA;;AACD,AAAApD,AAAK,AAACjB,AAAI,AAACxB,AAAQV;AAAnB,AAAA,AAAAmD;AACK,AAAAuD,AAAI,AAACpB,AAAUtF;AAAf,AAAA,AAAA0G;AAAAA;;AAEI,AAAM,AAACzB,AAAQjF;AAAf,AAIE,AAAM2G,AAAM,AAAClI,AAAAA,AAAAA,AAAMuB,AAAAA;AAAnB,AACE,AAAI,AAAS2G,AACT,AAASA,AACT,AAAA,AAACpG,AAAS,AAAKoG,AACf,AAAA,AAACpG,AAAU,AAAKoG;;AARxB;;;;AAHTxD;;;;AAaN;;;;;;AAAA,AAAMyD,AAKH5G;AALH,AAME,AAAOsB,AAAK,AAACvD,AAAAA,AAAAA,AAAMiC,AAAAA;AAAnB,AACO6G;;AADP,AAEE,AAAMC,AAAM,AAACjI,AAAAA,AAAAA,AAAIyC,AAAAA;AAAjB,AACE,AAAM,AAAA,AAAMwF;AAAZ;;AAAA,AACM,AAAA,AAACvG,AAAEuG;AADT;;AAAA,AAEM,AAAA,AAACvG,AAAEuG;AAFT;;AAAA,AAGM,AAAA,AAAC5B,AAAK4B;AAAmBD;;AAH/B,AAIY,AAAO,AAAC9I,AAAAA,AAAAA,AAAMuD,AAAAA;AAAM,AAAS,AAAO/B,AAAAA,AAAAA,AAAO+B,AAAAA,AAAMuF;;;;;;;;;;;;AASnE;;;AAAA,AAAME,AAEH/G;AAFH,AAGE,AAAOsB,AAAK,AAACyE,AAAAA,AAAAA,AAAO/F,AAAAA;;AAApB,AACE,AAAMsB;AAAN,AACE,AAAI,AAAA6B,AAAK,AAACmC,AAAUhE;AAAhB,AAAA,AAAA6B;AAAsB,AAAA,AAAC5C,AAAE,AAACiF,AAAAA,AAAAA,AAASlE,AAAAA;;AAAnC6B;;;AACF,AAAM,AAAS,AAAA6D,AAAO,AAACf,AAAAA,AAAAA,AAAQ3E,AAAAA;AAAhB,AAAA,AAAA0F,AAAAA,AAACvI,AAAAA,AAAAA;;AAAhB,AAAuC,AAACwH,AAAAA,AAAAA,AAAQ3E,AAAAA;;AAAhD;;;AACA,AAAO,AAAA2F,AAAS,AAAChB,AAAAA,AAAAA,AAAQ3E,AAAAA;AAAlB,AAAA,AAAA2F,AAAAA,AAAChB,AAAAA,AAAAA;;;;;;AAHZ;;;;;AAKJ;;;AAAA,AAAMiB,AAEHlH;AAFH,AAGE,AAAMmH,AAAQ,AAAAC,AAAU,AAACrB,AAAAA,AAAAA,AAAO/F,AAAAA;AAAlB,AAAA,AAAAoH,AAAAA,AAAC5B,AAAAA,AAAAA;;AAAf,AACE,AAAM,AAAI,AAAA,AAACjF,AAAE4G,AAAgB,AAAA,AAAC5G,AAAE4G;AACxB,AAAME,AAAO,AAAAC,AAAS,AAAAC,AAAS,AAACxB,AAAAA,AAAAA,AAAO/F,AAAAA;AAAjB,AAAA,AAAAuH,AAAAA,AAACtB,AAAAA,AAAAA;;AAAV,AAAA,AAAAqB,AAAAA,AAACrB,AAAAA,AAAAA;;AAAd,AACE,AAAM,AAAS,AAACxH,AAAAA,AAAAA,AAAM4I,AAAAA;AAAtB,AAA+BA;;AAA/B;;;AAFV,AAGM,AAAA,AAAC9G,AAAE4G;AAAe,AAAMK,AAAO,AAAAC,AAAQ,AAAAC,AAAS,AAAC3B,AAAAA,AAAAA,AAAO/F,AAAAA;AAAjB,AAAA,AAAA0H,AAAAA,AAACzB,AAAAA,AAAAA;;AAAT,AAAA,AAAAwB,AAAAA,AAAC1B,AAAAA,AAAAA;;AAAd,AACE,AAAM,AAAC4B,AAAAA,AAAAA,AAAOH,AAAAA;AAAd,AAAsB,AAACT,AAAgBS;;AAAvC;;;AAJ1B,AAAA;;;;;AAOJ;;;;;;;AAAA,AAAMI,AAMH5H,AAAK6H;AANR,AAQE,AAAApG,AAAkB,AAACyF,AAAelH;AAAlC,AAAA,AAAAyB;AAAA,AAAAA,AAASqG;AAAT,AACE,AAAMC,AAAa,AAAAC,AAAUF;AAAVG,AACU,AAAAC,AAAQ,AAAAC,AAAM,AAAC7B,AACC,AAAA,AAAA,AACK,AAAK,AAAC7H,AAAAA,AAAAA,AAAMqJ,AAAAA,AACZD;AAHb,AAAA,AAAAM,AAAAA,AAAC5J,AAAAA,AAAAA;;AAAT,AAAA,AAAA2J,AAAAA,AAAC7C,AAAAA,AAAAA;;AADX,AAAA,AAAA2C,AAAAC,AAAAD,AAAAC,AAAC5J,AAAAA,AAAAA;;AAApB,AAME,AAAA+J,AAAM,AAACC,AAAAA,AAAAA,AAAON,AAAAA;AAAd,AAAA,AAAAK,AAAAA,AAAC7J,AAAAA,AAAAA;;AACHyB;;;AAEJ;;;;;;;;;;;;;AAAA,AAAAsI,AAAMM,AAaHM,AAASC;AAbZ,AAAA,AAAAZ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAY+DU;AAZ/D,AAAAN,AAAAJ,AAAA,AAYWM;AAZX,AAAAF,AAAAJ,AAAA,AAYoBO;AAZpB,AAAAH,AAAAJ,AAAA,AAY6BQ;AAZ7B,AAAAJ,AAAAJ,AAAA,AAY8CS;AAZ9C,AAeE,AACE,AAAA7F,AAAK2F;AAAL,AAAA,AAAA3F;AAAc,AAAI0F;AAASE;;AAAb;;;AAAd5F;;;AACE,AAAIgG;AAAJ,AAEGA,AAAGD;;AAEJ,AAAME,AAAS;AAAKC;AAAL,AACE,AAAI,AAAA3D,AAAS2D;AACX,AAAA,AAACC,AAAW,AAACC,AAAKF;;AAClB,AAAA,AAACG,AAAY,AAACD,AAAKF;;;;AAHtC,AAIE,AAAA,AAAOF;AACAD,AAASA;AADhB,AAEOjG;;AAFP,AAGE,AAAAwG,AAAkC,AAACI,AAAMX;AAAzCQ,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAAOG;AAAPL,AAAWM;AAAXP,AAA4BQ;AAEtBC,AACE,AAAM,AAAA/G,AACK6G;AADL,AAAA,AAAA7G;AAAA,AAAAA,AAGK,AAAK,AAAA,AAACoC,AAA4B,AAACC,AAAAA,AAAAA,AAASuE,AAAAA;AAHjD,AAAA,AAAA5G;AAKK,AAAAuD,AAAI,AAACpB,AAAUyE;AAAf,AAAA,AAAArD;AAAAA;;AAAkB,AAACjB,AAASsE;;;AALjC5G;;;AAAAA;;AAAN,AAAA,AAME,AAACgH,AAAU,AAACvE,AAAAA,AAAAA,AAAQmE,AAAAA;AAT9B,AAUE,AAAA,AAAA7H,AAAQ6H;AACN,AAAMZ;AAAN,AAAA,AAAU,AAAA,AAASA,AAAIlG;;AAAvB;;;AACA,AAAIiH;AACF,AAAIf;AACF,AAAM,AAAC5I,AAAE4I,AAAGe;AAAZ,AACE,AAAOf;AACA,AAACW,AAAKZ;AACN,AAAC7F,AAAKJ,AACA,AAACoB,AAAK,AAAA+F,AAAM,AAAAC,AAAc,AAACjB,AAAS,AAACxD,AAAAA,AAAAA,AACCmE,AAAAA;AAD1B,AAAA,AAAAM,AAAAA,AAACC,AAAAA,AAAAA;;AAAP,AAAA,AAAAF,AAAAA,AAAC7L,AAAAA,AAAAA;AAEDyL;;;;;;AANrB;;;AAOA,AAAOE;AACA,AAACJ,AAAKZ;AACN,AAAC7F,AAAKJ,AACA,AAACoB,AAAK,AAAAkG,AAAM,AAAAC,AAAc,AAACpB,AAAS,AAACxD,AAAAA,AAAAA,AACCmE,AAAAA;AAD1B,AAAA,AAAAS,AAAAA,AAACF,AAAAA,AAAAA;;AAAP,AAAA,AAAAC,AAAAA,AAAChM,AAAAA,AAAAA;AAEDyL;;;;;;;AACrB,AAAM,AAAA,AAACzJ,AAAE,AAAC4D,AAAM8F;AAAhB,AACE,AAAOd;AAAG,AAACW,AAAKZ;AAAU,AAAC7F,AAAKJ,AAAIgH;;;;;;AADtC;;;;;;;;AAxChB,AA0CE,AAAA9G,AAAKgG;AAAL,AAAA,AAAAhG;AAAA,AAAAA,AAAQ6F;AAAR,AAAA,AAAA7F;AAAmB,AAACjB,AAAI4G;;AAAxB3F;;;AAAAA;;;AAME,AAAO+F,AAASA;AAAhB,AACOjG;;AADP,AAEE,AAAAwH,AAAkC,AAACZ,AAAMX;AAAzCwB,AAAA,AAAAf,AAAAc;AAAAE,AAAA,AAAAd,AAAAa;AAAAA,AAAA,AAAAZ,AAAAY;AAAAC,AAAOZ;AAAPW,AAAWV;AAAXS,AAA4BR;AAEtBC,AACE,AAAM,AAAA/G,AACK6G;AADL,AAAA,AAAA7G;AAAA,AAAAA,AAGK,AAAK,AAAA,AAACoC,AAA4B,AAACC,AAAAA,AAAAA,AAASuE,AAAAA;AAHjD,AAAA,AAAA5G;AAIK,AAAAuD,AAAI,AAACpB,AAAUyE;AAAf,AAAA,AAAArD;AAAAA;;AAAkB,AAACjB,AAASsE;;;AAJjC5G;;;AAAAA;;AAAN,AAAA,AAKE,AAACgH,AAAU,AAACvE,AAAAA,AAAAA,AAAQmE,AAAAA;AAR9B,AASE,AAAA,AAAA7H,AAAQ6H;AAAR,AAAA,AACO9G;;AACL,AAAMiH;AAAN,AAAkBf,AAAGD;;AAArB,AACM,AAAA,AAAC3I,AAAE,AAAC4D,AAAM8F;AAAS,AAAO,AAACH,AAAKZ;AAAU,AAAC7F,AAAKJ,AAAIgH;;;;;AAD1D,AAEY,AAAO,AAACH,AAAKZ;AACN,AAAC7F,AAAKJ,AAEA,AAACoB,AAAK,AAAAuG,AAAM,AAAAC,AACE,AAACC,AACC,AAAA,AAAK3B,AAAO,AAACvD,AAAAA,AAAAA,AAAQmE,AAAAA;AAFzB,AAAA,AAAAc,AAAAA,AAACP,AAAAA,AAAAA;;AAAP,AAAA,AAAAM,AAAAA,AAACrM,AAAAA,AAAAA;AAGDyL;;;;;;;;;;;AArEzC,AAAA,AAsESb,AAAGD;;;;;AAGd;;;;AAAA,AAAM6B,AAGHC;AAHH,AAIE,AAAAC,AAEEsH;AAFFrH,AAGEsH;AAHFrH,AAIEsH;AAJFrH,AAKEuH;AALFtH,AAMEuH;AANFtH,AAOEuH;AAPFtH,AAQEuH;AARFtH,AASEuH;AATFtH,AAUEuH;AAVFtH,AAWEuH;AAXFtH,AAYEuH;AAZFtH,AAaEuH;AAbFtH,AAcEuH;AAdFtH,AAeEuH;AAfFtH,AAgBEuH;AAhBFtH,AAiBEuH;AAjBFtH,AAkBEuH;AAlBFtH,AAmBEuH;AAnBFtH,AAoBEuH;AApBFtH,AAqBEuH;AArBFtH,AAsBEuH;AAtBFtH,AAuBEuH;AAvBFtH,AAwBEuH;AAxBFtH,AAyBEwH;AAzBFvH,AA0BEyH;AA1BFxH,AA2BEyH;AA3BFxH,AA4BEyH;AA5BFxH,AA6BE0H;AA7BFzH,AA8BE0H;AA9BFzH,AA+BE0H;AA/BFzH,AAgCE0H;AAhCFzH,AAiCE0H;AAjCFzH,AAkCE0H;AAlCFzH,AAmCE0H;AAnCFzH,AAoCE0H;AApCFzH,AAqCE0H;AArCFzH,AAsCE0H;AAtCFzH,AAuCE0H;AAvCFzH,AAwCE0H;AAxCFzH,AAyCE0H;AAzCFzH,AA0CE0H;AA1CFzH,AA2CE0H;AA3CFzH,AA4CE0H;AA5CFzH,AA6CE0H;AA7CFzH,AA8CE0H;AA9CFzH,AA+CE0H;AA/CFzH,AAgDE0H;AAhDFzH,AAiDE0H;AAjDFzH,AAkDE0H;AAlDFzH,AAmDE0H;AAnDFzH,AAoDE0H;AApDFzH,AAqDE0H;AArDFzH,AAsDE0H;AAtDFzH,AAuDE0H;AAvDFzH,AAwDE0H;AAxDFzH,AAyDE0H;AAzDFzH,AA0DE0H;AA1DFzH,AA2DE0H;AA3DFzH,AA4DE0H;AA5DFzH,AAEsBpJ;AAFtBqJ,AAGsBzN;AAHtB0N,AAI2B,AAAA,AAAC4D;AAJ5B3D,AAKwB7N;AALxB8N,AAMqBvQ;AANrBwQ,AAOsBxL;AAPtByL,AAQyB1L;AARzB2L,AAS2B3O;AAT3B4O,AAUqB/N;AAVrBgO,AAWgC9N;AAXhC+N,AAYsB9N;AAZtB+N,AAaqB5N;AAbrB6N,AAcsB3N;AAdtB4N,AAeuBjN;AAfvBkN,AAgBqBxL;AAhBrByL,AAiBmBrM;AAjBnBsM,AAkBwB7M;AAlBxB8M,AAmBuB9K;AAnBvB+K,AAoBuB,AAAA,AAAC4C;AApBxB3C,AAqBqBhQ;AArBrBiQ,AAsByB1L;AAtBzB2L,AAuB2B9Q;AAvB3B+Q,AAwBqB6D;AAxBrB5D,AAyBuB8D;AAzBvB7D,AA0BoBzI;AA1BpB0I,AA2B8BpP;AA3B9BqP,AA4BoB+D;AA5BpB9D,AA6BqB7P;AA7BrB8P,AA8BuB5P;AA9BvB6P,AA+BqB5P;AA/BrB6P,AAgCmB1P;AAhCnB2P,AAiCoB3L;AAjCpB4L,AAkCsB,AAAA,AAAC8B;AAlCvB7B,AAmCqB,AAAA,AAAC6B;AAnCtB5B,AAoCqB,AAAA,AAAC4B;AApCtB3B,AAqCuB,AAAA,AAAC2B;AArCxB1B,AAsCmB,AAAA,AAAC0B;AAtCpBzB,AAuC0B,AAAA,AAACyB;AAvC3BxB,AAwC2B,AAAA,AAACwB;AAxC5BvB,AAyCwBhQ;AAzCxBiQ,AA0CoC/R;AA1CpCgS,AA2CuB9N;AA3CvB+N,AA4CwB,AAAA,AAACoB;AA5CzBnB,AA6CuB,AAAA,AAACmB;AA7CxBlB,AA8CsB,AAAA,AAACkB;AA9CvBjB,AA+CwBnM;AA/CxBoM,AAgDyBnL;AAhDzBoL,AAiDsB,AAAA,AAACe;AAjDvBd,AAkD6B7Q;AAlD7B8Q,AAmDkC,AAAA,AAACa;AAnDnCZ,AAoDyB1L;AApDzB2L,AAqDuBtM;AArDvBuM,AAsDoBrM;AAtDpBsM,AAuDqCpM;AAvDrCqM,AAwDmChM;AAxDnCiM,AAyDuBvJ;AAzDvBwJ,AA0D8BxL;AA1D9ByL,AA2DoBzP;AA3DpB0P,AA4D2BzO;AA5D3B,AAAA,AAAA+K,AAEE2D;;AAFF,AAAA1D,AAGE2D;;AAHF,AAAA1D,AAIE2D;;AAJF,AAAA1D,AAKE4D;;AALF,AAAA3D,AAME4D;;AANF,AAAA3D,AAOE4D;;AAPF,AAAA3D,AAQE4D;;AARF,AAAA3D,AASE4D;;AATF,AAAA3D,AAUE4D;;AAVF,AAAA3D,AAWE4D;;AAXF,AAAA3D,AAYE4D;;AAZF,AAAA3D,AAaE4D;;AAbF,AAAA3D,AAcE4D;;AAdF,AAAA3D,AAeE4D;;AAfF,AAAA3D,AAgBE4D;;AAhBF,AAAA3D,AAiBE4D;;AAjBF,AAAA3D,AAkBE4D;;AAlBF,AAAA3D,AAmBE4D;;AAnBF,AAAA3D,AAoBE4D;;AApBF,AAAA3D,AAqBE4D;;AArBF,AAAA3D,AAsBE4D;;AAtBF,AAAA3D,AAuBE4D;;AAvBF,AAAA3D,AAwBE4D;;AAxBF,AAAA3D,AAyBE6D;;AAzBF,AAAA5D,AA0BE8D;;AA1BF,AAAA7D,AA2BE8D;;AA3BF,AAAA7D,AA4BE8D;;AA5BF,AAAA7D,AA6BE+D;;AA7BF,AAAA9D,AA8BE+D;;AA9BF,AAAA9D,AA+BE+D;;AA/BF,AAAA9D,AAgCE+D;;AAhCF,AAAA9D,AAiCE+D;;AAjCF,AAAA9D,AAkCE+D;;AAlCF,AAAA9D,AAmCE+D;;AAnCF,AAAA9D,AAoCE+D;;AApCF,AAAA9D,AAqCE+D;;AArCF,AAAA9D,AAsCE+D;;AAtCF,AAAA9D,AAuCE+D;;AAvCF,AAAA9D,AAwCE+D;;AAxCF,AAAA9D,AAyCE+D;;AAzCF,AAAA9D,AA0CE+D;;AA1CF,AAAA9D,AA2CE+D;;AA3CF,AAAA9D,AA4CE+D;;AA5CF,AAAA9D,AA6CE+D;;AA7CF,AAAA9D,AA8CE+D;;AA9CF,AAAA9D,AA+CE+D;;AA/CF,AAAA9D,AAgDE+D;;AAhDF,AAAA9D,AAiDE+D;;AAjDF,AAAA9D,AAkDE+D;;AAlDF,AAAA9D,AAmDE+D;;AAnDF,AAAA9D,AAoDE+D;;AApDF,AAAA9D,AAqDE+D;;AArDF,AAAA9D,AAsDE+D;;AAtDF,AAAA9D,AAuDE+D;;AAvDF,AAAA9D,AAwDE+D;;AAxDF,AAAA9D,AAyDE+D;;AAzDF,AAAA9D,AA0DE+D;;AA1DF,AAAA9D,AA2DE+D;;AA3DF,AAAA9D,AA4DE+D;;AA5DF,AAAA,AA6DC,AAACrL,AAAAA,AAAAA;AA7DF,AAAA,AAAA2D,AA4DE0H;;AA5DF,AAAA3H,AA2DE0H;;AA3DF,AAAA3H,AA0DE0H;;AA1DF,AAAA3H,AAyDE0H;;AAzDF,AAAA3H,AAwDE0H;;AAxDF,AAAA3H,AAuDE0H;;AAvDF,AAAA3H,AAsDE0H;;AAtDF,AAAA3H,AAqDE0H;;AArDF,AAAA3H,AAoDE0H;;AApDF,AAAA3H,AAmDE0H;;AAnDF,AAAA3H,AAkDE0H;;AAlDF,AAAA3H,AAiDE0H;;AAjDF,AAAA3H,AAgDE0H;;AAhDF,AAAA3H,AA+CE0H;;AA/CF,AAAA3H,AA8CE0H;;AA9CF,AAAA3H,AA6CE0H;;AA7CF,AAAA3H,AA4CE0H;;AA5CF,AAAA3H,AA2CE0H;;AA3CF,AAAA3H,AA0CE0H;;AA1CF,AAAA3H,AAyCE0H;;AAzCF,AAAA3H,AAwCE0H;;AAxCF,AAAA3H,AAuCE0H;;AAvCF,AAAA3H,AAsCE0H;;AAtCF,AAAA3H,AAqCE0H;;AArCF,AAAA3H,AAoCE0H;;AApCF,AAAA3H,AAmCE0H;;AAnCF,AAAA3H,AAkCE0H;;AAlCF,AAAA3H,AAiCE0H;;AAjCF,AAAA3H,AAgCE0H;;AAhCF,AAAA3H,AA+BE0H;;AA/BF,AAAA3H,AA8BE0H;;AA9BF,AAAA3H,AA6BE0H;;AA7BF,AAAA3H,AA4BEyH;;AA5BF,AAAA1H,AA2BEyH;;AA3BF,AAAA1H,AA0BEyH;;AA1BF,AAAA1H,AAyBEwH;;AAzBF,AAAAzH,AAwBEuH;;AAxBF,AAAAxH,AAuBEuH;;AAvBF,AAAAxH,AAsBEuH;;AAtBF,AAAAxH,AAqBEuH;;AArBF,AAAAxH,AAoBEuH;;AApBF,AAAAxH,AAmBEuH;;AAnBF,AAAAxH,AAkBEuH;;AAlBF,AAAAxH,AAiBEuH;;AAjBF,AAAAxH,AAgBEuH;;AAhBF,AAAAxH,AAeEuH;;AAfF,AAAAxH,AAcEuH;;AAdF,AAAAxH,AAaEuH;;AAbF,AAAAxH,AAYEuH;;AAZF,AAAAxH,AAWEuH;;AAXF,AAAAxH,AAUEuH;;AAVF,AAAAxH,AASEuH;;AATF,AAAAxH,AAQEuH;;AARF,AAAAxH,AAOEuH;;AAPF,AAAAxH,AAMEuH;;AANF,AAAAxH,AAKEuH;;AALF,AAAAxH,AAIEsH;;AAJF,AAAAvH,AAGEsH;;AAHF,AAAAvH,AAEEsH","names",["zprint.zutil/down*","clojure.zip/down","zprint.zutil/up*","clojure.zip/up","zprint.zutil/right*","clojure.zip/right","zprint.zutil/left*","clojure.zip/left","zprint.zutil/next*","clojure.zip/next","zprint.zutil/prev*","clojure.zip/prev","zprint.zutil/replace*","clojure.zip/replace","zprint.zutil/edn*","rewrite-clj.zip.base/edn*","zprint.zutil/sexpr","rewrite-clj.zip.base/sexpr","zprint.zutil/string","rewrite-clj.zip.base/string","zprint.zutil/tag","rewrite-clj.zip.base/tag","zprint.zutil/skip","rewrite-clj.zip.whitespace/skip","zprint.zutil/skip-whitespace","rewrite-clj.zip.whitespace/skip-whitespace","zprint.zutil/whitespace?","rewrite-clj.zip.whitespace/whitespace?","zprint.zutil/whitespace-or-comment?","rewrite-clj.zip.whitespace/whitespace-or-comment?","zprint.zutil/length","rewrite-clj.zip.base/length","zprint.zutil/rightmost?","rewrite-clj.zip.move/rightmost?","zprint.zutil/zremove","rewrite-clj.zip.removez/remove","zprint.zutil/zreplace","rewrite-clj.zip.editz/replace","zprint.zutil/zfocus","zloc","floc","vec__49088","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","zpath","zprint.zutil/find-root-and-path","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","zprint.zutil/zfocus-style","style","zprint.zutil/z-coll?","rewrite-clj.zip/seq?","zprint.zutil/zuneval?","zprint.zutil/zmeta?","zprint.zutil/zquote?","zprint.zutil/zreader-macro?","zprint.zutil/ztag","zprint.zutil/znamespacedmap?","zprint.zutil/zcomment?","zprint.zutil/znewline?","zprint.zutil/znumstr","zprint.zutil/zfirst","nloc","zprint.zutil/zfirst-no-comment","zprint.zutil/zsecond","temp__5733__auto__","first-loc","zprint.zutil/zthird","G__49103","zprint.zutil/zfourth","G__49104","zprint.zutil/zrightnws","zprint.zutil/zrightmost","ploc","cljs.core/not","zprint.zutil/zleftnws","zprint.zutil/zleftmost","zprint.zutil/znextnws","rewrite-clj.zip/end?","zprint.zutil/zprevnws","zprint.zutil/znthnext","n","G__49116","i","zprint.zutil/zfind","zthing?","G__49119","zprint.zutil/zmap-w-nl","zfn","out","result","and__4120__auto__","rewrite-clj.zip/tag","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","zprint.zutil/zmap","zprint.zutil/zmap-all","zprint.zutil/zmap-right","zprint.zutil/zseqnws","cljs.core/identity","zprint.zutil/zremove-right","G__49129","zprint.zutil/ztake-append","end-struct","index","G__49131","xloc","zprint.zutil/zcount","cljs.core/count","left","cljs.core/cons","zprint.zutil/find-root-and-path-nw","zprint.zutil/find-root","rewrite-clj.zip/up","zprint.zutil/move-down-and-right","right-count","remaining-right","zprint.zutil/follow-path","path-vec","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","zprint.zutil/zanonfn?","zprint.zutil/zlast","zprint.zutil/zsexpr?","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__49144","rewrite-clj.node/printable-only?","rewrite-clj.zip/node","zprint.zutil/zkeyword?","clojure.string/starts-with?","rewrite-clj.zip/string","zprint.zutil/zsymbol?","cljs.core/Symbol","zprint.zutil/znil?","rewrite-clj.zip/sexpr","zprint.zutil/zreader-cond-w-symbol?","element","rewrite-clj.zip/down","G__49179","rewrite-clj.zip/right","zprint.zutil/zreader-cond-w-coll?","G__49186","zprint.zutil/zdotdotdot","G__49188","rewrite-clj.parser/parse-string","zprint.zutil/zconstant?","ztag","G__49195","or__4131__auto__","sexpr","zprint.zutil/zinlinecomment?","spaces","tnloc","zprint.zutil/find-doc-in-map","G__49228","G__49229","zprint.zutil/find-docstring","fn-name","G__49246","docloc","G__49247","G__49248","maploc","G__49249","G__49250","rewrite-clj.zip/map?","zprint.zutil/add-spec-to-docstring","spec-str","doc-zloc","new-doc-zloc","G__49266","G__49267","G__49268","G__49269","G__49275","rewrite-clj.zip/root","p__49292","map__49293","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","zprint.zutil/zlift-ns","in-code?","lift-ns?","lift-ns-in-code?","unlift-ns?","map-options","pair-seq","ns","strip-ns","named","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","vec__49316","seq__49317","cljs.core/seq","first__49318","cljs.core/first","cljs.core/next","k","rest-of-pair","pair","current-ns","cljs.core/namespace","G__49328","G__49329","rewrite-clj.node/token-node","G__49331","G__49332","vec__49349","seq__49350","first__49351","G__49359","G__49360","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","zprint.zutil/zredef-call","body-fn","zstring-orig-val__49363","znumstr-orig-val__49364","zbyte-array?-orig-val__49365","zcomment?-orig-val__49366","zsexpr-orig-val__49367","zseqnws-orig-val__49368","zmap-right-orig-val__49369","zfocus-style-orig-val__49370","zfirst-orig-val__49371","zfirst-no-comment-orig-val__49372","zsecond-orig-val__49373","zthird-orig-val__49374","zfourth-orig-val__49375","znthnext-orig-val__49376","zcount-orig-val__49377","zmap-orig-val__49378","zmap-w-nl-orig-val__49379","zanonfn?-orig-val__49380","zfn-obj?-orig-val__49381","zfocus-orig-val__49382","zfind-path-orig-val__49383","zwhitespace?-orig-val__49384","zlist?-orig-val__49385","zvector?-orig-val__49386","zmap?-orig-val__49387","znamespacedmap?-orig-val__49388","zset?-orig-val__49389","zcoll?-orig-val__49390","zuneval?-orig-val__49391","zmeta?-orig-val__49392","ztag-orig-val__49393","zlast-orig-val__49394","zarray?-orig-val__49395","zatom?-orig-val__49396","zderef-orig-val__49397","zrecord?-orig-val__49398","zns?-orig-val__49399","zobj-to-vec-orig-val__49400","zexpandarray-orig-val__49401","znewline?-orig-val__49402","zwhitespaceorcomment?-orig-val__49403","zmap-all-orig-val__49404","zpromise?-orig-val__49405","zfuture?-orig-val__49406","zdelay?-orig-val__49407","zkeyword?-orig-val__49408","zconstant?-orig-val__49409","zagent?-orig-val__49410","zreader-macro?-orig-val__49411","zarray-to-shift-seq-orig-val__49412","zdotdotdot-orig-val__49413","zsymbol?-orig-val__49414","znil?-orig-val__49415","zreader-cond-w-symbol?-orig-val__49416","zreader-cond-w-coll?-orig-val__49417","zlift-ns-orig-val__49418","zinlinecomment?-orig-val__49419","zfind-orig-val__49420","ztake-append-orig-val__49421","zstring-temp-val__49422","znumstr-temp-val__49423","zbyte-array?-temp-val__49424","zcomment?-temp-val__49425","zsexpr-temp-val__49426","zseqnws-temp-val__49427","zmap-right-temp-val__49428","zfocus-style-temp-val__49429","zfirst-temp-val__49430","zfirst-no-comment-temp-val__49431","zsecond-temp-val__49432","zthird-temp-val__49433","zfourth-temp-val__49434","znthnext-temp-val__49435","zcount-temp-val__49436","zmap-temp-val__49437","zmap-w-nl-temp-val__49438","zanonfn?-temp-val__49439","zfn-obj?-temp-val__49440","zfocus-temp-val__49441","zfind-path-temp-val__49442","zwhitespace?-temp-val__49443","zlist?-temp-val__49444","zvector?-temp-val__49445","zmap?-temp-val__49446","znamespacedmap?-temp-val__49447","zset?-temp-val__49448","zcoll?-temp-val__49449","zuneval?-temp-val__49450","zmeta?-temp-val__49451","ztag-temp-val__49452","zlast-temp-val__49453","zarray?-temp-val__49454","zatom?-temp-val__49455","zderef-temp-val__49456","zrecord?-temp-val__49457","zns?-temp-val__49458","zobj-to-vec-temp-val__49459","zexpandarray-temp-val__49460","znewline?-temp-val__49461","zwhitespaceorcomment?-temp-val__49462","zmap-all-temp-val__49463","zpromise?-temp-val__49464","zfuture?-temp-val__49465","zdelay?-temp-val__49466","zkeyword?-temp-val__49467","zconstant?-temp-val__49468","zagent?-temp-val__49469","zreader-macro?-temp-val__49470","zarray-to-shift-seq-temp-val__49471","zdotdotdot-temp-val__49472","zsymbol?-temp-val__49473","znil?-temp-val__49474","zreader-cond-w-symbol?-temp-val__49475","zreader-cond-w-coll?-temp-val__49476","zlift-ns-temp-val__49477","zinlinecomment?-temp-val__49478","zfind-temp-val__49479","ztake-append-temp-val__49480","zprint.zfns/zstring","zprint.zfns/znumstr","zprint.zfns/zbyte-array?","cljs.core/constantly","zprint.zfns/zcomment?","zprint.zfns/zsexpr","zprint.zfns/zseqnws","zprint.zfns/zmap-right","zprint.zfns/zfocus-style","zprint.zfns/zfirst","zprint.zfns/zfirst-no-comment","zprint.zfns/zsecond","zprint.zfns/zthird","zprint.zfns/zfourth","zprint.zfns/znthnext","zprint.zfns/zcount","zprint.zfns/zmap","zprint.zfns/zmap-w-nl","zprint.zfns/zanonfn?","zprint.zfns/zfn-obj?","zprint.zfns/zfocus","zprint.zfns/zfind-path","zprint.zfns/zwhitespace?","zprint.zfns/zlist?","rewrite-clj.zip/list?","zprint.zfns/zvector?","rewrite-clj.zip/vector?","zprint.zfns/zmap?","zprint.zfns/znamespacedmap?","zprint.zfns/zset?","rewrite-clj.zip/set?","zprint.zfns/zcoll?","zprint.zfns/zuneval?","zprint.zfns/zmeta?","zprint.zfns/ztag","zprint.zfns/zlast","zprint.zfns/zarray?","zprint.zfns/zatom?","zprint.zfns/zderef","zprint.zfns/zrecord?","zprint.zfns/zns?","zprint.zfns/zobj-to-vec","zprint.zfns/zexpandarray","zprint.zfns/znewline?","zprint.zfns/zwhitespaceorcomment?","zprint.zfns/zmap-all","zprint.zfns/zpromise?","zprint.zfns/zfuture?","zprint.zfns/zdelay?","zprint.zfns/zkeyword?","zprint.zfns/zconstant?","zprint.zfns/zagent?","zprint.zfns/zreader-macro?","zprint.zfns/zarray-to-shift-seq","zprint.zfns/zdotdotdot","zprint.zfns/zsymbol?","zprint.zfns/znil?","zprint.zfns/zreader-cond-w-symbol?","zprint.zfns/zreader-cond-w-coll?","zprint.zfns/zlift-ns","zprint.zfns/zinlinecomment?","zprint.zfns/zfind","zprint.zfns/ztake-append"]]],"~:cache-keys",["~#cmap",[["^1H","rewrite_clj/node/token.cljs"],[1541378006000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^O",[]],"~:deps-syms",["^11","^10","~$rewrite-clj.node.protocols"]]],["^1H","cljs/tools/reader/impl/utils.cljs"],[1532582253000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1;","~$goog.string"]]],["^1H","goog/math/math.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","~$goog.array","~$goog.asserts"]]],["^1H","rewrite_clj/parser/core.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^Z","~$rewrite-clj.reader","~$rewrite-clj.parser.keyword","~$rewrite-clj.parser.string","~$rewrite-clj.parser.token","~$rewrite-clj.parser.whitespace","~$cljs.tools.reader.reader-types"]]],["^1H","rewrite_clj/parser/string.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^Z","^21","^1Z"]]],["^1H","goog/array/array.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^20"]]],["^1H","rewrite_clj/zip/seqz.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^13","^19","~$rewrite-clj.zip.findz","~$rewrite-clj.zip.insert","^16","^Y"]]],["^1H","rewrite_clj/zip/move.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^15","^Y"]]],["^1H","goog/debug/error.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11"]]],["^1H","rewrite_clj/zip.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^13","^V","^16","^27","^19","^28","^X","~$rewrite-clj.zip.seqz","^Y"]]],["^1H","rewrite_clj/zip/editz.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^13","^16","^X","~$rewrite-clj.zip.utils","^15","^Z","^Y"]]],["^1H","goog/dom/nodetype.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11"]]],["^1H","cljs/tools/reader/impl/inspect.cljs"],[1532582253000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10"]]],["^1H","cljs/tools/reader.cljs"],[1532582253000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^26","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^1[","^1Z","~$goog.string.StringBuffer"]]],["^1H","rewrite_clj/node/forms.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y"]]],["^1H","rewrite_clj/zip/insert.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^13","^15","^Z","^Y"]]],["^1H","rewrite_clj/zip/utils.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^Y"]]],["^1H","goog/object/object.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11"]]],"~:SHADOW-TIMESTAMP",[1566006790000,1563067190000],["^1H","goog/math/long.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^20","~$goog.reflect"]]],["^1H","rewrite_clj/node/reader_macro.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y","~$rewrite-clj.node.whitespace"]]],["^1H","goog/string/internal.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11"]]],["^1H","goog/functions/functions.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11"]]],["^1H","rewrite_clj/zip/findz.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^13","^16","^Z","^15","^Y"]]],["^1H","clojure/walk.cljs"],[1563067190000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10"]]],["^1H","goog/structs/map.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1H","rewrite_clj/node/meta.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y","^2A"]]],["^1H","rewrite_clj/node/stringz.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y","~$cljs.tools.reader","^1;"]]],["^1H","rewrite_clj/node/comment.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y"]]],["^1H","rewrite_clj/node/keyword.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y"]]],["^1H","goog/asserts/asserts.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1H","zprint/zutil.cljc"],[1566006787000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1;","^14","^V","^Z","^[","^13","^15","^16","^X","^19","^Y"]]],["^1H","goog/uri/uri.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^1[","^20","^1Z","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1H","rewrite_clj/node/protocols.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1;"]]],["^1H","rewrite_clj/node/seq.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y"]]],["^1H","rewrite_clj/node/uneval.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y"]]],["^1H","goog/base.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",[]]],["^1H","goog/structs/structs.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^1[","~$goog.object"]]],["^1H","cljs/tools/reader/impl/errors.cljs"],[1532582253000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^26","^1;","~$cljs.tools.reader.impl.inspect"]]],["^1H","rewrite_clj/node/whitespace.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y"]]],["^1H","rewrite_clj/node/coercer.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^1Y","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^2A"]]],["^1H","clojure/string.cljs"],[1563067190000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Z","^2>"]]],["^1H","rewrite_clj/parser.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","~$rewrite-clj.parser.core","^Z","^21"]]],["^1H","rewrite_clj/parser/keyword.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^Z","^26","^21"]]],["^1H","zprint/zfns.cljc"],[1566006787000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10"]]],["^1H","rewrite_clj/parser/token.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^Z","^21","^1Z"]]],["^1H","goog/string/string.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","~$goog.string.internal"]]],["^1H","goog/reflect/reflect.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11"]]],["^1H","rewrite_clj/node/fn.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y","~$clojure.walk"]]],["^1H","rewrite_clj/node.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","~$rewrite-clj.node.coercer","^1Y","^2P","^2W","^2A","^2X","^2N","^2O","^2T","^2R","^2V","^2Q","^2S","^2U"]]],["^1H","rewrite_clj/zip/removez.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^16","^2:","^15","^Y"]]],["^1H","clojure/zip.cljs"],[1563067190000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10"]]],["^1H","goog/string/stringbuffer.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11"]]],["^1H","cljs/tools/reader/reader_types.cljs"],[1532582253000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^2;","^1Z","^2>"]]],["^1H","goog/iter/iter.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^1[","^20","~$goog.functions","~$goog.math"]]],["^1H","rewrite_clj/reader.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^2D","^26","^2<","^1Z","^1Y"]]],["^1H","rewrite_clj/node/quote.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^1Y"]]],["^1H","cljs/tools/reader/impl/commons.cljs"],[1532582253000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^2=","^26","^2;"]]],["^1H","cljs/core.cljs"],[1563067190000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["~$goog.math.Long","~$goog.math.Integer","^1Z","^2L","^1[","~$goog.Uri","^2>"]]],["^1H","goog/math/integer.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11"]]],["^1H","goog/uri/utils.js"],[1564811506000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^1[","^20","^1Z"]]],["^1H","rewrite_clj/zip/base.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^Z","^V","^15","^Y"]]],["^1H","rewrite_clj/zip/whitespace.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^Z","^Y"]]],["^1H","rewrite_clj/parser/whitespace.cljs"],[1541378006000,"^1U",["^ ","^1V",null,"^1W",["^O",[]],"^1X",["^11","^10","^Z","^21"]]]]],"~:clj-info",["^ ","jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/cljs/tools/reader/reader_types.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1531525495000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1541378006000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1532582253000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","zprint/zutil.cljc","^7",1,"^8",14,"^9",1,"^:",26,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",null,"^N",["^O",["~$next*"]],"^P","^Q","^T",null,"^U",["^ ","^V","^V","^W","^X","^X","^X","^Y","^Y","~$p","^V","^Z","^Z","^[","^[","^10","^10","^11","^11","^12","^13","^14","^14","~$n","^Z","^15","^15","^16","^16","^17","^15","^18","^16","^19","^19","^1:","^19","~$z","^[","^1;","^1;","^13","^13"],"^1<",["^O",["^1="]],"^1>",null,"~:defs",["^ ","~$tag",["^ ","^P","~$zprint.zutil/tag","^6","zprint/zutil.cljc","^7",80,"^8",1,"^9",80,"^:",9,"^5",["^ ","^6","zprint/zutil.cljc","^7",80,"^8",6,"^9",80,"^:",9]],"~$zreader-cond-w-symbol?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",424,"^8",7,"^9",424,"^:",29,"~:arglists",["^1A",["~$quote",["^1A",[["~$zloc"]]]]],"~:doc","Returns true if this is a reader-conditional with a symbol in \n  the first position (could be :clj or :cljs, whatever)."],"^P","~$zprint.zutil/zreader-cond-w-symbol?","^6","zprint/zutil.cljc","^:",29,"~:method-params",["^1A",[["^3Z"]]],"~:protocol-impl",null,"~:arglists-meta",["^1A",[null,null]],"^8",1,"~:variadic?",false,"^7",424,"~:ret-tag",["^O",[null,"~$boolean","~$clj-nil"]],"^9",424,"~:max-fixed-arity",1,"~:fn-var",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a reader-conditional with a symbol in \n  the first position (could be :clj or :cljs, whatever)."],"~$z-coll?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",136,"^8",7,"^9",136,"^:",14,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is the zloc a collection?"],"^P","~$zprint.zutil/z-coll?","^6","zprint/zutil.cljc","^:",14,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",136,"^45","~$any","^9",136,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is the zloc a collection?"],"~$zleftmost",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",227,"^8",7,"^9",227,"^:",16,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the leftmost non-whitespace zloc at this level"],"^P","~$zprint.zutil/zleftmost","^6","zprint/zutil.cljc","^:",16,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",227,"^45","^4<","^9",227,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the leftmost non-whitespace zloc at this level"],"~$whitespace?",["^ ","^P","~$zprint.zutil/whitespace?","^6","zprint/zutil.cljc","^7",92,"^8",1,"^9",92,"^:",17,"^5",["^ ","^6","zprint/zutil.cljc","^7",92,"^8",6,"^9",92,"^:",17]],"~$zremove-right",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",312,"^8",7,"^9",312,"^:",20,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Remove everything to the right of the current zloc. In other words,\n  make the current zloc the rightmost."],"^P","~$zprint.zutil/zremove-right","^6","zprint/zutil.cljc","^:",20,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",312,"^9",312,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Remove everything to the right of the current zloc. In other words,\n  make the current zloc the rightmost."],"~$zcomment?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",156,"^8",7,"^9",156,"^:",16,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a comment."],"^P","~$zprint.zutil/zcomment?","^6","zprint/zutil.cljc","^:",16,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",156,"^45",["^O",["^46","^47"]],"^9",156,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a comment."],"~$znamespacedmap?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",151,"^8",7,"^9",151,"^:",22,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this a namespaced map?"],"^P","~$zprint.zutil/znamespacedmap?","^6","zprint/zutil.cljc","^:",22,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",151,"^45","^46","^9",151,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this a namespaced map?"],"~$zanonfn?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",385,"^8",7,"^9",385,"^:",15,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this an anonymous fn?"],"^P","~$zprint.zutil/zanonfn?","^6","zprint/zutil.cljc","^:",15,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",385,"^45","^46","^9",385,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this an anonymous fn?"],"~$zfirst-no-comment",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",179,"^8",7,"^9",179,"^:",24,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the first non-whitespace and non-comment zloc inside of this zloc."],"^P","~$zprint.zutil/zfirst-no-comment","^6","zprint/zutil.cljc","^:",24,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",179,"^45",["^O",["^4<","^47"]],"^9",179,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the first non-whitespace and non-comment zloc inside of this zloc."],"~$zkeyword?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",409,"^8",7,"^9",409,"^:",16,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a keyword."],"^P","~$zprint.zutil/zkeyword?","^6","zprint/zutil.cljc","^:",16,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",409,"^45",["^O",[null,"^46"]],"^9",409,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a keyword."],"~$right*",["^ ","^P","~$zprint.zutil/right*","^6","zprint/zutil.cljc","^7",43,"^8",1,"^9",43,"^:",12,"^5",["^ ","^6","zprint/zutil.cljc","^7",43,"^8",6,"^9",43,"^:",12]],"~$zremove",["^ ","^P","~$zprint.zutil/zremove","^6","zprint/zutil.cljc","^7",110,"^8",1,"^9",110,"^:",13,"^5",["^ ","^6","zprint/zutil.cljc","^7",110,"^8",6,"^9",110,"^:",13]],"~$zrightmost",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",215,"^8",7,"^9",215,"^:",17,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the rightmost non-whitespace zloc at this level"],"^P","~$zprint.zutil/zrightmost","^6","zprint/zutil.cljc","^:",17,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",215,"^45","^4<","^9",215,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the rightmost non-whitespace zloc at this level"],"~$zconstant?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",457,"^8",7,"^9",457,"^:",17,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a keyword, string, or number, in other words,\n  a constant."],"^P","~$zprint.zutil/zconstant?","^6","zprint/zutil.cljc","^:",17,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",457,"^45",["^O",[null,"^46","^4<","^47"]],"^9",457,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a keyword, string, or number, in other words,\n  a constant."],"~$find-root-and-path",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",337,"^8",7,"^9",337,"^:",25,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Create a vector with the root as well as another vector\n  which contains the number of right moves after each down\n  down to find a particular zloc.  The right moves include\n  both whitespace and comments."],"^P","~$zprint.zutil/find-root-and-path","^6","zprint/zutil.cljc","^:",25,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",337,"^45",["^O",["~$cljs.core/IVector","^47"]],"^9",337,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Create a vector with the root as well as another vector\n  which contains the number of right moves after each down\n  down to find a particular zloc.  The right moves include\n  both whitespace and comments."],"~$zreplace",["^ ","^P","~$zprint.zutil/zreplace","^6","zprint/zutil.cljc","^7",114,"^8",1,"^9",114,"^:",14,"^5",["^ ","^6","zprint/zutil.cljc","^7",114,"^8",6,"^9",114,"^:",14]],"~$skip",["^ ","^P","~$zprint.zutil/skip","^6","zprint/zutil.cljc","^7",84,"^8",1,"^9",84,"^:",10,"^5",["^ ","^6","zprint/zutil.cljc","^7",84,"^8",6,"^9",84,"^:",10]],"~$find-docstring",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",509,"^8",7,"^9",509,"^:",21,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find a docstring in a zipper of a function."],"^P","~$zprint.zutil/find-docstring","^6","zprint/zutil.cljc","^:",21,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",509,"^45",["^O",["^4<","^47"]],"^9",509,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find a docstring in a zipper of a function."],"~$zfourth",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",199,"^8",7,"^9",199,"^:",14,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the fourth non-whitespace zloc inside of this zloc."],"^P","~$zprint.zutil/zfourth","^6","zprint/zutil.cljc","^:",14,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",199,"^45",["^O",["^4<","^47"]],"^9",199,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the fourth non-whitespace zloc inside of this zloc."],"~$znewline?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",161,"^8",7,"^9",161,"^:",16,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a newline."],"^P","~$zprint.zutil/znewline?","^6","zprint/zutil.cljc","^:",16,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",161,"^45",["^O",["^46","^47"]],"^9",161,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a newline."],"~$ztake-append",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",319,"^8",7,"^9",319,"^:",19,"^3X",["^1A",["^3Y",["^1A",[["~$n","^3Z","~$end-struct"]]]]],"^3[","Considering the current zloc a collection, move down into it and\n  take n non-whitespace elements, dropping the rest.  Then append the\n  given element to the end, coercing it into a node/zloc.  Note, this \n  is not quite implemented that way, as it uses replace."],"^P","~$zprint.zutil/ztake-append","^6","zprint/zutil.cljc","^:",19,"^41",["^1A",[["~$n","^3Z","^57"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",319,"^45","^4<","^9",319,"^48",3,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["~$n","^3Z","^57"]]]]],"^3[","Considering the current zloc a collection, move down into it and\n  take n non-whitespace elements, dropping the rest.  Then append the\n  given element to the end, coercing it into a node/zloc.  Note, this \n  is not quite implemented that way, as it uses replace."],"~$follow-path",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",379,"^8",7,"^9",379,"^:",18,"^3X",["^1A",["^3Y",["^1A",[["~$path-vec","^3Z"]]]]],"^3[","Follow the path vector from the root and return the zloc\n  at this location."],"^P","~$zprint.zutil/follow-path","^6","zprint/zutil.cljc","^:",18,"^41",["^1A",[["^5:","^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",379,"^45",["^O",[null,"^4<"]],"^9",379,"^48",2,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^5:","^3Z"]]]]],"^3[","Follow the path vector from the root and return the zloc\n  at this location."],"~$zprevnws",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",241,"^8",7,"^9",241,"^:",15,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the next non-whitespace zloc."],"^P","~$zprint.zutil/zprevnws","^6","zprint/zutil.cljc","^:",15,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",241,"^45",["^O",["^4<","^47"]],"^9",241,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the next non-whitespace zloc."],"~$rightmost?",["^ ","^P","~$zprint.zutil/rightmost?","^6","zprint/zutil.cljc","^7",104,"^8",1,"^9",104,"^:",16,"^5",["^ ","^6","zprint/zutil.cljc","^7",104,"^8",6,"^9",104,"^:",16]],"~$zlast",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",387,"^8",7,"^9",387,"^:",12,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Return the last non-whitespace (but possibly comment) element inside\n  of this zloc."],"^P","~$zprint.zutil/zlast","^6","zprint/zutil.cljc","^:",12,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",387,"^45",["^O",["^4<","^47"]],"^9",387,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Return the last non-whitespace (but possibly comment) element inside\n  of this zloc."],"~$zdotdotdot",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",452,"^8",7,"^9",452,"^:",17,"^3X",["^1A",["^3Y",["^1A",[[]]]]],"^3[","Return a zloc that will turn into a string of three dots."],"^P","~$zprint.zutil/zdotdotdot","^6","zprint/zutil.cljc","^:",17,"^41",["^1A",[[]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",452,"^45","^4<","^9",452,"^48",0,"^49",true,"^3X",["^1A",["^3Y",["^1A",[[]]]]],"^3[","Return a zloc that will turn into a string of three dots."],"~$znthnext",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",246,"^8",7,"^9",246,"^:",15,"^3X",["^1A",["^3Y",["^1A",[["^3Z","~$n"]]]]],"^3[","Find the nth non-whitespace zloc inside of this zloc."],"^P","~$zprint.zutil/znthnext","^6","zprint/zutil.cljc","^:",15,"^41",["^1A",[["^3Z","~$n"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",246,"^45","^4<","^9",246,"^48",2,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z","~$n"]]]]],"^3[","Find the nth non-whitespace zloc inside of this zloc."],"~$znil?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",419,"^8",7,"^9",419,"^:",12,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is nil."],"^P","~$zprint.zutil/znil?","^6","zprint/zutil.cljc","^:",12,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",419,"^45",["^O",[null,"^46"]],"^9",419,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is nil."],"~$zsymbol?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",414,"^8",7,"^9",414,"^:",15,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a symbol."],"^P","~$zprint.zutil/zsymbol?","^6","zprint/zutil.cljc","^:",15,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",414,"^45",["^O",[null,"^46"]],"^9",414,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a symbol."],"~$zreader-cond-w-coll?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",438,"^8",7,"^9",438,"^:",27,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a reader-conditional with a collection in \n  the first position (could be :clj or :cljs, whatever)."],"^P","~$zprint.zutil/zreader-cond-w-coll?","^6","zprint/zutil.cljc","^:",27,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",438,"^45",["^O",["^4<","^47"]],"^9",438,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this is a reader-conditional with a collection in \n  the first position (could be :clj or :cljs, whatever)."],"~$zmeta?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",140,"^8",7,"^9",140,"^:",13,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this a ^{...}"],"^P","~$zprint.zutil/zmeta?","^6","zprint/zutil.cljc","^:",13,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",140,"^45","^46","^9",140,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this a ^{...}"],"~$left*",["^ ","^P","~$zprint.zutil/left*","^6","zprint/zutil.cljc","^7",47,"^8",1,"^9",47,"^:",11,"^5",["^ ","^6","zprint/zutil.cljc","^7",47,"^8",6,"^9",47,"^:",11]],"~$add-spec-to-docstring",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",520,"^8",7,"^9",520,"^:",28,"^3X",["^1A",["^3Y",["^1A",[["^3Z","~$spec-str"]]]]],"^3[","Given a zipper of a function definition, add the spec info to\n  the docstring. Works for docstring with (def ...) functions, but\n  the left-indent isn't optimal.  But to fix that, we'd have to do\n  the zprinting here, where we know the indent of the existing\n  docstring."],"^P","~$zprint.zutil/add-spec-to-docstring","^6","zprint/zutil.cljc","^:",28,"^41",["^1A",[["^3Z","^5Q"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",520,"^45",["^O",[null,"^4<"]],"^9",520,"^48",2,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z","^5Q"]]]]],"^3[","Given a zipper of a function definition, add the spec info to\n  the docstring. Works for docstring with (def ...) functions, but\n  the left-indent isn't optimal.  But to fix that, we'd have to do\n  the zprinting here, where we know the indent of the existing\n  docstring."],"~$zfocus",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",125,"^8",7,"^9",125,"^:",13,"^3X",["^1A",["^3Y",["^1A",[["^3Z","~$floc"]]]]],"^3[","Is the zipper zloc equivalent to the path floc.  In this\n  case, floc isn't a zipper, but was turned into a path early on."],"^P","~$zprint.zutil/zfocus","^6","zprint/zutil.cljc","^:",13,"^41",["^1A",[["^3Z","^5T"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",125,"^45","^46","^9",125,"^48",2,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z","^5T"]]]]],"^3[","Is the zipper zloc equivalent to the path floc.  In this\n  case, floc isn't a zipper, but was turned into a path early on."],"~$zfirst",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",173,"^8",7,"^9",173,"^:",13,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the first non-whitespace zloc inside of this zloc, or\n  the first whitespace zloc that is the focus."],"^P","~$zprint.zutil/zfirst","^6","zprint/zutil.cljc","^:",13,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",173,"^45",["^O",["^4<","^47"]],"^9",173,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the first non-whitespace zloc inside of this zloc, or\n  the first whitespace zloc that is the focus."],"~$sexpr",["^ ","^P","~$zprint.zutil/sexpr","^6","zprint/zutil.cljc","^7",72,"^8",1,"^9",72,"^:",11,"^5",["^ ","^6","zprint/zutil.cljc","^7",72,"^8",6,"^9",72,"^:",11]],"~$zsexpr?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",393,"^8",7,"^9",393,"^:",14,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this can be converted to an sexpr. Works around a bug\n  where n/printable-only? returns false for n/tag :fn, but z/sexpr fails\n  on something with n/tag :fn"],"^P","~$zprint.zutil/zsexpr?","^6","zprint/zutil.cljc","^:",14,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",393,"^45",["^O",[null,"^46"]],"^9",393,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Returns true if this can be converted to an sexpr. Works around a bug\n  where n/printable-only? returns false for n/tag :fn, but z/sexpr fails\n  on something with n/tag :fn"],"~$zcount",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",332,"^8",7,"^9",332,"^:",13,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","How many non-whitespace children does zloc have?"],"^P","~$zprint.zutil/zcount","^6","zprint/zutil.cljc","^:",13,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",332,"^45","~$number","^9",332,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","How many non-whitespace children does zloc have?"],"~$up*",["^ ","^P","~$zprint.zutil/up*","^6","zprint/zutil.cljc","^7",39,"^8",1,"^9",39,"^:",9,"^5",["^ ","^6","zprint/zutil.cljc","^7",39,"^8",6,"^9",39,"^:",9]],"~$zrightnws",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",210,"^8",7,"^9",210,"^:",16,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the next non-whitespace zloc inside of this zloc."],"^P","~$zprint.zutil/zrightnws","^6","zprint/zutil.cljc","^:",16,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",210,"^45",["^O",["^4<","^47"]],"^9",210,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the next non-whitespace zloc inside of this zloc."],"~$znextnws",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",234,"^8",7,"^9",234,"^:",15,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the next non-whitespace zloc."],"^P","~$zprint.zutil/znextnws","^6","zprint/zutil.cljc","^:",15,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",234,"^45",["^O",[null,"^4<","^47"]],"^9",234,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the next non-whitespace zloc."],"~$zreader-macro?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",147,"^8",7,"^9",147,"^:",21,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this a @..."],"^P","~$zprint.zutil/zreader-macro?","^6","zprint/zutil.cljc","^:",21,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",147,"^45","^46","^9",147,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this a @..."],"~$zthird",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",190,"^8",7,"^9",190,"^:",13,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the third non-whitespace zloc inside of this zloc."],"^P","~$zprint.zutil/zthird","^6","zprint/zutil.cljc","^:",13,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",190,"^45",["^O",["^4<","^47"]],"^9",190,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the third non-whitespace zloc inside of this zloc."],"~$edn*",["^ ","^P","~$zprint.zutil/edn*","^6","zprint/zutil.cljc","^7",68,"^8",1,"^9",68,"^:",10,"^5",["^ ","^6","zprint/zutil.cljc","^7",68,"^8",6,"^9",68,"^:",10]],"~$replace*",["^ ","^P","~$zprint.zutil/replace*","^6","zprint/zutil.cljc","^7",59,"^8",1,"^9",59,"^:",14,"^5",["^ ","^6","zprint/zutil.cljc","^7",59,"^8",6,"^9",59,"^:",14]],"~$find-root-and-path-nw",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",351,"^8",7,"^9",351,"^:",28,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Create a vector with the root as well as another vector\n  which contains the number of right moves after each down\n  down to find a particular zloc.  The right moves are\n  non-whitespace, but include comments."],"^P","~$zprint.zutil/find-root-and-path-nw","^6","zprint/zutil.cljc","^:",28,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",351,"^45",["^O",["^4W","^47"]],"^9",351,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Create a vector with the root as well as another vector\n  which contains the number of right moves after each down\n  down to find a particular zloc.  The right moves are\n  non-whitespace, but include comments."],"~$zmap-right",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",298,"^8",7,"^9",298,"^:",17,"^3X",["^1A",["^3Y",["^1A",[["~$zfn","^3Z"]]]]],"^3[","Apply a function to every non-whitespace zloc to right of zloc."],"^P","~$zprint.zutil/zmap-right","^6","zprint/zutil.cljc","^:",17,"^41",["^1A",[["^6D","^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",298,"^45",["^O",["~$clj","^4W"]],"^9",298,"^48",2,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^6D","^3Z"]]]]],"^3[","Apply a function to every non-whitespace zloc to right of zloc."],"~$zlift-ns",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",538,"^8",7,"^9",538,"^:",15,"^3X",["^1A",["^3Y",["^1A",[[["^ ","~:keys",["~$in-code?","~$lift-ns?","~$lift-ns-in-code?","~$unlift-ns?"],"^1C","~$map-options"],"~$pair-seq","^1B"]]]]],"^3[","Perform a lift-ns on a pair-seq that is returned from\n  partition-2-all-nc, which is a seq of pairs of zlocs that may or\n  may not have been sorted and which may or may not have had things\n  removed from it and may or may not actually be pairs.  Could be\n  single things, could be multiple things.  If contains multiple\n  things, the first thing is the key, but if it is just a single\n  thing, the first thing is *not* a key. So we only need to work\n  on the first of each seq which has more than one element in it,\n  and possibly replace it. This will only lift out a ns if all keys\n  in seqs with more than one element have the same namespace. Returns\n  the [namespace pair-seq] or nil."],"^P","~$zprint.zutil/zlift-ns","^6","zprint/zutil.cljc","^:",15,"^41",["^1A",[["~$p__49292","^6N","^1B"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",538,"^45",["^O",["^4W","^47"]],"^9",538,"^48",3,"^49",true,"^3X",["^1A",["^3Y",["^1A",[[["^ ","^6H",["^6I","^6J","^6K","^6L"],"^1C","^6M"],"^6N","^1B"]]]]],"^3[","Perform a lift-ns on a pair-seq that is returned from\n  partition-2-all-nc, which is a seq of pairs of zlocs that may or\n  may not have been sorted and which may or may not have had things\n  removed from it and may or may not actually be pairs.  Could be\n  single things, could be multiple things.  If contains multiple\n  things, the first thing is the key, but if it is just a single\n  thing, the first thing is *not* a key. So we only need to work\n  on the first of each seq which has more than one element in it,\n  and possibly replace it. This will only lift out a ns if all keys\n  in seqs with more than one element have the same namespace. Returns\n  the [namespace pair-seq] or nil."],"~$down*",["^ ","^P","~$zprint.zutil/down*","^6","zprint/zutil.cljc","^7",35,"^8",1,"^9",35,"^:",11,"^5",["^ ","^6","zprint/zutil.cljc","^7",35,"^8",6,"^9",35,"^:",11]],"~$string",["^ ","^P","~$zprint.zutil/string","^6","zprint/zutil.cljc","^7",76,"^8",1,"^9",76,"^:",12,"^5",["^ ","^6","zprint/zutil.cljc","^7",76,"^8",6,"^9",76,"^:",12]],"~$zsecond",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",184,"^8",7,"^9",184,"^:",14,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the second non-whitespace zloc inside of this zloc."],"^P","~$zprint.zutil/zsecond","^6","zprint/zutil.cljc","^:",14,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",184,"^45",["^O",["^4<","^47"]],"^9",184,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the second non-whitespace zloc inside of this zloc."],"~$zinlinecomment?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",478,"^8",7,"^9",478,"^:",22,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","If this is an inline comment, returns the amount of space that\n  was between this and the previous element.  That means that if\n  we go left, we get something other than whitespace before a\n  newline.  Assumes zloc is a comment."],"^P","~$zprint.zutil/zinlinecomment?","^6","zprint/zutil.cljc","^:",22,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",478,"^45",["^O",["^62","^47"]],"^9",478,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","If this is an inline comment, returns the amount of space that\n  was between this and the previous element.  That means that if\n  we go left, we get something other than whitespace before a\n  newline.  Assumes zloc is a comment."],"~$move-down-and-right",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",370,"^8",7,"^9",370,"^:",26,"^3X",["^1A",["^3Y",["^1A",[["^3Z","~$right-count"]]]]],"^3[","Move one down and then right a certain number of steps."],"^P","~$zprint.zutil/move-down-and-right","^6","zprint/zutil.cljc","^:",26,"^41",["^1A",[["^3Z","^6Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",370,"^45","^4<","^9",370,"^48",2,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z","^6Z"]]]]],"^3[","Move one down and then right a certain number of steps."],"~$skip-whitespace",["^ ","^P","~$zprint.zutil/skip-whitespace","^6","zprint/zutil.cljc","^7",88,"^8",1,"^9",88,"^:",21,"^5",["^ ","^6","zprint/zutil.cljc","^7",88,"^8",6,"^9",88,"^:",21]],"~$zfocus-style",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",131,"^8",7,"^9",131,"^:",19,"^3X",["^1A",["^3Y",["^1A",[["~$style","^3Z","^5T"]]]]],"^3[","Take the various inputs and come up with a style."],"^P","~$zprint.zutil/zfocus-style","^6","zprint/zutil.cljc","^:",19,"^41",["^1A",[["^73","^3Z","^5T"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",131,"^45",["^O",[null,"~$cljs.core/Keyword"]],"^9",131,"^48",3,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^73","^3Z","^5T"]]]]],"^3[","Take the various inputs and come up with a style."],"~$zleftnws",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",222,"^8",7,"^9",222,"^:",15,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the next non-whitespace zloc inside of this zloc."],"^P","~$zprint.zutil/zleftnws","^6","zprint/zutil.cljc","^:",15,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",222,"^45",["^O",["^4<","^47"]],"^9",222,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the next non-whitespace zloc inside of this zloc."],"~$zmap-all",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",290,"^8",7,"^9",290,"^:",15,"^3X",["^1A",["^3Y",["^1A",[["^6D","^3Z"]]]]],"^3[","Return a vector containing the return of applying a function to \n  every zloc inside of zloc."],"^P","~$zprint.zutil/zmap-all","^6","zprint/zutil.cljc","^:",15,"^41",["^1A",[["^6D","^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",290,"^45",["^O",["^6F","^4W"]],"^9",290,"^48",2,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^6D","^3Z"]]]]],"^3[","Return a vector containing the return of applying a function to \n  every zloc inside of zloc."],"^3R",["^ ","^P","~$zprint.zutil/next*","^6","zprint/zutil.cljc","^7",51,"^8",1,"^9",51,"^:",11,"^5",["^ ","^6","zprint/zutil.cljc","^7",51,"^8",6,"^9",51,"^:",11]],"~$zmap",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",277,"^8",7,"^9",277,"^:",11,"^3X",["^1A",["^3Y",["^1A",[["^6D","^3Z"]]]]],"^3[","Return a vector containing the return of applying a function to \n  every non-whitespace zloc inside of zloc."],"^P","~$zprint.zutil/zmap","^6","zprint/zutil.cljc","^:",11,"^41",["^1A",[["^6D","^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",277,"^45",["^O",["^6F","^4W"]],"^9",277,"^48",2,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^6D","^3Z"]]]]],"^3[","Return a vector containing the return of applying a function to \n  every non-whitespace zloc inside of zloc."],"~$ztag",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",149,"^8",7,"^9",149,"^:",11,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Return the tag for this zloc"],"^P","~$zprint.zutil/ztag","^6","zprint/zutil.cljc","^:",11,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",149,"^45","^4<","^9",149,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Return the tag for this zloc"],"~$zredef-call",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",626,"^8",7,"^9",626,"^:",18,"^3X",["^1A",["^3Y",["^1A",[["~$body-fn"]]]]],"^3[","Redefine all of the traversal functions for zippers, then\n  call the function of no arguments passed in."],"^P","~$zprint.zutil/zredef-call","^6","zprint/zutil.cljc","^:",18,"^41",["^1A",[["^7@"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",626,"^9",626,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^7@"]]]]],"^3[","Redefine all of the traversal functions for zippers, then\n  call the function of no arguments passed in."],"~$zseqnws",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",307,"^8",7,"^9",307,"^:",14,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Return a seq of all of the non-whitespace children of zloc."],"^P","~$zprint.zutil/zseqnws","^6","zprint/zutil.cljc","^:",14,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",307,"^45",["^O",["^6F","^4W"]],"^9",307,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Return a seq of all of the non-whitespace children of zloc."],"~$find-doc-in-map",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",500,"^8",7,"^9",500,"^:",22,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Given a zloc zipper of a map, find the :doc element."],"^P","~$zprint.zutil/find-doc-in-map","^6","zprint/zutil.cljc","^:",22,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",500,"^45",["^O",["^4<","^47"]],"^9",500,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Given a zloc zipper of a map, find the :doc element."],"~$zmap-w-nl",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",262,"^8",7,"^9",262,"^:",16,"^3X",["^1A",["^3Y",["^1A",[["^6D","^3Z"]]]]],"^3[","Return a vector containing the return of applying a function to \n  every non-whitespace zloc inside of zloc."],"^P","~$zprint.zutil/zmap-w-nl","^6","zprint/zutil.cljc","^:",16,"^41",["^1A",[["^6D","^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",262,"^45",["^O",["^6F","^4W"]],"^9",262,"^48",2,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^6D","^3Z"]]]]],"^3[","Return a vector containing the return of applying a function to \n  every non-whitespace zloc inside of zloc."],"~$length",["^ ","^P","~$zprint.zutil/length","^6","zprint/zutil.cljc","^7",100,"^8",1,"^9",100,"^:",12,"^5",["^ ","^6","zprint/zutil.cljc","^7",100,"^8",6,"^9",100,"^:",12]],"~$prev*",["^ ","^P","~$zprint.zutil/prev*","^6","zprint/zutil.cljc","^7",55,"^8",1,"^9",55,"^:",11,"^5",["^ ","^6","zprint/zutil.cljc","^7",55,"^8",6,"^9",55,"^:",11]],"~$find-root",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",365,"^8",7,"^9",365,"^:",16,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the root from a zloc by doing lots of ups."],"^P","~$zprint.zutil/find-root","^6","zprint/zutil.cljc","^:",16,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",365,"^9",365,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Find the root from a zloc by doing lots of ups."],"~$zuneval?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",138,"^8",7,"^9",138,"^:",15,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this a #_(...)"],"^P","~$zprint.zutil/zuneval?","^6","zprint/zutil.cljc","^:",15,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",138,"^45","^46","^9",138,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this a #_(...)"],"~$zfind",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",253,"^8",7,"^9",253,"^:",12,"^3X",["^1A",["^3Y",["^1A",[["~$zthing?","^3Z"]]]]],"^3[","Find the locations (counting from zero, and only counting non-whitespace\n  elements) of the first zthing?.  Return its index if it is found, nil if not."],"^P","~$zprint.zutil/zfind","^6","zprint/zutil.cljc","^:",12,"^41",["^1A",[["^7Q","^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",253,"^45",["^O",["^62","^47"]],"^9",253,"^48",2,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^7Q","^3Z"]]]]],"^3[","Find the locations (counting from zero, and only counting non-whitespace\n  elements) of the first zthing?.  Return its index if it is found, nil if not."],"~$zquote?",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",142,"^8",7,"^9",142,"^:",14,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this a '(...) or '[ ... ] or some other quote?"],"^P","~$zprint.zutil/zquote?","^6","zprint/zutil.cljc","^:",14,"^41",["^1A",[["^3Z"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",142,"^45","^46","^9",142,"^48",1,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z"]]]]],"^3[","Is this a '(...) or '[ ... ] or some other quote?"],"~$whitespace-or-comment?",["^ ","^P","~$zprint.zutil/whitespace-or-comment?","^6","zprint/zutil.cljc","^7",96,"^8",1,"^9",96,"^:",28,"^5",["^ ","^6","zprint/zutil.cljc","^7",96,"^8",6,"^9",96,"^:",28]],"~$znumstr",["^ ","^3W",null,"^5",["^ ","^6","zprint/zutil.cljc","^7",166,"^8",7,"^9",166,"^:",14,"^3X",["^1A",["^3Y",["^1A",[["^3Z","~$_","~$_"]]]]],"^3[","Does z/string, but takes an additional argument for hex conversion.\n  Hex conversion is not implemented for zippers, though, because at present\n  it is only used for byte-arrays, which don't really show up here."],"^P","~$zprint.zutil/znumstr","^6","zprint/zutil.cljc","^:",14,"^41",["^1A",[["^3Z","~$_","~$_"]]],"^42",null,"^43",["^1A",[null,null]],"^8",1,"^44",false,"^7",166,"^45","^4<","^9",166,"^48",3,"^49",true,"^3X",["^1A",["^3Y",["^1A",[["^3Z","~$_","~$_"]]]]],"^3[","Does z/string, but takes an additional argument for hex conversion.\n  Hex conversion is not implemented for zippers, though, because at present\n  it is only used for byte-arrays, which don't really show up here."]],"^1?",["^ ","^10","^10"],"~:cljs.analyzer/constants",["^ ","^1<",["^O",["~:in-code?","~:fn","~:namespaced-map","^5","~:whitespace","~:else","~:reader-macro","~:unquote","~:uneval","~:lift-ns-in-code?","~:syntax-quote","~:quote","~:comment","~:lift-ns?","~:b","~:f","~:newline","~:unlift-ns?"]],"~:order",["~:f","~:b","^85","^5","^88","^83","^80","^89","^8;","^7[","^84","^87","^81","^82","^7Z","^8:","^86","^8<"]],"^1D",["^ ","^1=",["^O",[]]],"^1E",["^ "],"^1F",["^11","^10","^1;","^14","^V","^Z","^[","^13","^15","^16","^X","^19","^Y"]],"^S","^Q","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1T",[["^8@","~:static-fns"],true,["^8@","~:elide-asserts"],false,["^8@","~:optimize-constants"],null,["^8@","^1K"],null,["^8@","~:external-config"],null,["^8@","~:tooling-config"],null,["^8@","~:emit-constants"],null,["^8@","~:load-tests"],null,["^8@","~:infer-externs"],true,["^8@","^1M"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8@","~:fn-invoke-direct"],null,["^8@","~:source-map"],"/dev/null"]]]