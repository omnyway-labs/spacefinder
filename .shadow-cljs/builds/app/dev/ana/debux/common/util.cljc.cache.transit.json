["^ ","~:output",["^ ","~:js","goog.provide('debux.common.util');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('cljs.pprint');\ngoog.require('clojure.zip');\ngoog.require('clojure.walk');\ngoog.require('cljs.analyzer.api');\ngoog.require('cljs.repl');\ngoog.require('re_frame.trace');\ndebux.common.util.sequential_zip = (function debux$common$util$sequential_zip(root){\nreturn clojure.zip.zipper(cljs.core.sequential_QMARK_,cljs.core.identity,(function (x,children){\nif(cljs.core.vector_QMARK_(x)){\nreturn cljs.core.vec(children);\n} else {\nreturn children;\n}\n}),root);\n});\ndebux.common.util.right_or_next = (function debux$common$util$right_or_next(loc){\nwhile(true){\nvar temp__5733__auto__ = clojure.zip.right(loc);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar right = temp__5733__auto__;\nreturn right;\n} else {\nif(cljs.core.sequential_QMARK_(clojure.zip.node(loc))){\nvar rightmost = clojure.zip.rightmost(clojure.zip.down(loc));\nif(cljs.core.sequential_QMARK_(clojure.zip.node(rightmost))){\nvar G__60921 = rightmost;\nloc = G__60921;\ncontinue;\n} else {\nreturn clojure.zip.next(rightmost);\n}\n} else {\nreturn clojure.zip.next(loc);\n}\n}\nbreak;\n}\n});\ndebux.common.util.auto_gensym_pattern = /(.*)__\\d+__auto__/;\ndebux.common.util.anon_gensym_pattern = /G__\\d+/;\ndebux.common.util.named_gensym_pattern = /(.*?)\\d{4,}/;\ndebux.common.util.anon_param_pattern = /p(\\d+)__\\d+#/;\ndebux.common.util.form_tree_seq = (function debux$common$util$form_tree_seq(form){\nreturn cljs.core.tree_seq(cljs.core.sequential_QMARK_,cljs.core.seq,form);\n});\n/**\n * Reverse gensym'd names to their original source form to make them easier to read.\n */\ndebux.common.util.with_gensyms_names = (function debux$common$util$with_gensyms_names(form,mapping){\nvar gen_name = (function (result,name){\nif((!(cljs.core.contains_QMARK_(result,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(name),\"#\"].join(''))))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name),\"#\"].join('');\n} else {\nreturn cljs.core.first(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__60804_SHARP_){\nreturn (!(cljs.core.contains_QMARK_(result,p1__60804_SHARP_)));\n}),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__60803_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name),cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__60803_SHARP_),\"#\"].join('');\n}),cljs.core.iterate(cljs.core.inc,(2)))));\n}\n});\nvar name_for = ((function (gen_name){\nreturn (function (result,sym_name){\nvar temp__5733__auto__ = cljs.core.re_matches(debux.common.util.auto_gensym_pattern,sym_name);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar groups = temp__5733__auto__;\nreturn gen_name(result,cljs.core.second(groups));\n} else {\nif(cljs.core.truth_(cljs.core.re_matches(debux.common.util.anon_gensym_pattern,sym_name))){\nreturn gen_name(result,\"gensym\");\n} else {\nvar temp__5733__auto____$1 = cljs.core.re_matches(debux.common.util.named_gensym_pattern,sym_name);\nif(cljs.core.truth_(temp__5733__auto____$1)){\nvar groups = temp__5733__auto____$1;\nreturn gen_name(result,cljs.core.second(groups));\n} else {\nvar temp__5733__auto____$2 = cljs.core.re_matches(debux.common.util.anon_param_pattern,sym_name);\nif(cljs.core.truth_(temp__5733__auto____$2)){\nvar groups = temp__5733__auto____$2;\nreturn [\"%\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second(groups))].join('');\n} else {\nreturn null;\n}\n}\n}\n}\n});})(gen_name))\n;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (gen_name,name_for){\nreturn (function (result,sym_name){\nif(cljs.core.contains_QMARK_(result,sym_name)){\nreturn result;\n} else {\nvar temp__5733__auto__ = name_for(result,sym_name);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar new_name = temp__5733__auto__;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,sym_name,new_name);\n} else {\nreturn result;\n}\n}\n});})(gen_name,name_for))\n,mapping,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.name,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (gen_name,name_for){\nreturn (function (p1__60805_SHARP_){\nreturn (((p1__60805_SHARP_ instanceof cljs.core.Symbol)) && ((cljs.core.namespace(p1__60805_SHARP_) == null)));\n});})(gen_name,name_for))\n,debux.common.util.form_tree_seq(form))));\n});\n/**\n * Tidy up fully qualified names that have aliases in the existing namespace.\n */\ndebux.common.util.with_symbols_names = (function debux$common$util$with_symbols_names(form,p__60816,mapping){\nvar map__60817 = p__60816;\nvar map__60817__$1 = (((((!((map__60817 == null))))?(((((map__60817.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60817.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60817):map__60817);\nvar state = map__60817__$1;\nvar context = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60817__$1,new cljs.core.Keyword(null,\"context\",\"context\",-830191113));\nvar refers = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60817__$1,new cljs.core.Keyword(null,\"refers\",\"refers\",158076809));\nvar aliases = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60817__$1,new cljs.core.Keyword(null,\"aliases\",\"aliases\",1346874714));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__60817,map__60817__$1,state,context,refers,aliases){\nreturn (function (result,sym){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"clojure.core\",cljs.core.namespace(sym))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sym], 0)),cljs.core.name(sym));\n} else {\nreturn result;\n}\n});})(map__60817,map__60817__$1,state,context,refers,aliases))\n,mapping,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (map__60817,map__60817__$1,state,context,refers,aliases){\nreturn (function (p1__60813_SHARP_){\nvar and__4120__auto__ = (p1__60813_SHARP_ instanceof cljs.core.Symbol);\nif(and__4120__auto__){\nreturn cljs.core.namespace(p1__60813_SHARP_);\n} else {\nreturn and__4120__auto__;\n}\n});})(map__60817,map__60817__$1,state,context,refers,aliases))\n,debux.common.util.form_tree_seq(form)));\n});\n/**\n * Takes a macroexpanded form and tidies it up to be more readable by\n *   unmapping gensyms and replacing fully qualified namespaces with aliases\n *   or nothing if the function is referred.\n */\ndebux.common.util.tidy_macroexpanded_form = (function debux$common$util$tidy_macroexpanded_form(form,state){\nvar mapping = debux.common.util.with_symbols_names(form,state,debux.common.util.with_gensyms_names(form,cljs.core.PersistentArrayMap.EMPTY));\nvar loc = debux.common.util.sequential_zip(form);\nwhile(true){\nif(clojure.zip.end_QMARK_(loc)){\nreturn clojure.zip.root(loc);\n} else {\nif((clojure.zip.node(loc) instanceof cljs.core.Symbol)){\nvar G__60944 = clojure.zip.next(clojure.zip.edit(loc,((function (loc,mapping){\nreturn (function (sym){\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$3(mapping,cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sym], 0)),sym));\n});})(loc,mapping))\n));\nloc = G__60944;\ncontinue;\n} else {\nvar G__60945 = clojure.zip.next(loc);\nloc = G__60945;\ncontinue;\n}\n}\nbreak;\n}\n});\ndebux.common.util.send_form_BANG_ = (function debux$common$util$send_form_BANG_(form){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__51563__auto___60946 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),form], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),form], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__51563__auto___60946;\n\nreturn null;\n} else {\nreturn null;\n}\n});\ndebux.common.util.send_trace_BANG_ = (function debux$common$util$send_trace_BANG_(code_trace){\nvar code = cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.Keyword(null,\"code\",\"code\",1586293142)], null),cljs.core.PersistentVector.EMPTY);\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__51563__auto___60948 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(code,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),debux.common.util.tidy_macroexpanded_form(new cljs.core.Keyword(null,\"form\",\"form\",-1624062471).cljs$core$IFn$_invoke$arity$1(code_trace),cljs.core.PersistentArrayMap.EMPTY),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(code_trace),new cljs.core.Keyword(null,\"indent-level\",\"indent-level\",-258835684),new cljs.core.Keyword(null,\"indent-level\",\"indent-level\",-258835684).cljs$core$IFn$_invoke$arity$1(code_trace)], null))], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"code\",\"code\",1586293142),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(code,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),debux.common.util.tidy_macroexpanded_form(new cljs.core.Keyword(null,\"form\",\"form\",-1624062471).cljs$core$IFn$_invoke$arity$1(code_trace),cljs.core.PersistentArrayMap.EMPTY),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(code_trace),new cljs.core.Keyword(null,\"indent-level\",\"indent-level\",-258835684),new cljs.core.Keyword(null,\"indent-level\",\"indent-level\",-258835684).cljs$core$IFn$_invoke$arity$1(code_trace)], null))], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__51563__auto___60948;\n\nreturn null;\n} else {\nreturn null;\n}\n});\ndebux.common.util.indent_level_STAR_ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1((1));\ndebux.common.util.reset_indent_level_BANG_ = (function debux$common$util$reset_indent_level_BANG_(){\nreturn cljs.core.reset_BANG_(debux.common.util.indent_level_STAR_,(1));\n});\ndebux.common.util.print_seq_length_STAR_ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1((100));\ndebux.common.util.set_print_seq_length_BANG_ = (function debux$common$util$set_print_seq_length_BANG_(num){\nreturn cljs.core.reset_BANG_(debux.common.util.print_seq_length_STAR_,num);\n});\ndebux.common.util.cljs_env_QMARK_ = (function debux$common$util$cljs_env_QMARK_(env){\nreturn cljs.core.boolean$(new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(env));\n});\n/**\n * Transsub-forms a vector into an array-map with key/value pairs.\n *   (def a 10)\n *   (def b 20)\n *   (vec-map [a b :c [30 40]])\n *   => {:a 10 :b 20 ::c :c :[30 40] [30 40]}\n */\ndebux.common.util.vec__GT_map = (function debux$common$util$vec__GT_map(v){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (elm){\nreturn cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.str.cljs$core$IFn$_invoke$arity$1(elm)),null,(1),null)),(new cljs.core.List(null,elm,null,(1),null))))));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([v], 0)));\n});\ndebux.common.util.replace__AMPERSAND_ = (function debux$common$util$replace__AMPERSAND_(v){\nreturn clojure.walk.postwalk_replace(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null,\"&\",\"&\",-2144855648,null),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"&\",\"&\",-2144855648,null))], null),v);\n});\ndebux.common.util.take_n_if_seq = (function debux$common$util$take_n_if_seq(n,result){\nif(cljs.core.seq_QMARK_(result)){\nreturn cljs.core.take.cljs$core$IFn$_invoke$arity$2((function (){var or__4131__auto__ = n;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.deref(debux.common.util.print_seq_length_STAR_);\n}\n})(),result);\n} else {\nreturn result;\n}\n});\ndebux.common.util.truncate = (function debux$common$util$truncate(s){\nif((cljs.core.count(s) > (70))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.substring((0),(70))),\" ...\"].join('');\n} else {\nreturn s;\n}\n});\ndebux.common.util.make_bars_ = (function debux$common$util$make_bars_(times){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(times,\"|\"));\n});\ndebux.common.util.make_bars = cljs.core.memoize(debux.common.util.make_bars_);\ndebux.common.util.prepend_bars = (function debux$common$util$prepend_bars(line,indent_level){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1((debux.common.util.make_bars.cljs$core$IFn$_invoke$arity$1 ? debux.common.util.make_bars.cljs$core$IFn$_invoke$arity$1(indent_level) : debux.common.util.make_bars.call(null,indent_level))),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(line)].join('');\n});\ndebux.common.util.print_form_with_indent = (function debux$common$util$print_form_with_indent(form,indent_level){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([debux.common.util.prepend_bars(form,indent_level)], 0));\n\nreturn cljs.core.flush();\n});\ndebux.common.util.form_header = (function debux$common$util$form_header(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___60953 = arguments.length;\nvar i__4731__auto___60954 = (0);\nwhile(true){\nif((i__4731__auto___60954 < len__4730__auto___60953)){\nargs__4736__auto__.push((arguments[i__4731__auto___60954]));\n\nvar G__60956 = (i__4731__auto___60954 + (1));\ni__4731__auto___60954 = G__60956;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn debux.common.util.form_header.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\ndebux.common.util.form_header.cljs$core$IFn$_invoke$arity$variadic = (function (form,p__60834){\nvar vec__60835 = p__60834;\nvar msg = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60835,(0),null);\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(debux.common.util.truncate(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([form], 0)))),cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var and__4120__auto__ = msg;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn [\"   <\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg),\">\"].join('');\n} else {\nreturn and__4120__auto__;\n}\n})()),\" =>\"].join('');\n});\n\ndebux.common.util.form_header.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\ndebux.common.util.form_header.cljs$lang$applyTo = (function (seq60831){\nvar G__60832 = cljs.core.first(seq60831);\nvar seq60831__$1 = cljs.core.next(seq60831);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__60832,seq60831__$1);\n});\n\ndebux.common.util.prepend_blanks = (function debux$common$util$prepend_blanks(lines){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__60841_SHARP_){\nreturn [\"  \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__60841_SHARP_)].join('');\n}),lines);\n});\ndebux.common.util.pprint_result_with_indent = (function debux$common$util$pprint_result_with_indent(result,indent_level){\nvar res = result;\nvar result__$1 = (function (){var sb__4661__auto__ = (new goog.string.StringBuffer());\nvar _STAR_print_newline_STAR__orig_val__60850_60957 = cljs.core._STAR_print_newline_STAR_;\nvar _STAR_print_fn_STAR__orig_val__60851_60958 = cljs.core._STAR_print_fn_STAR_;\nvar _STAR_print_newline_STAR__temp_val__60852_60959 = true;\nvar _STAR_print_fn_STAR__temp_val__60853_60960 = ((function (_STAR_print_newline_STAR__orig_val__60850_60957,_STAR_print_fn_STAR__orig_val__60851_60958,_STAR_print_newline_STAR__temp_val__60852_60959,sb__4661__auto__,res){\nreturn (function (x__4662__auto__){\nreturn sb__4661__auto__.append(x__4662__auto__);\n});})(_STAR_print_newline_STAR__orig_val__60850_60957,_STAR_print_fn_STAR__orig_val__60851_60958,_STAR_print_newline_STAR__temp_val__60852_60959,sb__4661__auto__,res))\n;\ncljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__60852_60959;\n\ncljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__60853_60960;\n\ntry{cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1(res);\n}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__60851_60958;\n\ncljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__60850_60957;\n}\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4661__auto__);\n})();\nvar pprint = clojure.string.trim(result__$1);\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (res,result__$1,pprint){\nreturn (function (p1__60845_SHARP_){\nreturn debux.common.util.prepend_bars(p1__60845_SHARP_,indent_level);\n});})(res,result__$1,pprint))\n,debux.common.util.prepend_blanks(clojure.string.split.cljs$core$IFn$_invoke$arity$2(pprint,/\\n/))))], 0));\n\nreturn cljs.core.flush();\n});\ndebux.common.util.insert_blank_line = (function debux$common$util$insert_blank_line(){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\" \"], 0));\n\nreturn cljs.core.flush();\n});\ndebux.common.util.parse_opts = (function debux$common$util$parse_opts(opts){\nvar opts__$1 = opts;\nvar acc = cljs.core.PersistentArrayMap.EMPTY;\nwhile(true){\nvar f = cljs.core.first(opts__$1);\nvar s = cljs.core.second(opts__$1);\nif(cljs.core.empty_QMARK_(opts__$1)){\nreturn acc;\n} else {\nif(typeof f === 'number'){\nvar G__60962 = cljs.core.next(opts__$1);\nvar G__60963 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,new cljs.core.Keyword(null,\"n\",\"n\",562130025),f);\nopts__$1 = G__60962;\nacc = G__60963;\ncontinue;\n} else {\nif(typeof f === 'string'){\nvar G__60965 = cljs.core.next(opts__$1);\nvar G__60966 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,new cljs.core.Keyword(null,\"msg\",\"msg\",-1386103444),f);\nopts__$1 = G__60965;\nacc = G__60966;\ncontinue;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f,new cljs.core.Keyword(null,\"if\",\"if\",-458814265))){\nvar G__60968 = cljs.core.nnext(opts__$1);\nvar G__60969 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,new cljs.core.Keyword(null,\"condition\",\"condition\",1668437652),s);\nopts__$1 = G__60968;\nacc = G__60969;\ncontinue;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f,new cljs.core.Keyword(null,\"js\",\"js\",1768080579))){\nvar G__60972 = cljs.core.next(opts__$1);\nvar G__60973 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,new cljs.core.Keyword(null,\"js\",\"js\",1768080579),true);\nopts__$1 = G__60972;\nacc = G__60973;\ncontinue;\n} else {\nif(cljs.core.truth_((function (){var fexpr__60864 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"o\",\"o\",-1350007228),null,new cljs.core.Keyword(null,\"once\",\"once\",-262568523),null], null), null);\nreturn (fexpr__60864.cljs$core$IFn$_invoke$arity$1 ? fexpr__60864.cljs$core$IFn$_invoke$arity$1(f) : fexpr__60864.call(null,f));\n})())){\nvar G__60975 = cljs.core.next(opts__$1);\nvar G__60976 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,new cljs.core.Keyword(null,\"once\",\"once\",-262568523),true);\nopts__$1 = G__60975;\nacc = G__60976;\ncontinue;\n} else {\nif(cljs.core.truth_((function (){var fexpr__60865 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"s\",\"s\",1705939918),null,new cljs.core.Keyword(null,\"style\",\"style\",-496642736),null], null), null);\nreturn (fexpr__60865.cljs$core$IFn$_invoke$arity$1 ? fexpr__60865.cljs$core$IFn$_invoke$arity$1(f) : fexpr__60865.call(null,f));\n})())){\nvar G__60979 = cljs.core.nnext(opts__$1);\nvar G__60980 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,new cljs.core.Keyword(null,\"style\",\"style\",-496642736),s);\nopts__$1 = G__60979;\nacc = G__60980;\ncontinue;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f,new cljs.core.Keyword(null,\"clog\",\"clog\",954273629))){\nvar G__60981 = cljs.core.next(opts__$1);\nvar G__60982 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,new cljs.core.Keyword(null,\"clog\",\"clog\",954273629),true);\nopts__$1 = G__60981;\nacc = G__60982;\ncontinue;\n} else {\nreturn null;\n}\n}\n}\n}\n}\n}\n}\n}\nbreak;\n}\n});\ndebux.common.util.quote_val = (function debux$common$util$quote_val(p__60867){\nvar vec__60869 = p__60867;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60869,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60869,(1),null);\nreturn cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,k,null,(1),null)),(new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),null,(1),null)),(new cljs.core.List(null,v,null,(1),null))))),null,(1),null))))));\n});\ndebux.common.util.quote_vals = (function debux$common$util$quote_vals(m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(debux.common.util.quote_val,m));\n});\ndebux.common.util.include_recur_QMARK_ = (function debux$common$util$include_recur_QMARK_(form){\nvar G__60880 = new cljs.core.Symbol(null,\"recur\",\"recur\",1202958259,null);\nvar fexpr__60879 = (function (){var fexpr__60881 = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.set,cljs.core.flatten);\nreturn (fexpr__60881.cljs$core$IFn$_invoke$arity$1 ? fexpr__60881.cljs$core$IFn$_invoke$arity$1(form) : fexpr__60881.call(null,form));\n})();\nreturn (fexpr__60879.cljs$core$IFn$_invoke$arity$1 ? fexpr__60879.cljs$core$IFn$_invoke$arity$1(G__60880) : fexpr__60879.call(null,G__60880));\n});\ndebux.common.util.o_skip_QMARK_ = (function debux$common$util$o_skip_QMARK_(sym){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(\"debux.common.macro-specs\",\"o-skip\",\"debux.common.macro-specs/o-skip\",-1957530336,null),sym);\n});\ndebux.common.util.spy_first = (function debux$common$util$spy_first(result,quoted_form,indent){\nif(cljs.core.integer_QMARK_(indent)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"indent was not correctly replaced for form \",cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([quoted_form], 0)),\"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"].join(''),\"\\n\",\"(integer? indent)\"].join('')));\n}\n\ndebux.common.util.send_trace_BANG_(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),(function (){var G__60885 = quoted_form;\nvar G__60886 = new cljs.core.Symbol(null,\"dummy\",\"dummy\",-594669915,null);\nreturn (debux.common.util.remove_d.cljs$core$IFn$_invoke$arity$2 ? debux.common.util.remove_d.cljs$core$IFn$_invoke$arity$2(G__60885,G__60886) : debux.common.util.remove_d.call(null,G__60885,G__60886));\n})(),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result,new cljs.core.Keyword(null,\"indent-level\",\"indent-level\",-258835684),indent], null));\n\nreturn result;\n});\ndebux.common.util.spy_last = (function debux$common$util$spy_last(quoted_form,indent,result){\nif(cljs.core.integer_QMARK_(indent)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"indent was not correctly replaced for form \",cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([quoted_form], 0)),\"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"].join(''),\"\\n\",\"(integer? indent)\"].join('')));\n}\n\ndebux.common.util.send_trace_BANG_(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),(function (){var G__60894 = quoted_form;\nvar G__60895 = new cljs.core.Symbol(null,\"dummy\",\"dummy\",-594669915,null);\nreturn (debux.common.util.remove_d.cljs$core$IFn$_invoke$arity$2 ? debux.common.util.remove_d.cljs$core$IFn$_invoke$arity$2(G__60894,G__60895) : debux.common.util.remove_d.call(null,G__60894,G__60895));\n})(),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result,new cljs.core.Keyword(null,\"indent-level\",\"indent-level\",-258835684),indent], null));\n\nreturn result;\n});\ndebux.common.util.spy_comp = (function debux$common$util$spy_comp(quoted_form,indent,form){\nreturn (function() { \nvar G__60989__delegate = function (arg){\nvar result = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(form,arg);\nif(cljs.core.integer_QMARK_(indent)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"indent was not correctly replaced for form \",cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([quoted_form], 0)),\"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"].join(''),\"\\n\",\"(integer? indent)\"].join('')));\n}\n\ndebux.common.util.send_trace_BANG_(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),(function (){var G__60906 = quoted_form;\nvar G__60907 = new cljs.core.Symbol(null,\"dummy\",\"dummy\",-594669915,null);\nreturn (debux.common.util.remove_d.cljs$core$IFn$_invoke$arity$2 ? debux.common.util.remove_d.cljs$core$IFn$_invoke$arity$2(G__60906,G__60907) : debux.common.util.remove_d.call(null,G__60906,G__60907));\n})(),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result,new cljs.core.Keyword(null,\"indent-level\",\"indent-level\",-258835684),indent], null));\n\nreturn result;\n};\nvar G__60989 = function (var_args){\nvar arg = null;\nif (arguments.length > 0) {\nvar G__60992__i = 0, G__60992__a = new Array(arguments.length -  0);\nwhile (G__60992__i < G__60992__a.length) {G__60992__a[G__60992__i] = arguments[G__60992__i + 0]; ++G__60992__i;}\n  arg = new cljs.core.IndexedSeq(G__60992__a,0,null);\n} \nreturn G__60989__delegate.call(this,arg);};\nG__60989.cljs$lang$maxFixedArity = 0;\nG__60989.cljs$lang$applyTo = (function (arglist__60993){\nvar arg = cljs.core.seq(arglist__60993);\nreturn G__60989__delegate(arg);\n});\nG__60989.cljs$core$IFn$_invoke$arity$variadic = G__60989__delegate;\nreturn G__60989;\n})()\n;\n});\ndebux.common.util.debux_skip_symbol_QMARK_ = (function debux$common$util$debux_skip_symbol_QMARK_(sym){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Symbol(\"debux.common.macro-specs\",\"o-skip\",\"debux.common.macro-specs/o-skip\",-1957530336,null),null,new cljs.core.Symbol(\"debux.common.macro-specs\",\"skip\",\"debux.common.macro-specs/skip\",803221544,null),null,new cljs.core.Symbol(\"debux.common.macro-specs\",\"skip-outer\",\"debux.common.macro-specs/skip-outer\",1273084814,null),null], null), null),sym);\n});\ndebux.common.util.spy_first_QMARK_ = (function debux$common$util$spy_first_QMARK_(sym){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(\"debux.common.util\",\"spy-first\",\"debux.common.util/spy-first\",-2077157225,null),sym);\n});\ndebux.common.util.third = (function debux$common$util$third(coll){\nreturn cljs.core.first(cljs.core.next(cljs.core.next(coll)));\n});\ndebux.common.util.remove_d = (function debux$common$util$remove_d(form,d_sym){\nvar loc = debux.common.util.sequential_zip(form);\nwhile(true){\nvar node = clojure.zip.node(loc);\nif(clojure.zip.end_QMARK_(loc)){\nreturn clojure.zip.root(loc);\n} else {\nif(((cljs.core.seq_QMARK_(node)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(d_sym,cljs.core.first(node))) || (debux.common.util.debux_skip_symbol_QMARK_(cljs.core.first(node))) || (debux.common.util.spy_first_QMARK_(cljs.core.first(node))))))){\nvar G__60997 = clojure.zip.replace(loc,debux.common.util.third(node));\nloc = G__60997;\ncontinue;\n} else {\nif(((cljs.core.seq_QMARK_(node)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(\"debux.common.util\",\"spy-last\",\"debux.common.util/spy-last\",321778494,null),cljs.core.first(node))))){\nvar G__60999 = clojure.zip.replace(loc,cljs.core.last(node));\nloc = G__60999;\ncontinue;\n} else {\nvar G__61000 = clojure.zip.next(loc);\nloc = G__61000;\ncontinue;\n\n}\n}\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Utilities common for clojure and clojurescript","~:file","debux/common/util.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$react-flip-move","~$module$node_modules$react_flip_move$dist$react_flip_move_cjs","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$coll?"]],"~:name","~$debux.common.util","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.zip","^W","~$re-frame.trace","^X","~$cljs.core","^Y","~$goog","^Z","~$walk","~$clojure.walk","~$cljs.analyzer.api","^11","~$ana","^11","~$pp","^H","~$trace","^X","^H","^H","^G","^H","~$z","^W","^J","^J","~$str","~$clojure.string","^I","^J","^16","^16","^10","^10","~$repl","^J"],"~:seen",["^O",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^X","^X","^Y","^Y","^13","^H","^14","^X","^H","^H","^G","^H","^J","^J","^I","^J","^17","^J"],"~:form",["~#list",["~$ns","^R","Utilities common for clojure and clojurescript",["^1=",["~:refer-clojure","~:exclude",["^P"]]],["^1=",["^19",["^16","~:as","^15"],["^G","^1A","^13"],["^W","^1A","~$z"],["^10","^1A","^["],["^11","^1A","^12"],["^I","^1A","^17"],["^X","^1A","^14"]]]]],"~:flags",["^ ","^19",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^Z","^Y","^16","^H","^W","^10","^11","^J","^X"]],"^T","^R","~:resource-id",["~:shadow.build.classpath/resource","debux/common/util.cljc"],"~:compiled-at",1566016979799,"~:resource-name","debux/common/util.cljc","~:warnings",[],"~:source","(ns debux.common.util\n  \"Utilities common for clojure and clojurescript\"\n  (:refer-clojure :exclude [coll?])\n  (:require [clojure.string :as str]\n            [clojure.pprint :as pp]\n            [clojure.zip :as z]\n            [clojure.walk :as walk]\n            [cljs.analyzer.api :as ana]\n            [clojure.repl :as repl]\n            [re-frame.trace :as trace]))\n\n;;; zipper\n(defn sequential-zip [root]\n  (z/zipper sequential?\n            identity\n            (fn [x children]\n              (if (vector? x) (vec children) children))\n            root))\n\n(defn right-or-next [loc]\n  (if-let [right (z/right loc)]\n    ;; in case of (... (+ a b) c) or (... a b)\n    right\n    (if (sequential? (z/node loc))\n      (let [rightmost (-> loc z/down z/rightmost)]\n        (if (sequential? (z/node rightmost))\n          ;; in case of (... (+ a (* b c)))\n          (recur rightmost)\n\n          ;; in case of (... (+ a b))\n          (-> rightmost z/next)))\n\n      ;; in case of (... a)\n      (-> loc z/next))))\n\n\n;; Tidy up macroexpansions\n\n(def auto-gensym-pattern #\"(.*)__\\d+__auto__\")              ;; form#\n(def anon-gensym-pattern #\"G__\\d+\")                         ;; (gensym)\n(def named-gensym-pattern #\"(.*?)\\d{4,}\")                   ;; (gensym 'form), must match at least 4 numbers so we don't catch symbols with trailing numbers\n(def anon-param-pattern #\"p(\\d+)__\\d+#\")                    ;; #(%1 %2 %3)\n\n(defn form-tree-seq [form]\n  (tree-seq\n    sequential?\n    seq\n    form))\n\n(defn with-gensyms-names\n  \"Reverse gensym'd names to their original source form to make them easier to read.\"\n  [form mapping]\n  (let [gen-name (fn [result name]\n                   (if-not (contains? result (str name \"#\"))\n                     (str name \"#\")\n                     (->> (iterate inc 2)\n                          (map #(str name % \"#\"))\n                          (filter #(not (contains? result %)))\n                          (first))))\n        name-for (fn [result sym-name]\n                   (if-let [groups (re-matches auto-gensym-pattern sym-name)]\n                     (gen-name result (second groups))\n                     (if (re-matches anon-gensym-pattern sym-name)\n                       (gen-name result \"gensym\")\n                       (if-let [groups (re-matches named-gensym-pattern sym-name)]\n                         (gen-name result (second groups))\n                         (if-let [groups (re-matches anon-param-pattern sym-name)]\n                           (str \"%\" (second groups)))))))]\n    (reduce (fn [result sym-name]\n              (if (contains? result sym-name)\n                result\n                (if-let [new-name (name-for result sym-name)]\n                  (assoc result sym-name new-name)\n                  result)))\n            mapping\n            (->> (form-tree-seq form)\n                 (filter #(and (symbol? %) (nil? (namespace %))))\n                 (map name)))))\n\n(defn with-symbols-names\n  \"Tidy up fully qualified names that have aliases in the existing namespace.\"\n  ;; TODO: handle FQN's other than clojure.core\n  [form {:keys [context refers aliases] :as state} mapping]\n  (reduce (fn [result sym]\n            (if (= \"clojure.core\" (namespace sym))\n              (assoc result (pr-str sym) (name sym))\n              result))\n          mapping\n          (->> (form-tree-seq form)\n               ;; TODO: use qualified-symbol? once we are on Clojure 1.9\n               (filter #(and (symbol? %) (namespace %)))))\n\n  #_(reduce (fn [result sym]\n              (let [sym-ns (namespace sym)\n                    alias  (get aliases sym-ns)\n                    refers (get refers sym-ns)]\n                (cond\n                  ; Referred symbol, or from this ns\n                  (or (= :all (:refer refers))\n                      (contains? (:refer refers) (name sym))\n                      (= (context/namespace context) sym-ns))\n                  (assoc result (names/qualified-name sym) (name sym))\n                  ; Aliased symbol\n                  alias (assoc result (names/qualified-name sym) (str alias \\/ (name sym)))\n                  :else result)))\n            mapping\n            (->> (visible-tree-seq form)\n                 (filter #(and (psi/symbol? %) (namespace %))))))\n\n(defn tidy-macroexpanded-form\n  \"Takes a macroexpanded form and tidies it up to be more readable by\n  unmapping gensyms and replacing fully qualified namespaces with aliases\n  or nothing if the function is referred.\"\n  [form state]\n  ;; Mapping is a mapping of String:String which represent symbols\n  (let [mapping (->> {}\n                     (with-gensyms-names form)\n                     (with-symbols-names form state))]\n    (loop [loc (sequential-zip form)]\n      (if (z/end? loc)\n        (z/root loc)\n        (if (symbol? (z/node loc))\n          (recur (z/next (z/edit loc (fn [sym] (symbol (get mapping (pr-str sym) sym))))))\n          (recur (z/next loc)))))))\n\n;;\n\n(defn send-form! [form]\n  (trace/merge-trace! {:tags {:form form}}))\n\n(defn send-trace! [code-trace]\n  (let [code (get-in trace/*current-trace* [:tags :code] [])]\n    ;; TODO: also capture macroexpanded form? Might be useful in some cases?\n    (trace/merge-trace!\n      {:tags {:code (conj code {:form (tidy-macroexpanded-form (:form code-trace) {}) :result (:result code-trace) :indent-level (:indent-level code-trace)})}})))\n\n;;; For internal debugging\n(defmacro d\n  \"The internal macro to debug dbg macro.\n   <form any> a form to be evaluated\"\n  [form]\n  `(let [return# ~form]\n     (println \">> dbg_:\" (pr-str '~form) \"=>\\n\" (pr-str return#) \"<<\")\n     return#))\n\n\n;;; indent-level control\n(def indent-level* (atom 1))\n\n(defn reset-indent-level! []\n  (reset! indent-level* 1))\n\n\n;;; print-seq-length\n(def print-seq-length* (atom 100))\n\n(defn set-print-seq-length! [num]\n  (reset! print-seq-length* num))\n\n\n;;; general\n(defmacro read-source [sym]\n  `(-> (repl/source ~sym)\n       with-out-str\n       read-string))\n\n(defn cljs-env? [env]\n  (boolean (:ns env)))\n\n(defn vec->map\n  \"Transsub-forms a vector into an array-map with key/value pairs.\n  (def a 10)\n  (def b 20)\n  (vec-map [a b :c [30 40]])\n  => {:a 10 :b 20 ::c :c :[30 40] [30 40]}\"\n  [v]\n  (apply array-map\n         (mapcat (fn [elm]\n                   `[~(keyword (str elm)) ~elm])\n                 v)))\n\n(defn replace-& [v]\n  (walk/postwalk-replace {'& ''&} v))\n\n\n\n;;; symbol with namespace\n#?(:clj\n   (defn- var->symbol [v]\n     (let [m    (meta v)\n           ns   (str (ns-name (:ns m)))\n           name (str (:name m))]\n       (symbol ns name))))\n\n#?(:clj\n   (defn- ns-symbol-for-clj [sym]\n     (if-let [v (resolve sym)]\n       (var->symbol v)\n       sym)))\n\n#?(:clj\n   (defn- ns-symbol-for-cljs [sym env]\n     (if-let [meta (ana/resolve env sym)]\n       ;; normal symbol\n       (let [[ns name] (str/split (str (:name meta)) #\"/\")]\n         ;; The special symbol `.` must be handled in the following special symbol part.\n         ;; However, the special symbol `.` returns meta {:name / :ns nil}, which may be a bug.\n         (if (nil? ns)\n           sym\n           (symbol ns name)))\n       ;; special symbols except for `.`\n       sym)))\n\n#?(:clj\n   (defn ns-symbol [sym & [env]]\n     (if (symbol? sym)\n       (if (cljs-env? env)\n         (ns-symbol-for-cljs sym env)\n         (ns-symbol-for-clj sym))\n       sym)))\n\n\n;;; print\n(defn take-n-if-seq [n result]\n  (if (seq? result)\n    (take (or n @print-seq-length*) result)\n    result))\n\n(defn truncate [s]\n  (if (> (count s) 70)\n    (str (.substring s 0 70) \" ...\")\n    s))\n\n(defn- make-bars-\n  [times]\n  (apply str (repeat times \"|\")))\n\n(def make-bars (memoize make-bars-))\n\n(defn prepend-bars\n  [line indent-level]\n  (str (make-bars indent-level) \" \" line))\n\n(defn print-form-with-indent\n  [form indent-level]\n  ;; TODO: trace this information somehow\n  (println (prepend-bars form indent-level))\n  (flush))\n\n(defn form-header [form & [msg]]\n  (str (truncate (pr-str form))\n       (and msg (str \"   <\" msg \">\"))\n       \" =>\"))\n\n\n(defn prepend-blanks\n  [lines]\n  (mapv #(str \"  \" %) lines))\n\n(defn pprint-result-with-indent\n  [result indent-level]\n  ;; TODO: trace this information somehow\n  (let [res    result\n        result (with-out-str (pp/pprint res))\n        pprint (str/trim result)]\n    (println (->> (str/split pprint #\"\\n\")\n                  prepend-blanks\n                  (mapv #(prepend-bars % indent-level))\n                  (str/join \"\\n\")))\n    (flush)))\n\n(defn insert-blank-line []\n  (println \" \")\n  (flush))\n\n\n;;; parse options\n(defn parse-opts\n  [opts]\n  (loop [opts opts\n         acc  {}]\n    (let [f (first opts)\n          s (second opts)]\n      (cond\n        (empty? opts)\n        acc\n\n        (number? f)\n        (recur (next opts) (assoc acc :n f))\n\n        (string? f)\n        (recur (next opts) (assoc acc :msg f))\n\n        (= f :if)\n        (recur (nnext opts) (assoc acc :condition s))\n\n        ;;; for clojurescript\n        (= f :js)\n        (recur (next opts) (assoc acc :js true))\n\n        (#{:once :o} f)\n        (recur (next opts) (assoc acc :once true))\n\n        (#{:style :s} f)\n        (recur (nnext opts) (assoc acc :style s))\n\n        (= f :clog)\n        (recur (next opts) (assoc acc :clog true))))))\n\n\n;;; quote the value parts of a map\n(defn quote-val [[k v]]\n  `[~k '~v])\n\n(defn quote-vals [m]\n  (->> (map quote-val m)\n       (into {})))\n\n\n;;; for recur processing\n(defn include-recur? [form]\n  (((comp set flatten) form) 'recur))\n\n#?(:clj\n   (defn final-target? [sym targets env]\n     (let [ns-sym (ns-symbol sym env)]\n       (or (get targets ns-sym)\n           (some #(= % ns-sym)\n                 '[clojure.core/defn clojure.core/defn- clojure.core/fn\n                   cljs.core/defn cljs.core/defn- cljs.core/fn])))))\n\n(defn o-skip? [sym]\n  (= 'debux.common.macro-specs/o-skip sym))\n\n(declare remove-d)\n\n;;; spy functions\n(def spy-first\n  (fn [result quoted-form indent]\n    (assert (integer? indent) (str \"indent was not correctly replaced for form \" (prn-str quoted-form) \"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"))\n    (send-trace! {:form (remove-d quoted-form 'dummy) :result result :indent-level indent})\n    ;(print-form-with-indent (form-header quoted-form) indent)\n    ;(pprint-result-with-indent (take-n-if-seq 100 result) indent)\n    result))\n\n(def spy-last\n  (fn [quoted-form indent result]\n    (assert (integer? indent) (str \"indent was not correctly replaced for form \" (prn-str quoted-form) \"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"))\n    (send-trace! {:form (remove-d quoted-form 'dummy) :result result :indent-level indent})\n    ;(print-form-with-indent (form-header quoted-form) indent)\n    ;(pprint-result-with-indent (take-n-if-seq 100 result) indent)\n    result))\n\n(defn spy-comp [quoted-form indent form]\n  (fn [& arg]\n    (let [result (apply form arg)]\n      (assert (integer? indent) (str \"indent was not correctly replaced for form \" (prn-str quoted-form) \"\\nThis is a bug, please report it to https://github.com/Day8/re-frame-debux\"))\n      (send-trace! {:form (remove-d quoted-form 'dummy) :result result :indent-level indent})\n      ;(print-form-with-indent (form-header quoted-form) indent)\n      ;(pprint-result-with-indent (take-n-if-seq 100 result) indent)\n      result)))\n\n;; Remove trace info\n\n(defn debux-skip-symbol? [sym]\n  (contains? #{'debux.common.macro-specs/skip-outer\n               'debux.common.macro-specs/skip\n               'debux.common.macro-specs/o-skip}\n             sym))\n\n(defn spy-first? [sym]\n  (= 'debux.common.util/spy-first sym))\n\n(defn third [coll]\n  (first (next (next coll))))\n\n(defn remove-d [form d-sym]\n  ;; TODO: should we instead look to rewrite the quoted/spied forms\n  ;; at macro compile time, rather than filtering them out\n  ;; when the trace is being emitted?\n  (loop [loc (sequential-zip form)]\n    (let [node (z/node loc)]\n      ;(ut/d node)\n      (cond\n        (z/end? loc) (z/root loc)\n\n        ;; in case of (d ...)\n        (and (seq? node)\n             (or (= d-sym (first node))\n                 (debux-skip-symbol? (first node))\n                 (spy-first? (first node))))\n        ;; We take the third node, because the first two are\n        ;; (d <indent-level> ...)\n        (recur (z/replace loc (third node)))\n\n        ;; in case of spy-last\n        (and (seq? node)\n             (= `spy-last (first node)))\n        (recur (z/replace loc (last node)))\n\n        :else\n        (recur (z/next loc))))))\n","~:reader-features",["^O",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["debux.common.util/sequential-zip","root","clojure.zip/zipper","cljs.core/sequential?","cljs.core/identity","x","children","cljs.core/vector?","cljs.core/vec","debux.common.util/right-or-next","loc","temp__5733__auto__","right","clojure.zip/right","clojure.zip/node","rightmost","clojure.zip/down","clojure.zip/rightmost","clojure.zip/next","debux.common.util/auto-gensym-pattern","debux.common.util/anon-gensym-pattern","debux.common.util/named-gensym-pattern","debux.common.util/anon-param-pattern","debux.common.util/form-tree-seq","form","cljs.core/tree-seq","cljs.core/seq","debux.common.util/with-gensyms-names","mapping","gen-name","result","name","cljs.core/contains?","cljs.core/iterate","cljs.core/inc","p1__60803#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__60804#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/first","name-for","sym-name","groups","cljs.core/re-matches","cljs.core/second","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","new-name","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p1__60805#","cljs.core/Symbol","cljs.core/namespace","cljs.core/name","p__60816","map__60817","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","debux.common.util/with-symbols-names","context","refers","aliases","state","sym","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p1__60813#","and__4120__auto__","debux.common.util/tidy-macroexpanded-form","clojure.zip/end?","clojure.zip/root","clojure.zip/edit","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.get.cljs$core$IFn$_invoke$arity$3","debux.common.util/send-form!","re-frame.trace/is-trace-enabled?","new-trace__51563__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","re-frame.trace/*current-trace*","cljs.core/merge","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","debux.common.util/send-trace!","code-trace","code","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","debux.common.util/indent-level*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","debux.common.util/reset-indent-level!","cljs.core/reset!","debux.common.util/print-seq-length*","debux.common.util/set-print-seq-length!","num","debux.common.util/cljs-env?","env","cljs.core/boolean","debux.common.util/vec->map","v","cljs.core/array-map","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","elm","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","debux.common.util/replace-&","clojure.walk/postwalk-replace","debux.common.util/take-n-if-seq","n","cljs.core/seq?","cljs.core.take.cljs$core$IFn$_invoke$arity$2","or__4131__auto__","cljs.core/deref","debux.common.util/truncate","s","cljs.core/count","debux.common.util/make-bars-","times","cljs.core/str","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","debux.common.util/make-bars","cljs.core/memoize","debux.common.util/prepend-bars","line","indent-level","debux.common.util/print-form-with-indent","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core/flush","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","debux.common.util/form-header","p__60834","vec__60835","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq60831","G__60832","cljs.core/next","self__4717__auto__","msg","debux.common.util/prepend-blanks","lines","p1__60841#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","debux.common.util/pprint-result-with-indent","res","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__60850","cljs.core/*print-newline*","*print-fn*-orig-val__60851","cljs.core/*print-fn*","*print-newline*-temp-val__60852","*print-fn*-temp-val__60853","x__4662__auto__","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","pprint","clojure.string/trim","clojure.string.split.cljs$core$IFn$_invoke$arity$2","p1__60845#","clojure.string.join.cljs$core$IFn$_invoke$arity$2","debux.common.util/insert-blank-line","debux.common.util/parse-opts","opts","acc","f","cljs.core/empty?","cljs.core/nnext","fexpr__60864","fexpr__60865","p__60867","vec__60869","debux.common.util/quote-val","k","debux.common.util/quote-vals","m","cljs.core.into.cljs$core$IFn$_invoke$arity$2","debux.common.util/include-recur?","G__60880","fexpr__60879","fexpr__60881","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/set","cljs.core/flatten","debux.common.util/o-skip?","debux.common.util/spy-first","quoted-form","indent","js/Error","cljs.core/integer?","cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic","G__60885","G__60886","debux.common.util/remove-d","debux.common.util/spy-last","G__60894","G__60895","debux.common.util/spy-comp","arg","G__60906","G__60907","debux.common.util/debux-skip-symbol?","debux.common.util/spy-first?","debux.common.util/third","coll","d-sym","node","clojure.zip/replace","cljs.core/last"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1566006790000,1566006790000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^O",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1F","reagent/impl/batching.cljs"],[1540785317000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","^16"]]],["^1F","goog/dom/tagname.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","~$goog.dom.HtmlElement"]]],["^1F","cljs/spec/gen/alpha.cljs"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","~$goog.Uri"]]],["^1F","cljs/tools/reader/impl/utils.cljs"],[1532582253000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^16","~$goog.string"]]],["^1F","goog/math/math.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","~$goog.array","~$goog.asserts"]]],["^1F","goog/string/stringformat.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^24"]]],["^1F","cljs/env.cljc"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y"]]],["^1F","goog/labs/useragent/browser.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^25","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1F","re_frame/loggers.cljc"],[1564268405000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","~$clojure.set"]]],["^1F","goog/array/array.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^26"]]],["^1S","node_modules/prop-types/checkPropTypes.js"],[1566006790000,1566006790000,1549836454000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1F","reagent/impl/util.cljs"],[1540785317000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^1[","^20","^16"]]],["^1S","node_modules/fbjs/lib/emptyFunction.js"],[1566006790000,1566006790000,1528785402000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X"]]],["^1F","goog/debug/error.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z"]]],["^1F","cljs/tools/reader/edn.cljs"],[1532582253000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^24","~$goog.string.StringBuffer"]]],["^1S","node_modules/fbjs/lib/emptyObject.js"],[1566006790000,1566006790000,1528785402000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X"]]],["^1F","goog/dom/nodetype.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z"]]],["^1F","cljs/tools/reader/impl/inspect.cljs"],[1532582253000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y"]]],["^1F","cljs/pprint.cljs"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^16","^24","^2A"]]],["^1F","cljs/tools/reader.cljs"],[1532582253000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^2=","^2>","^2?","^2<","^25","^24","^2A"]]],["^1S","node_modules/scheduler/cjs/scheduler.development.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X"]]],["^1F","reagent/ratom.cljs"],[1540785317000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^21","^1[","~$reagent.impl.batching","^2:"]]],["^1S","node_modules/scheduler/cjs/scheduler.production.min.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X"]]],["^1F","re_frame/interop.cljs"],[1564268405000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1S","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X"]]],["^1S","node_modules/create-react-class/factory.js"],[1566006790000,1566006790000,1517346959000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^1S","node_modules/react/index.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1F","shadow/js.js"],[1566006790000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z"]]],["^1F","goog/object/object.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z"]]],["^1F","reagent/impl/template.cljs"],[1540785317000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^@","^16","^10","^21","~$reagent.impl.component","^2B","^2E","^20","^1["]]],["^1S","node_modules/react-dom/cjs/react-dom.production.min.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","^@","^2F","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1566006790000,1563067190000],["^1S","node_modules/react/cjs/react.development.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","^2F","~$module$node_modules$prop_types$checkPropTypes"]]],["^1F","goog/math/long.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^26","~$goog.reflect"]]],["^1F","goog/string/internal.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z"]]],["^1S","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X"]]],["^1S","node_modules/fbjs/lib/warning.js"],[1566006790000,1566006790000,1528785401000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1F","goog/functions/functions.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z"]]],["^1F","reagent/impl/component.cljs"],[1540785317000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^B","^@","^21","^2B","^2E","^20","^1["]]],["^1F","clojure/walk.cljs"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y"]]],["^1F","goog/structs/map.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1S","node_modules/scheduler/index.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1F","goog/labs/useragent/engine.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^25","^27","^24"]]],["^1F","cljs/reader.cljs"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^28","^2@","~$cljs.tools.reader.edn","^2A"]]],["^1F","goog/asserts/asserts.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1F","cljs/tagged_literals.cljc"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","~$cljs.reader"]]],["^1F","goog/uri/uri.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^25","^26","^24","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1S","node_modules/object-assign/index.js"],[1566006790000,1566006790000,1484580833000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X"]]],["^1F","debux/common/util.cljc"],[1566006788000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^16","^H","^W","^10","^11","^J","^X"]]],["^1F","cljs/spec/alpha.cljs"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^28","^10","~$cljs.spec.gen.alpha","^16"]]],["^1F","goog/base.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",[]]],["^1F","goog/structs/structs.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^25","^28"]]],["^1F","cljs/tools/reader/impl/errors.cljs"],[1532582253000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^2=","^16","~$cljs.tools.reader.impl.inspect"]]],["^1F","clojure/string.cljs"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^24","^2A"]]],["^1S","node_modules/create-react-class/index.js"],[1566006790000,1566006790000,1517346956000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","^@","~$module$node_modules$create_react_class$factory"]]],["^1S","node_modules/react/cjs/react.production.min.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","^2F"]]],["^1F","goog/debug/entrypointregistry.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^26"]]],["^1F","cljs/repl.cljs"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^L","^24","~$goog.string.format"]]],["^1F","goog/string/string.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^29"]]],["^1F","goog/reflect/reflect.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z"]]],["^1F","goog/labs/useragent/util.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^29"]]],["^1F","reagent/core.cljs"],[1540785317000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^@","~$reagent.impl.template","^2L","^21","^2B","^2E","^1[","^20","~$reagent.dom"]]],["^1F","clojure/zip.cljs"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y"]]],["^1F","goog/string/stringbuffer.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z"]]],["^1F","cljs/tools/reader/reader_types.cljs"],[1532582253000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^2>","^24","^2A"]]],["^1F","goog/iter/iter.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^25","^26","~$goog.functions","~$goog.math"]]],["^1F","goog/async/nexttick.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^39","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"]]],["^1F","reagent/dom.cljs"],[1540785317000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^D","^21","^37","^2B","^2E","^1[","^20"]]],["^1S","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1566006790000,1566006790000,1549571078000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X"]]],["^1F","cljs/tools/reader/impl/commons.cljs"],[1532582253000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^2<","^2=","^2>"]]],["^1F","reagent/interop.cljs"],[1540785317000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y"]]],["^1F","goog/dom/htmlelement.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z"]]],["^1F","cljs/core.cljs"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["~$goog.math.Long","~$goog.math.Integer","^24","^28","^25","^23","^2A"]]],["^1F","reagent/debug.cljs"],[1540785317000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y"]]],["^1F","cljs/analyzer/api.cljc"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","~$cljs.env","~$cljs.analyzer"]]],["^1F","goog/math/integer.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z"]]],["^1S","node_modules/scheduler/tracing.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1S","node_modules/react-dom/cjs/react-dom.development.js"],[1566006790000,1566006790000,499162500000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X","^@","^2F","^2O","^2M","~$module$node_modules$scheduler$tracing"]]],["^1F","clojure/set.cljs"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y"]]],["^1F","goog/uri/utils.js"],[1564811506000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^25","^26","^24"]]],["^1F","cljs/analyzer.cljc"],[1563067190000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","^24","^16","^2:","^3A","~$cljs.tagged-literals","^2@","^2=","^2Y"]]],["^1S","node_modules/fbjs/lib/invariant.js"],[1566006790000,1566006790000,1528785400000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^1X"]]],["^1F","re_frame/trace.cljc"],[1564268405000,"^1T",["^ ","^1U",null,"^1V",["^O",[]],"^1W",["^Z","^Y","~$re-frame.interop","~$re-frame.loggers","^39"]]]]],"~:clj-info",["^ ","jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/closure.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/re-frame/re-frame/0.10.8/re-frame-0.10.8.jar!/re_frame/interop.clj",1564268405000,"jar:file:/Users/rberger/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1563067196000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/cljs/tools/reader/reader_types.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/api.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1531525495000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/module_graph.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/repl.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/pprint.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1540785317000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/macros.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1541378006000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1540785317000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1540785317000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env/macros.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1540785317000,"jar:file:/Users/rberger/.m2/repository/re-frame/re-frame/0.10.8/re-frame-0.10.8.jar!/re_frame/trace.cljc",1564268405000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Utilities common for clojure and clojurescript","^7","debux/common/util.cljc","^8",1,"^9",5,"^:",1,"^;",22],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",null,"^N",["^O",["^P"]],"^Q","^R","^U",null,"^V",["^ ","^W","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^10","^11","^11","^12","^11","^13","^H","^14","^X","^H","^H","^G","^H","~$z","^W","^J","^J","^15","^16","^I","^J","^16","^16","^10","^10","^17","^J"],"^18",["^O",["^19"]],"~:shadow/js-access-global",["^O",["Error"]],"^1:",null,"~:defs",["^ ","~$third",["^ ","~:protocol-inline",null,"^5",["^ ","^7","debux/common/util.cljc","^8",374,"^9",7,"^:",374,"^;",12,"~:arglists",["^1=",["~$quote",["^1=",[["~$coll"]]]]]],"^Q","~$debux.common.util/third","^7","debux/common/util.cljc","^;",12,"~:method-params",["^1=",[["^4Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^1=",[null,null]],"^9",1,"~:variadic?",false,"^8",374,"~:ret-tag",["^O",["~$any","~$clj-nil"]],"^:",374,"~:max-fixed-arity",1,"~:fn-var",true,"^4O",["^1=",["^4P",["^1=",[["^4Q"]]]]]],"~$print-seq-length*",["^ ","^Q","~$debux.common.util/print-seq-length*","^7","debux/common/util.cljc","^8",155,"^9",1,"^:",155,"^;",23,"^5",["^ ","^7","debux/common/util.cljc","^8",155,"^9",6,"^:",155,"^;",23],"~:tag","~$cljs.core/Atom"],"~$cljs-env?",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",167,"^9",7,"^:",167,"^;",16,"^4O",["^1=",["^4P",["^1=",[["~$env"]]]]]],"^Q","~$debux.common.util/cljs-env?","^7","debux/common/util.cljc","^;",16,"^4S",["^1=",[["^55"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",167,"^4W","~$boolean","^:",167,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^55"]]]]]],"~$indent-level*",["^ ","^Q","~$debux.common.util/indent-level*","^7","debux/common/util.cljc","^8",148,"^9",1,"^:",148,"^;",19,"^5",["^ ","^7","debux/common/util.cljc","^8",148,"^9",6,"^:",148,"^;",19],"^52","^53"],"~$anon-gensym-pattern",["^ ","^Q","~$debux.common.util/anon-gensym-pattern","^7","debux/common/util.cljc","^8",40,"^9",1,"^:",40,"^;",25,"^5",["^ ","^7","debux/common/util.cljc","^8",40,"^9",6,"^:",40,"^;",25],"^52","^4X"],"~$remove-d",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",377,"^9",7,"^:",377,"^;",15,"^4O",["^1=",["^4P",["^1=",[["~$form","~$d-sym"]]]]]],"^Q","~$debux.common.util/remove-d","^7","debux/common/util.cljc","^;",15,"^4S",["^1=",[["^5=","^5>"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",377,"^4W","^4X","^:",377,"^4Z",2,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5=","^5>"]]]]]],"~$set-print-seq-length!",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",157,"^9",7,"^:",157,"^;",28,"^4O",["^1=",["^4P",["^1=",[["~$num"]]]]]],"^Q","~$debux.common.util/set-print-seq-length!","^7","debux/common/util.cljc","^;",28,"^4S",["^1=",[["^5A"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",157,"^4W",["^O",[null,"^4X"]],"^:",157,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5A"]]]]]],"~$auto-gensym-pattern",["^ ","^Q","~$debux.common.util/auto-gensym-pattern","^7","debux/common/util.cljc","^8",39,"^9",1,"^:",39,"^;",25,"^5",["^ ","^7","debux/common/util.cljc","^8",39,"^9",6,"^:",39,"^;",25],"^52","^4X"],"~$parse-opts",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",278,"^9",7,"^:",278,"^;",17,"^4O",["^1=",["^4P",["^1=",[["~$opts"]]]]]],"^Q","~$debux.common.util/parse-opts","^7","debux/common/util.cljc","^;",17,"^4S",["^1=",[["^5F"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",278,"^4W",["^O",["^4X","^4Y"]],"^:",278,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5F"]]]]]],"~$debux-skip-symbol?",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",365,"^9",7,"^:",365,"^;",25,"^4O",["^1=",["^4P",["^1=",[["~$sym"]]]]]],"^Q","~$debux.common.util/debux-skip-symbol?","^7","debux/common/util.cljc","^;",25,"^4S",["^1=",[["^5I"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",365,"^4W","^57","^:",365,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5I"]]]]]],"~$form-tree-seq",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",44,"^9",7,"^:",44,"^;",20,"^4O",["^1=",["^4P",["^1=",[["^5="]]]]]],"^Q","~$debux.common.util/form-tree-seq","^7","debux/common/util.cljc","^;",20,"^4S",["^1=",[["^5="]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",44,"^4W","~$cljs.core/LazySeq","^:",44,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5="]]]]]],"~$form-header",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",250,"^9",7,"^:",250,"^;",18,"^4O",["^1=",["^4P",["^1=",[["^5=","~$&",["~$msg"]]]]]],"~:top-fn",["^ ","^4V",true,"~:fixed-arity",1,"^4Z",1,"^4S",[["^1=",["^5=",["^5O"]]]],"^4O",["^1=",[["^5=","~$&",["^5O"]]]],"^4U",["^1=",[null]]]],"^Q","~$debux.common.util/form-header","^7","debux/common/util.cljc","^;",18,"^5P",["^ ","^4V",true,"^5Q",1,"^4Z",1,"^4S",[["^1=",["^5=",["^5O"]]]],"^4O",["^1=",[["^5=","~$&",["^5O"]]]],"^4U",["^1=",[null]]],"^4S",[["^1=",["^5=",["^5O"]]]],"^4T",null,"^5Q",1,"^4U",["^1=",[null]],"^9",1,"^4V",true,"~:methods",[["^ ","^5Q",1,"^4V",true,"^52","~$string"]],"^8",250,"^4W","^4X","^:",250,"^4Z",1,"^4[",true,"^4O",["^1=",[["^5=","~$&",["^5O"]]]]],"~$vec->map",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",170,"^9",7,"^:",170,"^;",15,"^4O",["^1=",["^4P",["^1=",[["~$v"]]]]],"^6","Transsub-forms a vector into an array-map with key/value pairs.\n  (def a 10)\n  (def b 20)\n  (vec-map [a b :c [30 40]])\n  => {:a 10 :b 20 ::c :c :[30 40] [30 40]}"],"^Q","~$debux.common.util/vec->map","^7","debux/common/util.cljc","^;",15,"^4S",["^1=",[["~$v"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",170,"^4W","^4X","^:",170,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["~$v"]]]]],"^6","Transsub-forms a vector into an array-map with key/value pairs.\n  (def a 10)\n  (def b 20)\n  (vec-map [a b :c [30 40]])\n  => {:a 10 :b 20 ::c :c :[30 40] [30 40]}"],"~$include-recur?",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",321,"^9",7,"^:",321,"^;",21,"^4O",["^1=",["^4P",["^1=",[["^5="]]]]]],"^Q","~$debux.common.util/include-recur?","^7","debux/common/util.cljc","^;",21,"^4S",["^1=",[["^5="]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",321,"^4W","^4X","^:",321,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5="]]]]]],"~$anon-param-pattern",["^ ","^Q","~$debux.common.util/anon-param-pattern","^7","debux/common/util.cljc","^8",42,"^9",1,"^:",42,"^;",24,"^5",["^ ","^7","debux/common/util.cljc","^8",42,"^9",6,"^:",42,"^;",24],"^52","^4X"],"~$make-bars-",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",234,"^9",8,"^:",234,"^;",18,"~:private",true,"^4O",["^1=",["^4P",["^1=",[["~$times"]]]]]],"^60",true,"^Q","~$debux.common.util/make-bars-","^7","debux/common/util.cljc","^;",18,"^4S",["^1=",[["^61"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",234,"^4W","^4X","^:",234,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^61"]]]]]],"~$insert-blank-line",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",272,"^9",7,"^:",272,"^;",24,"^4O",["^1=",["^4P",["^1=",[[]]]]]],"^Q","~$debux.common.util/insert-blank-line","^7","debux/common/util.cljc","^;",24,"^4S",["^1=",[[]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",272,"^4W","^4Y","^:",272,"^4Z",0,"^4[",true,"^4O",["^1=",["^4P",["^1=",[[]]]]]],"~$truncate",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",229,"^9",7,"^:",229,"^;",15,"^4O",["^1=",["^4P",["^1=",[["~$s"]]]]]],"^Q","~$debux.common.util/truncate","^7","debux/common/util.cljc","^;",15,"^4S",["^1=",[["~$s"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",229,"^4W",["^O",[null,"^5T"]],"^:",229,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["~$s"]]]]]],"~$send-trace!",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",131,"^9",7,"^:",131,"^;",18,"^4O",["^1=",["^4P",["^1=",[["~$code-trace"]]]]]],"^Q","~$debux.common.util/send-trace!","^7","debux/common/util.cljc","^;",18,"^4S",["^1=",[["^68"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",131,"^4W","^4Y","^:",131,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^68"]]]]]],"~$reset-indent-level!",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",150,"^9",7,"^:",150,"^;",26,"^4O",["^1=",["^4P",["^1=",[[]]]]]],"^Q","~$debux.common.util/reset-indent-level!","^7","debux/common/util.cljc","^;",26,"^4S",["^1=",[[]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",150,"^4W",["^O",[null,"^4X"]],"^:",150,"^4Z",0,"^4[",true,"^4O",["^1=",["^4P",["^1=",[[]]]]]],"~$spy-first",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",338,"^9",6,"^:",338,"^;",15],"^Q","~$debux.common.util/spy-first","^7","debux/common/util.cljc","^;",15,"^4S",["^1=",[["~$result","~$quoted-form","~$indent"]]],"^4T",null,"^4U",["^1=",[]],"^9",1,"^4V",false,"^8",338,"^:",338,"^4Z",3,"^4[",true,"^4O",null],"~$quote-vals",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",315,"^9",7,"^:",315,"^;",17,"^4O",["^1=",["^4P",["^1=",[["~$m"]]]]]],"^Q","~$debux.common.util/quote-vals","^7","debux/common/util.cljc","^;",17,"^4S",["^1=",[["~$m"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",315,"^4W",["^O",[null,"~$clj","^4X"]],"^:",315,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["~$m"]]]]]],"~$pprint-result-with-indent",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",260,"^9",7,"^:",260,"^;",32,"^4O",["^1=",["^4P",["^1=",[["^6>","~$indent-level"]]]]]],"^Q","~$debux.common.util/pprint-result-with-indent","^7","debux/common/util.cljc","^;",32,"^4S",["^1=",[["^6>","^6E"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",260,"^4W","^4Y","^:",260,"^4Z",2,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^6>","^6E"]]]]]],"~$spy-first?",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",371,"^9",7,"^:",371,"^;",17,"^4O",["^1=",["^4P",["^1=",[["^5I"]]]]]],"^Q","~$debux.common.util/spy-first?","^7","debux/common/util.cljc","^;",17,"^4S",["^1=",[["^5I"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",371,"^4W","^57","^:",371,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5I"]]]]]],"~$print-form-with-indent",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",244,"^9",7,"^:",244,"^;",29,"^4O",["^1=",["^4P",["^1=",[["^5=","^6E"]]]]]],"^Q","~$debux.common.util/print-form-with-indent","^7","debux/common/util.cljc","^;",29,"^4S",["^1=",[["^5=","^6E"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",244,"^4W","^4Y","^:",244,"^4Z",2,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5=","^6E"]]]]]],"~$spy-last",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",346,"^9",6,"^:",346,"^;",14],"^Q","~$debux.common.util/spy-last","^7","debux/common/util.cljc","^;",14,"^4S",["^1=",[["^6?","^6@","^6>"]]],"^4T",null,"^4U",["^1=",[]],"^9",1,"^4V",false,"^8",346,"^:",346,"^4Z",3,"^4[",true,"^4O",null],"~$prepend-bars",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",240,"^9",7,"^:",240,"^;",19,"^4O",["^1=",["^4P",["^1=",[["~$line","^6E"]]]]]],"^Q","~$debux.common.util/prepend-bars","^7","debux/common/util.cljc","^;",19,"^4S",["^1=",[["^6N","^6E"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",240,"^4W","^5T","^:",240,"^4Z",2,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^6N","^6E"]]]]]],"~$replace-&",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",182,"^9",7,"^:",182,"^;",16,"^4O",["^1=",["^4P",["^1=",[["~$v"]]]]]],"^Q","~$debux.common.util/replace-&","^7","debux/common/util.cljc","^;",16,"^4S",["^1=",[["~$v"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",182,"^4W","^4X","^:",182,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["~$v"]]]]]],"~$make-bars",["^ ","^Q","~$debux.common.util/make-bars","^7","debux/common/util.cljc","^8",238,"^9",1,"^:",238,"^;",15,"^5",["^ ","^7","debux/common/util.cljc","^8",238,"^9",6,"^:",238,"^;",15],"^52","~$function"],"~$named-gensym-pattern",["^ ","^Q","~$debux.common.util/named-gensym-pattern","^7","debux/common/util.cljc","^8",41,"^9",1,"^:",41,"^;",26,"^5",["^ ","^7","debux/common/util.cljc","^8",41,"^9",6,"^:",41,"^;",26],"^52","^4X"],"~$prepend-blanks",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",256,"^9",7,"^:",256,"^;",21,"^4O",["^1=",["^4P",["^1=",[["~$lines"]]]]]],"^Q","~$debux.common.util/prepend-blanks","^7","debux/common/util.cljc","^;",21,"^4S",["^1=",[["^6X"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",256,"^4W","^6C","^:",256,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^6X"]]]]]],"~$right-or-next",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",20,"^9",7,"^:",20,"^;",20,"^4O",["^1=",["^4P",["^1=",[["~$loc"]]]]]],"^Q","~$debux.common.util/right-or-next","^7","debux/common/util.cljc","^;",20,"^4S",["^1=",[["^6["]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",20,"^4W",["^O",[null,"^6C","~$cljs.core/IVector","^4X","~$cljs.core/MetaFn"]],"^:",20,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^6["]]]]]],"~$o-skip?",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",332,"^9",7,"^:",332,"^;",14,"^4O",["^1=",["^4P",["^1=",[["^5I"]]]]]],"^Q","~$debux.common.util/o-skip?","^7","debux/common/util.cljc","^;",14,"^4S",["^1=",[["^5I"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",332,"^4W","^57","^:",332,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5I"]]]]]],"~$quote-val",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",312,"^9",7,"^:",312,"^;",16,"^4O",["^1=",["^4P",["^1=",[[["~$k","~$v"]]]]]]],"^Q","~$debux.common.util/quote-val","^7","debux/common/util.cljc","^;",16,"^4S",["^1=",[["~$p__60867"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",312,"^4W",["^O",["^6C","^71","^4X","^72","^4Y"]],"^:",312,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[[["~$k","~$v"]]]]]]],"~$tidy-macroexpanded-form",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",110,"^9",7,"^:",110,"^;",30,"^4O",["^1=",["^4P",["^1=",[["^5=","~$state"]]]]],"^6","Takes a macroexpanded form and tidies it up to be more readable by\n  unmapping gensyms and replacing fully qualified namespaces with aliases\n  or nothing if the function is referred."],"^Q","~$debux.common.util/tidy-macroexpanded-form","^7","debux/common/util.cljc","^;",30,"^4S",["^1=",[["^5=","^79"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",110,"^4W","^4X","^:",110,"^4Z",2,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5=","^79"]]]]],"^6","Takes a macroexpanded form and tidies it up to be more readable by\n  unmapping gensyms and replacing fully qualified namespaces with aliases\n  or nothing if the function is referred."],"~$sequential-zip",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",13,"^9",7,"^:",13,"^;",21,"^4O",["^1=",["^4P",["^1=",[["~$root"]]]]]],"^Q","~$debux.common.util/sequential-zip","^7","debux/common/util.cljc","^;",21,"^4S",["^1=",[["^7<"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",13,"^4W","^4X","^:",13,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^7<"]]]]]],"~$spy-comp",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",354,"^9",7,"^:",354,"^;",15,"^4O",["^1=",["^4P",["^1=",[["^6?","^6@","^5="]]]]]],"^Q","~$debux.common.util/spy-comp","^7","debux/common/util.cljc","^;",15,"^4S",["^1=",[["^6?","^6@","^5="]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",354,"^4W","^6T","^:",354,"^4Z",3,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^6?","^6@","^5="]]]]]],"~$with-symbols-names",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",80,"^9",7,"^:",80,"^;",25,"^4O",["^1=",["^4P",["^1=",[["^5=",["^ ","~:keys",["~$context","~$refers","~$aliases"],"^1A","^79"],"~$mapping"]]]]],"^6","Tidy up fully qualified names that have aliases in the existing namespace."],"^Q","~$debux.common.util/with-symbols-names","^7","debux/common/util.cljc","^;",25,"^4S",["^1=",[["^5=","~$p__60816","^7E"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",80,"^4W",["^O",[null,"^4X"]],"^:",80,"^4Z",3,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5=",["^ ","^7A",["^7B","^7C","^7D"],"^1A","^79"],"^7E"]]]]],"^6","Tidy up fully qualified names that have aliases in the existing namespace."],"~$send-form!",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",128,"^9",7,"^:",128,"^;",17,"^4O",["^1=",["^4P",["^1=",[["^5="]]]]]],"^Q","~$debux.common.util/send-form!","^7","debux/common/util.cljc","^;",17,"^4S",["^1=",[["^5="]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",128,"^4W","^4Y","^:",128,"^4Z",1,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5="]]]]]],"~$take-n-if-seq",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",224,"^9",7,"^:",224,"^;",20,"^4O",["^1=",["^4P",["^1=",[["~$n","^6>"]]]]]],"^Q","~$debux.common.util/take-n-if-seq","^7","debux/common/util.cljc","^;",20,"^4S",["^1=",[["~$n","^6>"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",224,"^4W",["^O",[null,"^5M"]],"^:",224,"^4Z",2,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["~$n","^6>"]]]]]],"~$with-gensyms-names",["^ ","^4N",null,"^5",["^ ","^7","debux/common/util.cljc","^8",50,"^9",7,"^:",50,"^;",25,"^4O",["^1=",["^4P",["^1=",[["^5=","^7E"]]]]],"^6","Reverse gensym'd names to their original source form to make them easier to read."],"^Q","~$debux.common.util/with-gensyms-names","^7","debux/common/util.cljc","^;",25,"^4S",["^1=",[["^5=","^7E"]]],"^4T",null,"^4U",["^1=",[null,null]],"^9",1,"^4V",false,"^8",50,"^4W",["^O",[null,"^4X"]],"^:",50,"^4Z",2,"^4[",true,"^4O",["^1=",["^4P",["^1=",[["^5=","^7E"]]]]],"^6","Reverse gensym'd names to their original source form to make them easier to read."]],"^1;",["^ ","^X","^X","^Y","^Y","^13","^H","^14","^X","^H","^H","^G","^H","^J","^J","^I","^J","^17","^J"],"~:cljs.analyzer/constants",["^ ","^18",["^O",["~$debux.common.macro-specs/o-skip","~$&","~:tags","^1","~:o","~$dummy","~:else","~:if","~$debux.common.macro-specs/skip","^T","~:n","~:refers","~:msg","~$debux.common.macro-specs/skip-outer","~:s","~:style","~$recur","~:result","~:condition","~:once","~:code","^6=","~:context","^1<","~:aliases","^4P","~:indent-level","~:clog","^6L"]],"~:order",["^82","^7U","^83","^7P","^1<","^81","^7Z","^84","^T","~$&","^4P","~:n","^7V","^7S","^7[","^1","~:o","^80","~:s","^7X","^85","^7Y","^7O","^7Q","^7T","^7W","^6=","^6L","^7R"]],"^1B",["^ ","^19",["^O",[]]],"^1C",["^ "],"^1D",["^Z","^Y","^16","^H","^W","^10","^11","^J","^X"]],"^T","^R","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1R",[["^89","~:static-fns"],true,["^89","~:elide-asserts"],false,["^89","~:optimize-constants"],null,["^89","^1I"],null,["^89","~:external-config"],null,["^89","~:tooling-config"],null,["^89","~:emit-constants"],null,["^89","~:load-tests"],null,["^89","~:infer-externs"],true,["^89","^1K"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^89","~:fn-invoke-direct"],null,["^89","~:source-map"],"/dev/null"]]]