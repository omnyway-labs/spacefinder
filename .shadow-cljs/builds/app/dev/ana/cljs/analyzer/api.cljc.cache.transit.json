["^ ","~:output",["^ ","~:js","goog.provide('cljs.analyzer.api');\ngoog.require('cljs.core');\ngoog.require('cljs.env');\ngoog.require('cljs.analyzer');\n/**\n * Creates an empty compilation state Atom<Map>.\n */\ncljs.analyzer.api.empty_state = (function cljs$analyzer$api$empty_state(){\nreturn cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0();\n});\n/**\n * Creates an empty analysis environment.\n */\ncljs.analyzer.api.empty_env = (function cljs$analyzer$api$empty_env(){\nreturn cljs.analyzer.empty_env();\n});\n/**\n * Test if the given warning-type is enabled.\n */\ncljs.analyzer.api.warning_enabled_QMARK_ = (function cljs$analyzer$api$warning_enabled_QMARK_(warning_type){\nreturn (cljs.analyzer._STAR_cljs_warnings_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.analyzer._STAR_cljs_warnings_STAR_.cljs$core$IFn$_invoke$arity$1(warning_type) : cljs.analyzer._STAR_cljs_warnings_STAR_.call(null,warning_type));\n});\n/**\n * The default warning handler.\n * \n * Outputs the warning messages to *err*.\n */\ncljs.analyzer.api.default_warning_handler = (function cljs$analyzer$api$default_warning_handler(warning_type,env,extra){\nreturn cljs.analyzer.default_warning_handler(warning_type,env,extra);\n});\n/**\n * Return the compiler options from compiler state.\n */\ncljs.analyzer.api.get_options = (function cljs$analyzer$api$get_options(var_args){\nvar G__60673 = arguments.length;\nswitch (G__60673) {\ncase 0:\nreturn cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1(cljs.env._STAR_compiler_STAR_);\n});\n\ncljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1 = (function (state){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(null,\"options\",\"options\",99638489));\n});\n\ncljs.analyzer.api.get_options.cljs$lang$maxFixedArity = 1;\n\n/**\n * Return the currently computed Google Closure js dependency index from the\n *   compiler state.\n */\ncljs.analyzer.api.get_js_index = (function cljs$analyzer$api$get_js_index(var_args){\nvar G__60689 = arguments.length;\nswitch (G__60689) {\ncase 0:\nreturn cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1(cljs.env._STAR_compiler_STAR_);\n});\n\ncljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$1 = (function (state){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(null,\"js-dependency-index\",\"js-dependency-index\",-1887042131));\n});\n\ncljs.analyzer.api.get_js_index.cljs$lang$maxFixedArity = 1;\n\n/**\n * Given an analysis environment resolve a var. Analogous to\n * clojure.core/resolve\n */\ncljs.analyzer.api.resolve = (function cljs$analyzer$api$resolve(env,sym){\nif(cljs.core.map_QMARK_(env)){\n} else {\nthrow (new Error(\"Assert failed: (map? env)\"));\n}\n\nif((sym instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? sym)\"));\n}\n\ntry{var _STAR_private_var_access_nowarn_STAR__orig_val__60739 = cljs.analyzer._STAR_private_var_access_nowarn_STAR_;\nvar _STAR_private_var_access_nowarn_STAR__temp_val__60740 = true;\ncljs.analyzer._STAR_private_var_access_nowarn_STAR_ = _STAR_private_var_access_nowarn_STAR__temp_val__60740;\n\ntry{return cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$3(env,sym,cljs.analyzer.confirm_var_exists_throw());\n}finally {cljs.analyzer._STAR_private_var_access_nowarn_STAR_ = _STAR_private_var_access_nowarn_STAR__orig_val__60739;\n}}catch (e60730){var e = e60730;\nreturn cljs.analyzer.resolve_macro_var(env,sym);\n}});\n/**\n * Return all namespaces. Analagous to clojure.core/all-ns but\n *   returns symbols identifying namespaces not Namespace instances.\n */\ncljs.analyzer.api.all_ns = (function cljs$analyzer$api$all_ns(var_args){\nvar G__60750 = arguments.length;\nswitch (G__60750) {\ncase 0:\nreturn cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1(cljs.env._STAR_compiler_STAR_);\n});\n\ncljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1 = (function (state){\nreturn cljs.core.keys(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927)));\n});\n\ncljs.analyzer.api.all_ns.cljs$lang$maxFixedArity = 1;\n\n/**\n * Given a namespace return the corresponding namespace analysis map. Analagous\n *   to clojure.core/find-ns.\n */\ncljs.analyzer.api.find_ns = (function cljs$analyzer$api$find_ns(var_args){\nvar G__60769 = arguments.length;\nswitch (G__60769) {\ncase 1:\nreturn cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$1 = (function (sym){\nreturn cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,sym);\n});\n\ncljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2 = (function (state,sym){\nif((sym instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? sym)\"));\n}\n\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),sym], null));\n});\n\ncljs.analyzer.api.find_ns.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a namespace return all the var analysis maps. Analagous to\n *   clojure.core/ns-interns but returns var analysis maps not vars.\n */\ncljs.analyzer.api.ns_interns = (function cljs$analyzer$api$ns_interns(var_args){\nvar G__60777 = arguments.length;\nswitch (G__60777) {\ncase 1:\nreturn cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,ns);\n});\n\ncljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2 = (function (state,ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"macros\",\"macros\",811339431)], null)),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"defs\",\"defs\",1398449717)], null))], 0));\n});\n\ncljs.analyzer.api.ns_interns.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a namespace return all the public var analysis maps. Analagous to\n *   clojure.core/ns-publics but returns var analysis maps not vars.\n */\ncljs.analyzer.api.ns_publics = (function cljs$analyzer$api$ns_publics(var_args){\nvar G__60780 = arguments.length;\nswitch (G__60780) {\ncase 1:\nreturn cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,ns);\n});\n\ncljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2 = (function (state,ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p__60782){\nvar vec__60784 = p__60782;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60784,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60784,(1),null);\nreturn new cljs.core.Keyword(null,\"private\",\"private\",-558947994).cljs$core$IFn$_invoke$arity$1(v);\n}),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"macros\",\"macros\",811339431)], null)),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"defs\",\"defs\",1398449717)], null))], 0))));\n});\n\ncljs.analyzer.api.ns_publics.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a namespace and a symbol return the corresponding var analysis map.\n *   Analagous to clojure.core/ns-resolve but returns var analysis map not Var.\n */\ncljs.analyzer.api.ns_resolve = (function cljs$analyzer$api$ns_resolve(var_args){\nvar G__60790 = arguments.length;\nswitch (G__60790) {\ncase 2:\nreturn cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$2 = (function (ns,sym){\nreturn cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3(cljs.env._STAR_compiler_STAR_,ns,sym);\n});\n\ncljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3 = (function (state,ns,sym){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nif((sym instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? sym)\"));\n}\n\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927),ns,new cljs.core.Keyword(null,\"defs\",\"defs\",1398449717),sym], null));\n});\n\ncljs.analyzer.api.ns_resolve.cljs$lang$maxFixedArity = 3;\n\n/**\n * Removes the namespace named by the symbol.\n */\ncljs.analyzer.api.remove_ns = (function cljs$analyzer$api$remove_ns(var_args){\nvar G__60792 = arguments.length;\nswitch (G__60792) {\ncase 1:\nreturn cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2(cljs.env._STAR_compiler_STAR_,ns);\n});\n\ncljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2 = (function (state,ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(state,cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"cljs.analyzer\",\"namespaces\",\"cljs.analyzer/namespaces\",-260788927)], null),cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ns], 0));\n});\n\ncljs.analyzer.api.remove_ns.cljs$lang$maxFixedArity = 2;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.","~:file","cljs/analyzer/api.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$react-flip-move","~$module$node_modules$react_flip_move$dist$react_flip_move_cjs","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$find-ns","~$remove-ns","~$ns-publics","~$ns-resolve","~$ns-interns","~$all-ns","~$resolve"]],"~:name","~$cljs.analyzer.api","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.env","^11","~$env","^11","~$cljs.analyzer","^13","~$ana","^13","~$cljs.core","^15","~$goog","^16"],"~:seen",["^O",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^15","^15"],"~:form",["~#list",["~$ns","^X","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.",["^1<",["~:refer-clojure","~:exclude",["^U","^T","^S","^V","^P","^R","^Q"]]],["^1<",["^18",["^11","~:as","^12"],["^13","^1@","^14"]]]]],"~:flags",["^ ","^18",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^16","^15","^11","^13"]],"^Z","^X","~:resource-id",["~:shadow.build.classpath/resource","cljs/analyzer/api.cljc"],"~:compiled-at",1566016979618,"~:resource-name","cljs/analyzer/api.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.analyzer.api\n  \"This is intended to be a stable api for those who need programmatic access\n  to the analyzer.\"\n  (:refer-clojure :exclude [all-ns ns-interns ns-resolve resolve find-ns\n                            ns-publics remove-ns])\n  (:require [cljs.env :as env]\n            [cljs.analyzer :as ana]))\n\n;; =============================================================================\n;; Useful Utilities\n\n(defn empty-state\n  \"Creates an empty compilation state Atom<Map>.\"\n  []\n  (env/default-compiler-env))\n\n(defmacro with-state\n  \"Run the body with the given compilation state Atom<Map>.\"\n  [state body]\n  `(env/with-compiler-env ~state\n     ~@body))\n\n(defn empty-env\n  \"Creates an empty analysis environment.\"\n  []\n  (ana/empty-env))\n\n(defmacro no-warn\n  \"Disable analyzer warnings for any analysis executed in body.\"\n  [& body]\n  (let [no-warnings (zipmap (keys ana/*cljs-warnings*) (repeat false))]\n    `(binding [ana/*cljs-warnings* ~no-warnings]\n       ~@body)))\n\n(defn warning-enabled?\n  \"Test if the given warning-type is enabled.\"\n  [warning-type]\n  (ana/*cljs-warnings* warning-type))\n\n(defn default-warning-handler\n  \"The default warning handler.\n\n   Outputs the warning messages to *err*.\"\n  [warning-type env extra]\n  (ana/default-warning-handler warning-type env extra))\n\n(defn get-options\n  \"Return the compiler options from compiler state.\"\n  ([] (get-options env/*compiler*))\n  ([state]\n   (get @state :options)))\n\n(defn get-js-index\n  \"Return the currently computed Google Closure js dependency index from the\n  compiler state.\"\n  ([] (get-options env/*compiler*))\n  ([state]\n   (get @state :js-dependency-index)))\n\n#?(:clj\n   (defn analyze\n     \"Given an environment, a map containing {:locals (mapping of names to bindings), :context\n     (one of :statement, :expr, :return), :ns (a symbol naming the\n     compilation ns)}, and form, returns an expression object (a map\n     containing at least :form, :op and :env keys). If expr has any (immediately)\n     nested exprs, must have :children entry. This must be a vector of keywords naming\n     the immediately nested fields mapped to an expr or vector of exprs. This will\n     facilitate code walking without knowing the details of the op set.\"\n     ([env form] (analyze env form nil))\n     ([env form name] (analyze env form name nil))\n     ([env form name opts]\n      (analyze\n        (if-not (nil? env/*compiler*)\n          env/*compiler*\n          (env/default-compiler-env opts))\n        env form name opts))\n     ([state env form name opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze env form name opts))))))\n\n#?(:clj\n   (defn forms-seq\n     \"Seq of Clojure/ClojureScript forms from rdr, a java.io.Reader. Optionally\n     accepts a filename argument which will be used in any emitted errors.\"\n     ([rdr] (ana/forms-seq* rdr nil))\n     ([rdr filename] (ana/forms-seq* rdr filename))))\n\n#?(:clj\n   (defn parse-ns\n     \"Helper for parsing only the essential namespace information from a\n      ClojureScript source file and returning a cljs.closure/IJavaScript compatible\n      map _not_ a namespace AST node.\n   \n      By default does not load macros or perform any analysis of dependencies. If\n      opts parameter provided :analyze-deps and :load-macros keys their values will\n      be used for *analyze-deps* and *load-macros* bindings respectively. This\n      function does _not_ side-effect the ambient compilation environment unless\n      requested via opts where :restore is false.\"\n     ([src] (parse-ns src nil nil))\n     ([src opts] (parse-ns src nil opts))\n     ([src dest opts]\n      (parse-ns\n        (if-not (nil? env/*compiler*)\n          env/*compiler*\n          (env/default-compiler-env opts))\n        src dest opts))\n     ([state src dest opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/parse-ns src dest opts))))))\n#?(:clj\n   (defn analyze-file\n     \"Given a java.io.File, java.net.URL or a string identifying a resource on the\n      classpath attempt to analyze it.\n   \n      This function side-effects the ambient compilation environment\n      `cljs.env/*compiler*` to aggregate analysis information. opts argument is\n      compiler options, if :cache-analysis true will cache analysis to\n      \\\":output-dir/some/ns/foo.cljs.cache.edn\\\". This function does not return a\n      meaningful value.\"\n     ([f] (analyze-file f nil))\n     ([f opts]\n      (analyze-file\n        (if-not (nil? env/*compiler*)\n          env/*compiler*\n          (env/default-compiler-env opts))\n        f opts))\n     ([state f opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze-file f opts))))))\n\n;; =============================================================================\n;; Main API\n\n(defn resolve\n  \"Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve\"\n  [env sym]\n  {:pre [(map? env) (symbol? sym)]}\n  (try\n    (binding [ana/*private-var-access-nowarn* true]\n      (ana/resolve-var env sym\n        (ana/confirm-var-exists-throw)))\n    (catch #?(:clj Exception :cljs :default) e\n      (ana/resolve-macro-var env sym))))\n\n(defn all-ns\n  \"Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.\"\n  ([]\n   (all-ns env/*compiler*))\n  ([state]\n   (keys (get @state ::ana/namespaces))))\n\n(defn find-ns\n  \"Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.\"\n  ([sym]\n   (find-ns env/*compiler* sym))\n  ([state sym]\n   {:pre [(symbol? sym)]}\n   (get-in @state [::ana/namespaces sym])))\n\n(defn ns-interns\n  \"Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-interns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (merge\n     (get-in @state [::ana/namespaces ns :macros])\n     (get-in @state [::ana/namespaces ns :defs]))))\n\n(defn ns-publics\n  \"Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-publics env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (->> (merge\n          (get-in @state [::ana/namespaces ns :macros])\n          (get-in @state [::ana/namespaces ns :defs]))\n        (remove (fn [[k v]] (:private v)))\n        (into {}))))\n\n(defn ns-resolve\n  \"Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.\"\n  ([ns sym]\n   (ns-resolve env/*compiler* ns sym))\n  ([state ns sym]\n   {:pre [(symbol? ns) (symbol? sym)]}\n   (get-in @state [::ana/namespaces ns :defs sym])))\n\n(defn remove-ns\n  \"Removes the namespace named by the symbol.\"\n  ([ns]\n   (remove-ns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (swap! state update-in [::ana/namespaces] dissoc ns)))\n\n(defmacro in-cljs-user\n  \"Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body.\"\n  [env & body]\n  `(binding [cljs.analyzer/*cljs-ns* 'cljs.user]\n     (cljs.env/with-compiler-env ~env\n       ~@body)))\n","~:reader-features",["^O",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["cljs.analyzer.api/empty-state","cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0","cljs.analyzer.api/empty-env","cljs.analyzer/empty-env","cljs.analyzer.api/warning-enabled?","warning-type","cljs.analyzer/*cljs-warnings*","cljs.analyzer.api/default-warning-handler","env","extra","cljs.analyzer/default-warning-handler","var_args","G__60673","cljs.analyzer.api/get-options","js/Error","cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1","cljs.env/*compiler*","state","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__60689","cljs.analyzer.api/get-js-index","cljs.analyzer.api/resolve","sym","cljs.core/map?","cljs.core/Symbol","e60730","*private-var-access-nowarn*-orig-val__60739","*private-var-access-nowarn*-temp-val__60740","cljs.analyzer/*private-var-access-nowarn*","cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$3","cljs.analyzer/confirm-var-exists-throw","e","cljs.analyzer/resolve-macro-var","G__60750","cljs.analyzer.api/all-ns","cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1","cljs.core/keys","G__60769","cljs.analyzer.api/find-ns","cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__60777","cljs.analyzer.api/ns-interns","ns","cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__60780","cljs.analyzer.api/ns-publics","cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__60782","vec__60784","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core.into.cljs$core$IFn$_invoke$arity$2","G__60790","cljs.analyzer.api/ns-resolve","cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3","G__60792","cljs.analyzer.api/remove-ns","cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/dissoc"]]],"~:cache-keys",["~#cmap",[["^1E","cljs/tools/reader/impl/utils.cljs"],[1532582253000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^O",[]],"~:deps-syms",["^16","^15","~$clojure.string","~$goog.string"]]],["^1E","goog/math/math.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","~$goog.array","~$goog.asserts"]]],["^1E","cljs/env.cljc"],[1563067190000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15"]]],["^1E","goog/array/array.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^1Y"]]],["^1E","goog/debug/error.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16"]]],["^1E","cljs/tools/reader/edn.cljs"],[1532582253000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1W","~$goog.string.StringBuffer"]]],["^1E","goog/dom/nodetype.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16"]]],["^1E","cljs/tools/reader/impl/inspect.cljs"],[1532582253000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15"]]],["^1E","cljs/tools/reader.cljs"],[1532582253000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15","^1[","^20","^21","^1Z","^1X","^1W","^23"]]],["^1E","goog/object/object.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16"]]],"~:SHADOW-TIMESTAMP",[1566006790000,1563067190000],["^1E","goog/math/long.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^1Y","~$goog.reflect"]]],["^1E","goog/string/internal.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16"]]],["^1E","goog/functions/functions.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16"]]],["^1E","goog/structs/map.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1E","cljs/reader.cljs"],[1563067190000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15","~$goog.object","^22","~$cljs.tools.reader.edn","^23"]]],["^1E","goog/asserts/asserts.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1E","cljs/tagged_literals.cljc"],[1563067190000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15","~$cljs.reader"]]],["^1E","goog/uri/uri.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^1X","^1Y","^1W","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1E","goog/base.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",[]]],["^1E","goog/structs/structs.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^1X","^28"]]],["^1E","cljs/tools/reader/impl/errors.cljs"],[1532582253000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15","^1[","^1V","~$cljs.tools.reader.impl.inspect"]]],["^1E","clojure/string.cljs"],[1563067190000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15","^1W","^23"]]],["^1E","goog/string/string.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","~$goog.string.internal"]]],["^1E","goog/reflect/reflect.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16"]]],["^1E","goog/string/stringbuffer.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16"]]],["^1E","cljs/tools/reader/reader_types.cljs"],[1532582253000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15","^20","^1W","^23"]]],["^1E","goog/iter/iter.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^1X","^1Y","~$goog.functions","~$goog.math"]]],["^1E","cljs/tools/reader/impl/commons.cljs"],[1532582253000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15","^1Z","^1[","^20"]]],["^1E","cljs/core.cljs"],[1563067190000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["~$goog.math.Long","~$goog.math.Integer","^1W","^28","^1X","~$goog.Uri","^23"]]],["^1E","cljs/analyzer/api.cljc"],[1563067190000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15","^11","^13"]]],["^1E","goog/math/integer.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16"]]],["^1E","clojure/set.cljs"],[1563067190000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15"]]],["^1E","goog/uri/utils.js"],[1564811506000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^1X","^1Y","^1W"]]],["^1E","cljs/analyzer.cljc"],[1563067190000,"^1R",["^ ","^1S",null,"^1T",["^O",[]],"^1U",["^16","^15","^1W","^1V","~$clojure.set","^11","~$cljs.tagged-literals","^22","^1[","^2<"]]]]],"~:clj-info",["^ ","jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/cljs/tools/reader/reader_types.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1531525495000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/macros.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1541378006000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env/macros.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1532582253000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.","^7","cljs/analyzer/api.cljc","^8",9,"^9",5,"^:",9,"^;",22],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",null,"^N",["^O",["^P","^Q","^R","^S","^T","^U","^V"]],"^W","^X","^[",null,"^10",["^ ","^11","^11","^12","^11","^13","^13","^14","^13","^15","^15","^16","^16"],"^17",["^O",["^18"]],"~:shadow/js-access-global",["^O",["Error"]],"^19",null,"~:defs",["^ ","^P",["^ ","~:protocol-inline",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",165,"^9",7,"^:",165,"^;",14,"~:arglists",["^1<",["~$quote",["^1<",[["~$sym"],["~$state","^3C"]]]]],"^6","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",["^1<",[["^3C"],["^3D","^3C"]]],"^3A",["^1<",[["^3C"],["^3D","^3C"]]],"~:arglists-meta",["^1<",[null,null]]]],"^W","~$cljs.analyzer.api/find-ns","^7","cljs/analyzer/api.cljc","^;",14,"^3E",["^ ","^3F",false,"^3G",2,"^3H",2,"^3I",["^1<",[["^3C"],["^3D","^3C"]]],"^3A",["^1<",[["^3C"],["^3D","^3C"]]],"^3J",["^1<",[null,null]]],"^3I",["^1<",[["^3C"],["^3D","^3C"]]],"~:protocol-impl",null,"^3G",2,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"~:methods",[["^ ","^3G",1,"^3F",false,"~:tag","~$any"],["^ ","^3G",2,"^3F",false,"^3N",["^O",[null,"^3O"]]]],"^8",165,"^:",165,"^3H",2,"~:fn-var",true,"^3A",["^1<",[["^3C"],["^3D","^3C"]]],"^6","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns."],"^Q",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",207,"^9",7,"^:",207,"^;",16,"^3A",["^1<",["^3B",["^1<",[["^1="],["^3D","^1="]]]]],"^6","Removes the namespace named by the symbol.","^3E",["^ ","^3F",false,"^3G",2,"^3H",2,"^3I",["^1<",[["^1="],["^3D","^1="]]],"^3A",["^1<",[["^1="],["^3D","^1="]]],"^3J",["^1<",[null,null]]]],"^W","~$cljs.analyzer.api/remove-ns","^7","cljs/analyzer/api.cljc","^;",16,"^3E",["^ ","^3F",false,"^3G",2,"^3H",2,"^3I",["^1<",[["^1="],["^3D","^1="]]],"^3A",["^1<",[["^1="],["^3D","^1="]]],"^3J",["^1<",[null,null]]],"^3I",["^1<",[["^1="],["^3D","^1="]]],"^3L",null,"^3G",2,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^3M",[["^ ","^3G",1,"^3F",false,"^3N","^3O"],["^ ","^3G",2,"^3F",false,"^3N",["^O",[null,"^3O"]]]],"^8",207,"^:",207,"^3H",2,"^3P",true,"^3A",["^1<",[["^1="],["^3D","^1="]]],"^6","Removes the namespace named by the symbol."],"^R",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",185,"^9",7,"^:",185,"^;",17,"^3A",["^1<",["^3B",["^1<",[["^1="],["^3D","^1="]]]]],"^6","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","^3E",["^ ","^3F",false,"^3G",2,"^3H",2,"^3I",["^1<",[["^1="],["^3D","^1="]]],"^3A",["^1<",[["^1="],["^3D","^1="]]],"^3J",["^1<",[null,null]]]],"^W","~$cljs.analyzer.api/ns-publics","^7","cljs/analyzer/api.cljc","^;",17,"^3E",["^ ","^3F",false,"^3G",2,"^3H",2,"^3I",["^1<",[["^1="],["^3D","^1="]]],"^3A",["^1<",[["^1="],["^3D","^1="]]],"^3J",["^1<",[null,null]]],"^3I",["^1<",[["^1="],["^3D","^1="]]],"^3L",null,"^3G",2,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^3M",[["^ ","^3G",1,"^3F",false,"^3N","^3O"],["^ ","^3G",2,"^3F",false,"^3N",["^O",[null,"~$clj","^3O"]]]],"^8",185,"^:",185,"^3H",2,"^3P",true,"^3A",["^1<",[["^1="],["^3D","^1="]]],"^6","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars."],"~$get-options",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",55,"^9",7,"^:",55,"^;",18,"^3A",["^1<",["^3B",["^1<",[[],["^3D"]]]]],"^6","Return the compiler options from compiler state.","^3E",["^ ","^3F",false,"^3G",1,"^3H",1,"^3I",["^1<",[[],["^3D"]]],"^3A",["^1<",[[],["^3D"]]],"^3J",["^1<",[null,null]]]],"^W","~$cljs.analyzer.api/get-options","^7","cljs/analyzer/api.cljc","^;",18,"^3E",["^ ","^3F",false,"^3G",1,"^3H",1,"^3I",["^1<",[[],["^3D"]]],"^3A",["^1<",[[],["^3D"]]],"^3J",["^1<",[null,null]]],"^3I",["^1<",[[],["^3D"]]],"^3L",null,"^3G",1,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^3M",[["^ ","^3G",0,"^3F",false,"^3N","^3O"],["^ ","^3G",1,"^3F",false,"^3N",["^O",["^3O","~$clj-nil"]]]],"^8",55,"^:",55,"^3H",1,"^3P",true,"^3A",["^1<",[[],["^3D"]]],"^6","Return the compiler options from compiler state."],"~$warning-enabled?",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",43,"^9",7,"^:",43,"^;",23,"^3A",["^1<",["^3B",["^1<",[["~$warning-type"]]]]],"^6","Test if the given warning-type is enabled."],"^W","~$cljs.analyzer.api/warning-enabled?","^7","cljs/analyzer/api.cljc","^;",23,"^3I",["^1<",[["^3X"]]],"^3L",null,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^8",43,"~:ret-tag","^3O","^:",43,"^3H",1,"^3P",true,"^3A",["^1<",["^3B",["^1<",[["^3X"]]]]],"^6","Test if the given warning-type is enabled."],"^S",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",198,"^9",7,"^:",198,"^;",17,"^3A",["^1<",["^3B",["^1<",[["^1=","^3C"],["^3D","^1=","^3C"]]]]],"^6","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","^3E",["^ ","^3F",false,"^3G",3,"^3H",3,"^3I",["^1<",[["^1=","^3C"],["^3D","^1=","^3C"]]],"^3A",["^1<",[["^1=","^3C"],["^3D","^1=","^3C"]]],"^3J",["^1<",[null,null]]]],"^W","~$cljs.analyzer.api/ns-resolve","^7","cljs/analyzer/api.cljc","^;",17,"^3E",["^ ","^3F",false,"^3G",3,"^3H",3,"^3I",["^1<",[["^1=","^3C"],["^3D","^1=","^3C"]]],"^3A",["^1<",[["^1=","^3C"],["^3D","^1=","^3C"]]],"^3J",["^1<",[null,null]]],"^3I",["^1<",[["^1=","^3C"],["^3D","^1=","^3C"]]],"^3L",null,"^3G",3,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^3M",[["^ ","^3G",2,"^3F",false,"^3N","^3O"],["^ ","^3G",3,"^3F",false,"^3N",["^O",[null,"^3O"]]]],"^8",198,"^:",198,"^3H",3,"^3P",true,"^3A",["^1<",[["^1=","^3C"],["^3D","^1=","^3C"]]],"^6","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var."],"~$empty-state",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",20,"^9",7,"^:",20,"^;",18,"^3A",["^1<",["^3B",["^1<",[[]]]]],"^6","Creates an empty compilation state Atom<Map>."],"^W","~$cljs.analyzer.api/empty-state","^7","cljs/analyzer/api.cljc","^;",18,"^3I",["^1<",[[]]],"^3L",null,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^8",20,"^3Z","^3O","^:",20,"^3H",0,"^3P",true,"^3A",["^1<",["^3B",["^1<",[[]]]]],"^6","Creates an empty compilation state Atom<Map>."],"~$empty-env",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",31,"^9",7,"^:",31,"^;",16,"^3A",["^1<",["^3B",["^1<",[[]]]]],"^6","Creates an empty analysis environment."],"^W","~$cljs.analyzer.api/empty-env","^7","cljs/analyzer/api.cljc","^;",16,"^3I",["^1<",[[]]],"^3L",null,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^8",31,"^3Z","^3O","^:",31,"^3H",0,"^3P",true,"^3A",["^1<",["^3B",["^1<",[[]]]]],"^6","Creates an empty analysis environment."],"~$default-warning-handler",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",48,"^9",7,"^:",48,"^;",30,"^3A",["^1<",["^3B",["^1<",[["^3X","^12","~$extra"]]]]],"^6","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^W","~$cljs.analyzer.api/default-warning-handler","^7","cljs/analyzer/api.cljc","^;",30,"^3I",["^1<",[["^3X","^12","^45"]]],"^3L",null,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^8",48,"^3Z",["^O",[null,"^3V"]],"^:",48,"^3H",3,"^3P",true,"^3A",["^1<",["^3B",["^1<",[["^3X","^12","^45"]]]]],"^6","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^T",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",174,"^9",7,"^:",174,"^;",17,"^3A",["^1<",["^3B",["^1<",[["^1="],["^3D","^1="]]]]],"^6","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","^3E",["^ ","^3F",false,"^3G",2,"^3H",2,"^3I",["^1<",[["^1="],["^3D","^1="]]],"^3A",["^1<",[["^1="],["^3D","^1="]]],"^3J",["^1<",[null,null]]]],"^W","~$cljs.analyzer.api/ns-interns","^7","cljs/analyzer/api.cljc","^;",17,"^3E",["^ ","^3F",false,"^3G",2,"^3H",2,"^3I",["^1<",[["^1="],["^3D","^1="]]],"^3A",["^1<",[["^1="],["^3D","^1="]]],"^3J",["^1<",[null,null]]],"^3I",["^1<",[["^1="],["^3D","^1="]]],"^3L",null,"^3G",2,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^3M",[["^ ","^3G",1,"^3F",false,"^3N","^3O"],["^ ","^3G",2,"^3F",false,"^3N",["^O",["^3O","^3V"]]]],"^8",174,"^:",174,"^3H",2,"^3P",true,"^3A",["^1<",[["^1="],["^3D","^1="]]],"^6","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars."],"^U",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",157,"^9",7,"^:",157,"^;",13,"^3A",["^1<",["^3B",["^1<",[[],["^3D"]]]]],"^6","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","^3E",["^ ","^3F",false,"^3G",1,"^3H",1,"^3I",["^1<",[[],["^3D"]]],"^3A",["^1<",[[],["^3D"]]],"^3J",["^1<",[null,null]]]],"^W","~$cljs.analyzer.api/all-ns","^7","cljs/analyzer/api.cljc","^;",13,"^3E",["^ ","^3F",false,"^3G",1,"^3H",1,"^3I",["^1<",[[],["^3D"]]],"^3A",["^1<",[[],["^3D"]]],"^3J",["^1<",[null,null]]],"^3I",["^1<",[[],["^3D"]]],"^3L",null,"^3G",1,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^3M",[["^ ","^3G",0,"^3F",false,"^3N","^3O"],["^ ","^3G",1,"^3F",false,"^3N",["^O",["~$cljs.core/KeySeq","^3V"]]]],"^8",157,"^:",157,"^3H",1,"^3P",true,"^3A",["^1<",[[],["^3D"]]],"^6","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances."],"^V",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",145,"^9",7,"^:",145,"^;",14,"^3A",["^1<",["^3B",["^1<",[["^12","^3C"]]]]],"^6","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"^W","~$cljs.analyzer.api/resolve","^7","cljs/analyzer/api.cljc","^;",14,"^3I",["^1<",[["^12","^3C"]]],"^3L",null,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^8",145,"^:",145,"^3H",2,"^3P",true,"^3A",["^1<",["^3B",["^1<",[["^12","^3C"]]]]],"^6","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"~$get-js-index",["^ ","^3@",null,"^5",["^ ","^7","cljs/analyzer/api.cljc","^8",61,"^9",7,"^:",61,"^;",19,"^3A",["^1<",["^3B",["^1<",[[],["^3D"]]]]],"^6","Return the currently computed Google Closure js dependency index from the\n  compiler state.","^3E",["^ ","^3F",false,"^3G",1,"^3H",1,"^3I",["^1<",[[],["^3D"]]],"^3A",["^1<",[[],["^3D"]]],"^3J",["^1<",[null,null]]]],"^W","~$cljs.analyzer.api/get-js-index","^7","cljs/analyzer/api.cljc","^;",19,"^3E",["^ ","^3F",false,"^3G",1,"^3H",1,"^3I",["^1<",[[],["^3D"]]],"^3A",["^1<",[[],["^3D"]]],"^3J",["^1<",[null,null]]],"^3I",["^1<",[[],["^3D"]]],"^3L",null,"^3G",1,"^3J",["^1<",[null,null]],"^9",1,"^3F",false,"^3M",[["^ ","^3G",0,"^3F",false,"^3N",["^O",["^3O","^3V"]]],["^ ","^3G",1,"^3F",false,"^3N",["^O",["^3O","^3V"]]]],"^8",61,"^:",61,"^3H",1,"^3P",true,"^3A",["^1<",[[],["^3D"]]],"^6","Return the currently computed Google Closure js dependency index from the\n  compiler state."]],"^1:",["^ ","^15","^15"],"~:cljs.analyzer/constants",["^ ","^17",["^O",["~:cljs.analyzer/namespaces","~:private","~:macros","~:js-dependency-index","^3?","~:options"]],"~:order",["^4B","^4A","^4>","^4@","^3?","^4?"]],"^1A",["^ ","^18",["^O",[]]],"^1B",["^ "],"^1C",["^16","^15","^11","^13"]],"^Z","^X","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1Q",[["^4F","~:static-fns"],true,["^4F","~:elide-asserts"],false,["^4F","~:optimize-constants"],null,["^4F","^1H"],null,["^4F","~:external-config"],null,["^4F","~:tooling-config"],null,["^4F","~:emit-constants"],null,["^4F","~:load-tests"],null,["^4F","~:infer-externs"],true,["^4F","^1J"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4F","~:fn-invoke-direct"],null,["^4F","~:source-map"],"/dev/null"]]]