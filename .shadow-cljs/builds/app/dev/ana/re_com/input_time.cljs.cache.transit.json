["^ ","~:output",["^ ","~:js","goog.provide('re_com.input_time');\ngoog.require('cljs.core');\ngoog.require('reagent.core');\ngoog.require('re_com.validate');\ngoog.require('re_com.text');\ngoog.require('re_com.box');\ngoog.require('re_com.util');\nre_com.input_time.time__GT_mins = (function re_com$input_time$time__GT_mins(time){\nreturn cljs.core.rem(time,(100));\n});\nre_com.input_time.time__GT_hrs = (function re_com$input_time$time__GT_hrs(time){\nreturn cljs.core.quot(time,(100));\n});\n/**\n * Parse the string 's' to a valid int. On parse failure, return 0\n */\nre_com.input_time.to_int = (function re_com$input_time$to_int(s){\nvar val = parseInt(s);\nif(cljs.core.truth_(isNaN(val))){\nreturn (0);\n} else {\nreturn val;\n}\n});\n/**\n * Return a time integer from a triple int vector of form  [H  _  M]\n */\nre_com.input_time.triple__GT_time = (function re_com$input_time$triple__GT_time(p__62376){\nvar vec__62377 = p__62376;\nvar hr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62377,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62377,(1),null);\nvar mi = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62377,(2),null);\nreturn ((hr * (100)) + mi);\n});\nre_com.input_time.triple_seeking_re = /^(\\d{0,2})()()$|^(\\d{0,1})(:{0,1})(\\d{0,2})$|^(\\d{0,2})(:{0,1})(\\d{0,2})$/;\nre_com.input_time.extract_triple_from_text = (function re_com$input_time$extract_triple_from_text(text){\nreturn cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.not,cljs.core.nil_QMARK_),cljs.core.rest(cljs.core.re_matches(re_com.input_time.triple_seeking_re,text)));\n});\n/**\n * return as a time int, the contents of 'text'\n */\nre_com.input_time.text__GT_time = (function re_com$input_time$text__GT_time(text){\nreturn re_com.input_time.triple__GT_time(cljs.core.map.cljs$core$IFn$_invoke$arity$2(re_com.input_time.to_int,re_com.input_time.extract_triple_from_text(text)));\n});\n/**\n * return a string of format HH:MM for 'time'\n */\nre_com.input_time.time__GT_text = (function re_com$input_time$time__GT_text(time){\nvar hrs = re_com.input_time.time__GT_hrs(time);\nvar mins = re_com.input_time.time__GT_mins(time);\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(re_com.util.pad_zero_number(hrs,(2))),\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(re_com.util.pad_zero_number(mins,(2)))].join('');\n});\n/**\n * Return true if text passes basic time validation.\n * Can't do to much validation because user input might not be finished.\n * Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n * So we only really check against the triple-extracting regular expression\n */\nre_com.input_time.valid_text_QMARK_ = (function re_com$input_time$valid_text_QMARK_(text){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((3),cljs.core.count(re_com.input_time.extract_triple_from_text(text)));\n});\nre_com.input_time.valid_time_QMARK_ = (function re_com$input_time$valid_time_QMARK_(time){\nif((time == null)){\nreturn false;\n} else {\nif(((0) > time)){\nreturn false;\n} else {\nif(((60) < re_com.input_time.time__GT_mins(time))){\nreturn false;\n} else {\nreturn true;\n\n}\n}\n}\n});\nre_com.input_time.validate_arg_times = (function re_com$input_time$validate_arg_times(model,minimum,maximum){\nif(((typeof model === 'number') && (re_com.input_time.valid_time_QMARK_(model)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"[input-time] given an invalid :model - \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(model)].join(''),\"\\n\",\"(and (number? model) (valid-time? model))\"].join('')));\n}\n\nif(((typeof minimum === 'number') && (re_com.input_time.valid_time_QMARK_(minimum)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"[input-time] given an invalid :minimum - \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(minimum)].join(''),\"\\n\",\"(and (number? minimum) (valid-time? minimum))\"].join('')));\n}\n\nif(((typeof maximum === 'number') && (re_com.input_time.valid_time_QMARK_(maximum)))){\n} else {\nthrow (new Error([\"Assert failed: \",[\"[input-time] given an invalid :maximum - \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(maximum)].join(''),\"\\n\",\"(and (number? maximum) (valid-time? maximum))\"].join('')));\n}\n\nif((minimum <= maximum)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"[input-time] :minimum \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(minimum),\" > :maximum  \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(maximum)].join(''),\"\\n\",\"(<= minimum maximum)\"].join('')));\n}\n\nreturn true;\n});\n/**\n * Validate the time supplied.\n * Return either the time or, if it is invalid, return something valid\n */\nre_com.input_time.force_valid_time = (function re_com$input_time$force_valid_time(time,min,max,previous){\nif((time == null)){\nreturn previous;\n} else {\nif((!(re_com.input_time.valid_time_QMARK_(time)))){\nreturn previous;\n} else {\nif((time < min)){\nreturn min;\n} else {\nif((max < time)){\nreturn max;\n} else {\nreturn time;\n\n}\n}\n}\n}\n});\n/**\n * Called each time the <input> field gets a keypress, or paste operation.\n * Rests  the text-model only if the new text is valid\n */\nre_com.input_time.on_new_keypress = (function re_com$input_time$on_new_keypress(event,text_model){\nvar current_text = event.target.value;\nif(re_com.input_time.valid_text_QMARK_(current_text)){\nreturn cljs.core.reset_BANG_(text_model,current_text);\n} else {\nreturn null;\n}\n});\n/**\n * When Enter is pressed, force the component to lose focus\n */\nre_com.input_time.lose_focus_if_enter = (function re_com$input_time$lose_focus_if_enter(ev){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ev.keyCode,(13))){\nev.target.blur();\n\nreturn true;\n} else {\nreturn null;\n}\n});\n/**\n * Called when the field looses focus.\n * Re-validate what has been entered, comparing to mins and maxs.\n * Invoke the callback as necessary\n */\nre_com.input_time.on_defocus = (function re_com$input_time$on_defocus(text_model,min,max,callback,previous_val){\nvar time = re_com.input_time.text__GT_time(cljs.core.deref(text_model));\nvar time__$1 = re_com.input_time.force_valid_time(time,min,max,previous_val);\ncljs.core.reset_BANG_(text_model,re_com.input_time.time__GT_text(time__$1));\n\nif(cljs.core.truth_((function (){var and__4120__auto__ = callback;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(time__$1,previous_val);\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn (callback.cljs$core$IFn$_invoke$arity$1 ? callback.cljs$core$IFn$_invoke$arity$1(time__$1) : callback.call(null,time__$1));\n} else {\nreturn null;\n}\n});\nre_com.input_time.input_time_args_desc = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"model\",\"model\",331153215),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),true,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer | string | atom\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),re_com.validate.number_or_string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"a time in integer form. e.g. '09:30am' is 930\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"on-change\",\"on-change\",-732046149),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),true,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer -> nil\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),cljs.core.fn_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"called when user entry completes and value is new. Passed new value as integer\"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"minimum\",\"minimum\",-1621006059),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(0),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer | string\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),re_com.validate.number_or_string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"user can't enter a time less than this value\"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"maximum\",\"maximum\",573880714),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(2359),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"integer | string\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),re_com.validate.number_or_string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"user can't enter a time more than this value\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"disabled?\",\"disabled?\",-1523234181),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"boolean | atom\",new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"when true, user input is disabled\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"show-icon?\",\"show-icon?\",-756836459),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"boolean\",new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"when true, a clock icon will be displayed to the right of input field\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"hide-border?\",\"hide-border?\",1792698922),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"boolean\",new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"when true, input filed is displayed without a border\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"width\",\"width\",-384071477),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),cljs.core.string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"standard CSS width setting for width of the input box (excluding the icon if present)\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"height\",\"height\",1025178622),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),cljs.core.string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"standard CSS height setting\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"string\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),cljs.core.string_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"CSS class names, space separated (applies to the textbox, not the wrapping div)\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"CSS style map\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),re_com.validate.css_style_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),\"CSS style. e.g. {:color \\\"red\\\" :width \\\"50px\\\"} (applies to the textbox, not the wrapping div)\"], null),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"attr\",\"attr\",-604132353),new cljs.core.Keyword(null,\"required\",\"required\",1807647006),false,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"HTML attr map\",new cljs.core.Keyword(null,\"validate-fn\",\"validate-fn\",1430169944),re_com.validate.html_attr_QMARK_,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"span\",\"span\",1394872991),\"HTML attributes, like \",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"code\",\"code\",1586293142),\":on-mouse-move\"], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"br\",\"br\",934104792)], null),\"No \",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"code\",\"code\",1586293142),\":class\"], null),\" or \",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"code\",\"code\",1586293142),\":style\"], null),\"allowed (applies to the textbox, not the wrapping div)\"], null)], null)], null);\n/**\n * I return the markup for an input box which will accept and validate times.\n * Parameters - refer input-time-args above\n */\nre_com.input_time.input_time = (function re_com$input_time$input_time(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___62481 = arguments.length;\nvar i__4731__auto___62482 = (0);\nwhile(true){\nif((i__4731__auto___62482 < len__4730__auto___62481)){\nargs__4736__auto__.push((arguments[i__4731__auto___62482]));\n\nvar G__62483 = (i__4731__auto___62482 + (1));\ni__4731__auto___62482 = G__62483;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn re_com.input_time.input_time.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nre_com.input_time.input_time.cljs$core$IFn$_invoke$arity$variadic = (function (p__62443){\nvar map__62444 = p__62443;\nvar map__62444__$1 = (((((!((map__62444 == null))))?(((((map__62444.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62444.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62444):map__62444);\nvar args = map__62444__$1;\nvar model = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62444__$1,new cljs.core.Keyword(null,\"model\",\"model\",331153215));\nvar minimum = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__62444__$1,new cljs.core.Keyword(null,\"minimum\",\"minimum\",-1621006059),(0));\nvar maximum = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__62444__$1,new cljs.core.Keyword(null,\"maximum\",\"maximum\",573880714),(2359));\nif((((!(goog.DEBUG)))?true:re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic(re_com.validate.extract_arg_data(re_com.input_time.input_time_args_desc),args,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"input-time\"], 0)))){\n} else {\nthrow (new Error(\"Assert failed: (validate-args-macro input-time-args-desc args \\\"input-time\\\")\"));\n}\n\nif(re_com.input_time.validate_arg_times(re_com.util.deref_or_value(model),minimum,maximum)){\n} else {\nthrow (new Error(\"Assert failed: (validate-arg-times (deref-or-value model) minimum maximum)\"));\n}\n\nvar deref_model = re_com.util.deref_or_value(model);\nvar text_model = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(re_com.input_time.time__GT_text(deref_model));\nvar previous_model = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(deref_model);\nreturn ((function (deref_model,text_model,previous_model,map__62444,map__62444__$1,args,model,minimum,maximum){\nreturn (function() { \nvar G__62519__delegate = function (p__62447){\nvar map__62448 = p__62447;\nvar map__62448__$1 = (((((!((map__62448 == null))))?(((((map__62448.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62448.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62448):map__62448);\nvar args__$1 = map__62448__$1;\nvar disabled_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62448__$1,new cljs.core.Keyword(null,\"disabled?\",\"disabled?\",-1523234181));\nvar on_change = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62448__$1,new cljs.core.Keyword(null,\"on-change\",\"on-change\",-732046149));\nvar height = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62448__$1,new cljs.core.Keyword(null,\"height\",\"height\",1025178622));\nvar model__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62448__$1,new cljs.core.Keyword(null,\"model\",\"model\",331153215));\nvar attr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62448__$1,new cljs.core.Keyword(null,\"attr\",\"attr\",-604132353));\nvar hide_border_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62448__$1,new cljs.core.Keyword(null,\"hide-border?\",\"hide-border?\",1792698922));\nvar maximum__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__62448__$1,new cljs.core.Keyword(null,\"maximum\",\"maximum\",573880714),(2359));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62448__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar style = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62448__$1,new cljs.core.Keyword(null,\"style\",\"style\",-496642736));\nvar class$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62448__$1,new cljs.core.Keyword(null,\"class\",\"class\",-2030961996));\nvar show_icon_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62448__$1,new cljs.core.Keyword(null,\"show-icon?\",\"show-icon?\",-756836459));\nvar minimum__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__62448__$1,new cljs.core.Keyword(null,\"minimum\",\"minimum\",-1621006059),(0));\nif((((!(goog.DEBUG)))?true:re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic(re_com.validate.extract_arg_data(re_com.input_time.input_time_args_desc),args__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"input-time\"], 0)))){\n} else {\nthrow (new Error(\"Assert failed: (validate-args-macro input-time-args-desc args \\\"input-time\\\")\"));\n}\n\nif(re_com.input_time.validate_arg_times(re_com.util.deref_or_value(model__$1),minimum__$1,maximum__$1)){\n} else {\nthrow (new Error(\"Assert failed: (validate-arg-times (deref-or-value model) minimum maximum)\"));\n}\n\nvar style__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(cljs.core.truth_(hide_border_QMARK_)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"border\",\"border\",1444987323),\"none\"], null):null),style], 0));\nvar new_val = re_com.util.deref_or_value(model__$1);\nvar new_val__$1 = (((new_val < minimum__$1))?minimum__$1:new_val);\nvar new_val__$2 = (((new_val__$1 > maximum__$1))?maximum__$1:new_val__$1);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(previous_model),new_val__$2)){\ncljs.core.reset_BANG_(text_model,re_com.input_time.time__GT_text(new_val__$2));\n\ncljs.core.reset_BANG_(previous_model,new_val__$2);\n} else {\n}\n\nreturn new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [re_com.box.h_box,new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),\"rc-input-time\",new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"height\",\"height\",1025178622),height], null),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"input\",\"input\",556931961),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),\"text\",new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),[\"time-entry \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(class$)].join(''),new cljs.core.Keyword(null,\"style\",\"style\",-496642736),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"width\",\"width\",-384071477),width], null),style__$1], 0)),new cljs.core.Keyword(null,\"value\",\"value\",305978217),cljs.core.deref(text_model),new cljs.core.Keyword(null,\"disabled\",\"disabled\",-1529784218),re_com.util.deref_or_value(disabled_QMARK_),new cljs.core.Keyword(null,\"on-change\",\"on-change\",-732046149),((function (style__$1,new_val,new_val__$1,new_val__$2,map__62448,map__62448__$1,args__$1,disabled_QMARK_,on_change,height,model__$1,attr,hide_border_QMARK_,maximum__$1,width,style,class$,show_icon_QMARK_,minimum__$1,deref_model,text_model,previous_model,map__62444,map__62444__$1,args,model,minimum,maximum){\nreturn (function (event){\nre_com.input_time.on_new_keypress(event,text_model);\n\nreturn null;\n});})(style__$1,new_val,new_val__$1,new_val__$2,map__62448,map__62448__$1,args__$1,disabled_QMARK_,on_change,height,model__$1,attr,hide_border_QMARK_,maximum__$1,width,style,class$,show_icon_QMARK_,minimum__$1,deref_model,text_model,previous_model,map__62444,map__62444__$1,args,model,minimum,maximum))\n,new cljs.core.Keyword(null,\"on-blur\",\"on-blur\",814300747),((function (style__$1,new_val,new_val__$1,new_val__$2,map__62448,map__62448__$1,args__$1,disabled_QMARK_,on_change,height,model__$1,attr,hide_border_QMARK_,maximum__$1,width,style,class$,show_icon_QMARK_,minimum__$1,deref_model,text_model,previous_model,map__62444,map__62444__$1,args,model,minimum,maximum){\nreturn (function (event){\nre_com.input_time.on_defocus(text_model,minimum__$1,maximum__$1,on_change,cljs.core.deref(previous_model));\n\nreturn null;\n});})(style__$1,new_val,new_val__$1,new_val__$2,map__62448,map__62448__$1,args__$1,disabled_QMARK_,on_change,height,model__$1,attr,hide_border_QMARK_,maximum__$1,width,style,class$,show_icon_QMARK_,minimum__$1,deref_model,text_model,previous_model,map__62444,map__62444__$1,args,model,minimum,maximum))\n,new cljs.core.Keyword(null,\"on-key-up\",\"on-key-up\",884441808),((function (style__$1,new_val,new_val__$1,new_val__$2,map__62448,map__62448__$1,args__$1,disabled_QMARK_,on_change,height,model__$1,attr,hide_border_QMARK_,maximum__$1,width,style,class$,show_icon_QMARK_,minimum__$1,deref_model,text_model,previous_model,map__62444,map__62444__$1,args,model,minimum,maximum){\nreturn (function (event){\nre_com.input_time.lose_focus_if_enter(event);\n\nreturn null;\n});})(style__$1,new_val,new_val__$1,new_val__$2,map__62448,map__62448__$1,args__$1,disabled_QMARK_,on_change,height,model__$1,attr,hide_border_QMARK_,maximum__$1,width,style,class$,show_icon_QMARK_,minimum__$1,deref_model,text_model,previous_model,map__62444,map__62444__$1,args,model,minimum,maximum))\n], null),attr], 0))], null),(cljs.core.truth_(show_icon_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"div.time-icon\",\"div.time-icon\",638768452),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"i.zmdi.zmdi-hc-fw-rc.zmdi-time\",\"i.zmdi.zmdi-hc-fw-rc.zmdi-time\",-1040605177),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"style\",\"style\",-496642736),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"position\",\"position\",-2011731912),\"static\",new cljs.core.Keyword(null,\"margin\",\"margin\",-995903681),\"auto\"], null)], null)], null)], null):null)], null)], null);\n};\nvar G__62519 = function (var_args){\nvar p__62447 = null;\nif (arguments.length > 0) {\nvar G__62567__i = 0, G__62567__a = new Array(arguments.length -  0);\nwhile (G__62567__i < G__62567__a.length) {G__62567__a[G__62567__i] = arguments[G__62567__i + 0]; ++G__62567__i;}\n  p__62447 = new cljs.core.IndexedSeq(G__62567__a,0,null);\n} \nreturn G__62519__delegate.call(this,p__62447);};\nG__62519.cljs$lang$maxFixedArity = 0;\nG__62519.cljs$lang$applyTo = (function (arglist__62569){\nvar p__62447 = cljs.core.seq(arglist__62569);\nreturn G__62519__delegate(p__62447);\n});\nG__62519.cljs$core$IFn$_invoke$arity$variadic = G__62519__delegate;\nreturn G__62519;\n})()\n;\n;})(deref_model,text_model,previous_model,map__62444,map__62444__$1,args,model,minimum,maximum))\n});\n\nre_com.input_time.input_time.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_com.input_time.input_time.cljs$lang$applyTo = (function (seq62441){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62441));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_com/input_time.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$react-flip-move","~$module$node_modules$react_flip_move$dist$react_flip_move_cjs","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",["^ ","~$handler-fn","~$re-com.core","~$validate-args-macro","~$re-com.validate"],"~:excludes",["~#set",[]],"~:name","~$re-com.input-time","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$reagent.core","^Y","~$reagent","^Y","^P","^P","~$re-com.text","^[","~$re-com.box","^10","~$re-com.util","^11","~$cljs.core","^12","~$goog","^13"],"~:seen",["^R",["~:require","~:require-macros"]],"~:uses",["^ ","~$css-style?","^P","~$html-attr?","^P","~$number-or-string?","^P","~$label","^[","~$h-box","^10","~$gap","^10","~$pad-zero-number","^11","~$deref-or-value","^11"],"^16",["^ ","^N","^N","^P","^P","^12","^12","^Y","^Y","^Z","^Y"],"~:form",["~#list",["~$ns","^T",["^1A",["^16",["^N","~:refer",["^M"]]]],["^1A",["^15",["^Y","~:as","^Z"],["^P","^1C",["^18","^19","^1:"],"~:refer-macros",["^O"]],["^[","^1C",["^1;"]],["^10","^1C",["^1<","^1="]],["^11","^1C",["^1>","^1?"]]]]]],"~:flags",["^ ","^16",["^R",[]],"^15",["^R",[]]],"~:js-deps",["^ "],"~:deps",["^13","^12","^Y","^P","^[","^10","^11"]],"^V","^T","~:resource-id",["~:shadow.build.classpath/resource","re_com/input_time.cljs"],"~:compiled-at",1566016980687,"~:resource-name","re_com/input_time.cljs","~:warnings",[],"~:source","(ns re-com.input-time\r\n  (:require-macros [re-com.core :refer [handler-fn]])\r\n  (:require [reagent.core    :as    reagent]\r\n            [re-com.validate :refer [css-style? html-attr? number-or-string?] :refer-macros [validate-args-macro]]\r\n            [re-com.text     :refer [label]]\r\n            [re-com.box      :refer [h-box gap]]\r\n            [re-com.util     :refer [pad-zero-number deref-or-value]]))\r\n\r\n\r\n(defn- time->mins\r\n  [time]\r\n  (rem time 100))\r\n\r\n\r\n(defn- time->hrs\r\n  [time]\r\n  (quot time 100))\r\n\r\n(defn- to-int\r\n  \"Parse the string 's' to a valid int. On parse failure, return 0\"\r\n  [s]\r\n  (let [val (js/parseInt s)]\r\n    (if (js/isNaN val) 0 val)))\r\n\r\n(defn- triple->time\r\n  \"Return a time integer from a triple int vector of form  [H  _  M]\"\r\n  [[hr _ mi]]\r\n  (+ (* hr 100) mi))                                        ;; a four digit integer:  HHMM\r\n\r\n\r\n;; This regular expression matchs all valid forms of time entry, including partial\r\n;; forms which happen during user entry.\r\n;; It is composed of 3 'or' options, separated by '|',  and within each, is a sub-re which\r\n;; attempts to match the HH ':' MM parts.\r\n;; So any attempt to match against this re, using \"re-matches\" will return\r\n;; a vector of 10 items:\r\n;;   - the 1st item will be the entire string matched\r\n;;   - followed by 3 groups of 3.\r\n(def ^{:private true}\r\n  triple-seeking-re #\"^(\\d{0,2})()()$|^(\\d{0,1})(:{0,1})(\\d{0,2})$|^(\\d{0,2})(:{0,1})(\\d{0,2})$\")\r\n\r\n(defn- extract-triple-from-text\r\n  [text]\r\n  (->> text\r\n       (re-matches triple-seeking-re)                       ;; looks for different ways of matching triples   H : M\r\n       (rest)                                               ;; get rid of the first value. It is the entire matched string.\r\n       (filter (comp not nil?))))                           ;; of the 9 items, there should be only 3 non-nil matches coresponding to  H : M\r\n\r\n\r\n(defn text->time\r\n  \"return as a time int, the contents of 'text'\"\r\n  [text]\r\n  (->> text\r\n       extract-triple-from-text\r\n       (map to-int)                                         ;; make them ints (or 0)\r\n       triple->time))                                       ;; turn the triple of values into a single int\r\n\r\n\r\n(defn time->text\r\n  \"return a string of format HH:MM for 'time'\"\r\n  [time]\r\n  (let [hrs  (time->hrs  time)\r\n        mins (time->mins time)]\r\n    (str (pad-zero-number hrs 2) \":\" (pad-zero-number mins 2))))\r\n\r\n(defn valid-text?\r\n  \"Return true if text passes basic time validation.\r\n   Can't do to much validation because user input might not be finished.\r\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\r\n   So we only really check against the triple-extracting regular expression\"\r\n  [text]\r\n  (= 3 (count (extract-triple-from-text text))))\r\n\r\n(defn valid-time?\r\n  [time]\r\n  (cond\r\n    (nil? time) false                                       ;; can't be nil\r\n    (> 0 time) false                                        ;; must be a poistive number\r\n    (< 60 (time->mins time)) false                          ;; too many mins\r\n    :else true))\r\n\r\n(defn- validate-arg-times\r\n  [model minimum maximum]\r\n  (assert (and (number? model) (valid-time? model)) (str \"[input-time] given an invalid :model - \" model))\r\n  (assert (and (number? minimum) (valid-time? minimum)) (str \"[input-time] given an invalid :minimum - \" minimum))\r\n  (assert (and (number? maximum) (valid-time? maximum)) (str \"[input-time] given an invalid :maximum - \" maximum))\r\n  (assert (<= minimum maximum) (str \"[input-time] :minimum \" minimum \" > :maximum  \" maximum))\r\n  true)\r\n\r\n(defn- force-valid-time\r\n  \"Validate the time supplied.\r\n   Return either the time or, if it is invalid, return something valid\"\r\n  [time min max previous]\r\n  (cond\r\n    (nil? time) previous\r\n    (not (valid-time? time)) previous\r\n    (< time min) min\r\n    (< max time) max\r\n    :else time))\r\n\r\n(defn- on-new-keypress\r\n  \"Called each time the <input> field gets a keypress, or paste operation.\r\n   Rests  the text-model only if the new text is valid\"\r\n  [event text-model]\r\n  (let [current-text (-> event .-target .-value)]           ;; gets the current input field text\r\n    (when (valid-text? current-text)\r\n      (reset! text-model current-text))))\r\n\r\n(defn- lose-focus-if-enter\r\n  \"When Enter is pressed, force the component to lose focus\"\r\n  [ev]\r\n  (when (= (.-keyCode ev) 13)\r\n    (-> ev .-target .blur)\r\n    true))\r\n\r\n(defn- on-defocus\r\n  \"Called when the field looses focus.\r\n   Re-validate what has been entered, comparing to mins and maxs.\r\n   Invoke the callback as necessary\"\r\n  [text-model min max callback previous-val]\r\n  (let [time (text->time @text-model)\r\n        time (force-valid-time time min max previous-val)]\r\n    (reset! text-model (time->text time))\r\n    (when (and callback (not= time previous-val))\r\n      (callback time))))\r\n\r\n(def input-time-args-desc\r\n  [{:name :model        :required true                   :type \"integer | string | atom\" :validate-fn number-or-string? :description \"a time in integer form. e.g. '09:30am' is 930\"}\r\n   {:name :on-change    :required true                   :type \"integer -> nil\"          :validate-fn fn?               :description \"called when user entry completes and value is new. Passed new value as integer\"}\r\n   {:name :minimum      :required false :default 0       :type \"integer | string\"        :validate-fn number-or-string? :description \"user can't enter a time less than this value\"}\r\n   {:name :maximum      :required false :default 2359    :type \"integer | string\"        :validate-fn number-or-string? :description \"user can't enter a time more than this value\"}\r\n   {:name :disabled?    :required false :default false   :type \"boolean | atom\"                                         :description \"when true, user input is disabled\"}\r\n   {:name :show-icon?   :required false :default false   :type \"boolean\"                                                :description \"when true, a clock icon will be displayed to the right of input field\"}\r\n   {:name :hide-border? :required false :default false   :type \"boolean\"                                                :description \"when true, input filed is displayed without a border\"}\r\n   {:name :width        :required false                  :type \"string\"                  :validate-fn string?           :description \"standard CSS width setting for width of the input box (excluding the icon if present)\"}\r\n   {:name :height       :required false                  :type \"string\"                  :validate-fn string?           :description \"standard CSS height setting\"}\r\n   {:name :class        :required false                  :type \"string\"                  :validate-fn string?           :description \"CSS class names, space separated (applies to the textbox, not the wrapping div)\"}\r\n   {:name :style        :required false                  :type \"CSS style map\"           :validate-fn css-style?        :description \"CSS style. e.g. {:color \\\"red\\\" :width \\\"50px\\\"} (applies to the textbox, not the wrapping div)\" }\r\n   {:name :attr         :required false                  :type \"HTML attr map\"           :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the textbox, not the wrapping div)\"]}])\r\n\r\n(defn input-time\r\n  \"I return the markup for an input box which will accept and validate times.\r\n   Parameters - refer input-time-args above\"\r\n  [& {:keys [model minimum maximum] :as args\r\n      :or   {minimum 0 maximum 2359}}]\r\n  {:pre [(validate-args-macro input-time-args-desc args \"input-time\")\r\n         (validate-arg-times (deref-or-value model) minimum maximum)]}\r\n  (let [deref-model    (deref-or-value model)\r\n        text-model     (reagent/atom (time->text deref-model))\r\n        previous-model (reagent/atom deref-model)]\r\n    (fn\r\n      [& {:keys [model on-change minimum maximum disabled? show-icon? hide-border? width height class style attr] :as args\r\n          :or   {minimum 0 maximum 2359}}]\r\n      {:pre [(validate-args-macro input-time-args-desc args \"input-time\")\r\n             (validate-arg-times (deref-or-value model) minimum maximum)]}\r\n      (let [style (merge (when hide-border? {:border \"none\"})\r\n                         style)\r\n            new-val (deref-or-value model)\r\n            new-val (if (< new-val minimum) minimum new-val)\r\n            new-val (if (> new-val maximum) maximum new-val)]\r\n        ;; if the model is different to that currently shown in text, then reset the text to match\r\n        ;; other than that we want to keep the current text, because the user is probably typing\r\n        (when (not= @previous-model new-val)\r\n          (reset! text-model (time->text new-val))\r\n          (reset! previous-model new-val))\r\n\r\n        [h-box\r\n         :class    \"rc-input-time\"\r\n         :style    {:height height}\r\n         :children [[:input\r\n                     (merge\r\n                       {:type      \"text\"\r\n                        :class     (str \"time-entry \" class)\r\n                        :style     (merge {:width width}\r\n                                          style)\r\n                        :value     @text-model\r\n                        :disabled  (deref-or-value disabled?)\r\n                        :on-change (handler-fn (on-new-keypress event text-model))\r\n                        :on-blur   (handler-fn (on-defocus text-model minimum maximum on-change @previous-model))\r\n                        :on-key-up (handler-fn (lose-focus-if-enter event))}\r\n                       attr)]\r\n                    (when show-icon?\r\n                      [:div.time-icon\r\n                       [:i.zmdi.zmdi-hc-fw-rc.zmdi-time\r\n                        {:style {:position \"static\" :margin \"auto\"}}]])]]))))\r\n","~:reader-features",["^R",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;;;;;AASA,AAAA,AAAOA,AACJC;AADH,AAEE,AAAA,AAACC,AAAID;;AAGP,AAAA,AAAOE,AACJF;AADH,AAEE,AAAA,AAACG,AAAKH;;AAER;;;AAAA,AAAOI,AAEJC;AAFH,AAGE,AAAMC,AAAI,AAACC,AAAYF;AAAvB,AACE,AAAI,AAACG,AAASF;AAAd;;AAAqBA;;;AAEzB;;;AAAA,AAAAG,AAAOG;AAAP,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAEIG;AAFJ,AAAAF,AAAAD,AAAA,AAAA,AAEOI;AAFP,AAAAH,AAAAD,AAAA,AAAA,AAESK;AAFT,AAGE,AAAG,AAAA,AAAGF,AAAQE;;AAWhB,AAAA,AACEC;AAEF,AAAA,AAAOC,AACJC;AADH,AAEOA,AACA,AAACC,AAAWH,AACZ,AAACI,AACD,AAACC,AAAO,AAACC,AAAKC,AAAIC;;AAGzB;;;AAAA,AAAMC,AAEHP;AAFH,AAGE,AAAKA,AACAD,AACA,AAAA,AAACS,AAAItB,AACLQ;;AAGP;;;AAAA,AAAMe,AAEH3B;AAFH,AAGE,AAAM4B,AAAK,AAAC1B,AAAWF;AACjB6B,AAAK,AAAC9B,AAAWC;AADvB,AAEE,AAAA,AAAK,AAAA,AAAC8B,AAAgBF,AAAW,AAAA,AAACE,AAAgBD;;AAEtD;;;;;;AAAA,AAAME,AAKHb;AALH,AAME,AAAA,AAACc,AAAI,AAACC,AAAM,AAAChB,AAAyBC;;AAExC,AAAA,AAAMgB,AACHlC;AADH,AAEE,AACE,AAAA,AAAMA;AADR;;AAAA,AAEE,AAAA,AAAKA;AAFP;;AAAA,AAGE,AAAA,AAAM,AAACD,AAAWC;AAHpB;;AAAA,AAAA;;;;;;AAMF,AAAA,AAAOmC,AACJC,AAAMC,AAAQC;AADjB,AAEE,AAAQ,AAAK,AAASF,AAAO,AAACF,AAAYE;AAA1C;AAAA,AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAkD,AAAA,AAA+CH;;;AACjG,AAAQ,AAAK,AAASC,AAAS,AAACH,AAAYG;AAA5C;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAsD,AAAA,AAAiDF;;;AACvG,AAAQ,AAAK,AAASC,AAAS,AAACJ,AAAYI;AAA5C;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAsD,AAAA,AAAiDD;;;AACvG,AAAQ,AAAID,AAAQC;AAApB;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAA6B,AAAA,AAAA,AAA8BF,AAAwBC;;;AALrF;;AAQA;;;;AAAA,AAAOE,AAGJxC,AAAKyC,AAAIC,AAAIC;AAHhB,AAIE,AACE,AAAA,AAAM3C;AAAM2C;;AADd,AAEE,AAAK,AAACT,AAAYlC;AAAO2C;;AAF3B,AAGE,AAAG3C,AAAKyC;AAAKA;;AAHf,AAIE,AAAGC,AAAI1C;AAAM0C;;AAJf,AAKQ1C;;;;;;;AAEV;;;;AAAA,AAAO4C,AAGJC,AAAMC;AAHT,AAIE,AAAMC,AAAa,AAAA,AAAIF;AAAvB,AACE,AAAM,AAACd,AAAYgB;AAAnB,AACE,AAACC,AAAOF,AAAWC;;AADrB;;;AAGJ;;;AAAA,AAAOE,AAEJC;AAFH,AAGE,AAAM,AAAA,AAAClB,AAAE,AAAWkB;AAApB,AACE,AAAA,AAAIA;;AADN;;AAAA;;;AAIF;;;;;AAAA,AAAOC,AAIJL,AAAWL,AAAIC,AAAIU,AAASC;AAJ/B,AAKE,AAAMrD,AAAK,AAAA,AAAAsD,AAAC7B,AAAYqB;AAClB9C,AAAK,AAACwC,AAAiBxC,AAAKyC,AAAIC,AAAIW;AAD1C,AAEE,AAACL,AAAOF,AAAW,AAACnB,AAAW3B;;AAC/B,AAAM,AAAAuD,AAAKH;AAAL,AAAA,AAAAG;AAAc,AAACC,AAAKxD,AAAKqD;;AAAzBE;;;AAAN,AACE,AAACH,AAAAA,AAAAA,AAASpyD,AACiGC,AACAC,AACAD,AACAA,AAIAE,AACAA,AACAA,AACAC,AACAC;AAEtG,AAAA;;;;AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAGwCS;AAHxC,AAAAL,AAAAJ,AAAA,AAGanC;AAHb,AAAAwC,AAAAL,AAAA,AAAA,AAGmBlC;AAHnB,AAAAuC,AAAAL,AAAA,AAAA,AAG2BjC;AAH3B,AAAA,AAKS,AAAA,AAAA2C,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAqB1B,AAAqBuB;AALnD;AAAA,AAAA,AAAA,AAAAzC,AAAA;;;AAAA,AAMS,AAACJ,AAAmB,AAACiD,AAAehD,AAAOC,AAAQC;AAN5D;AAAA,AAAA,AAAA,AAAAC,AAAA;;;AAOE,AAAM8C,AAAe,AAACD,AAAehD;AAC/BU,AAAe,AAACwC,AAAa,AAAC3D,AAAW0D;AACzCE,AAAe,AAACD,AAAaD;AAFnC,AAGE;;AAAAG;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjB,AAAA,AAAAiB,AAAA,AAAA,AAAA,AAAA,AAAAhB,AAAAC,AAAAe,AAAAA;AAAAA,AACkHT;AADlH,AAAAL,AAAAc,AAAA,AAC6CE;AAD7C,AAAAhB,AAAAc,AAAA,AACmBC;AADnB,AAAAf,AAAAc,AAAA,AACqFM;AADrF,AAAApB,AAAAc,AAAA,AACarD;AADb,AAAAuC,AAAAc,AAAA,AACwGS;AADxG,AAAAvB,AAAAc,AAAA,AACkEI;AADlE,AAAAjB,AAAAa,AAAA,AAAA,AACqCnD;AADrC,AAAAqC,AAAAc,AAAA,AAC+EK;AAD/E,AAAAnB,AAAAc,AAAA,AACkGQ;AADlG,AAAAtB,AAAAc,AAAA,AAC4FO;AAD5F,AAAArB,AAAAc,AAAA,AACuDG;AADvD,AAAAhB,AAAAa,AAAA,AAAA,AAC6BpD;AAD7B,AAAA,AAGS,AAAA,AAAA4C,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAqB1B,AAAqBuB;AAHnD;AAAA,AAAA,AAAA,AAAAzC,AAAA;;;AAAA,AAIS,AAACJ,AAAmB,AAACiD,AAAehD,AAAOC,AAAQC;AAJ5D;AAAA,AAAA,AAAA,AAAAC,AAAA;;;AAKE,AAAM0D,AAAM,AAACE,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMN,AACNI;AACbG,AAAQ,AAAChB,AAAehD;AACxBgE,AAAQ,AAAI,AAAGA,AAAQ/D,AAASA,AAAQ+D;AACxCA,AAAQ,AAAI,AAAGA,AAAQ9D,AAASA,AAAQ8D;AAJ9C,AAOE,AAAM,AAAA,AAAA9C,AAACE,AAAM+B,AAAea;AAA5B,AACE,AAACpD,AAAOF,AAAW,AAACnB,AAAWyE;;AAC/B,AAACpD,AAAOuC,AAAea;;AAFzB;;AAPF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAWGC,AAEmBN,AAEP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAzC,AAAA,AAAA,AAAC6C,AAEa,AAAA,AAAmBH,AACnB,AAAA,AAAA,AAACG,AAAcL,AACRG,AACNnD,AACD,AAACsC,AAAeO,AAChB;AAAA9C;AAAA,AAAY,AAACD,AAAgBC,AAAMC;;AAAnC;;AAPd,AAQc;AAAAD;AAAA,AAAY,AAAA,AAAAS,AAACH,AAAWL,AAAWT,AAAQC,AAAQoD,AAAWH;;AAA9D;;AARd,AASc;AAAA1C;AAAA,AAAY,AAACI,AAAoBJ;;AAAjC;;AACZqD,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMN;;;AA/BtBJ;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;;;AAVJ,AAAA,AAAA,AAAMnB;;AAAN;AAAA,AAAA,AAAA,AAAAQ,AAAMR;AAAN,AAAA,AAAAS,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA","names",["re-com.input-time/time->mins","time","cljs.core/rem","re-com.input-time/time->hrs","cljs.core/quot","re-com.input-time/to-int","s","val","js/parseInt","js/isNaN","p__62376","vec__62377","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","re-com.input-time/triple->time","hr","_","mi","re-com.input-time/triple-seeking-re","re-com.input-time/extract-triple-from-text","text","cljs.core/re-matches","cljs.core/rest","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core/nil?","re-com.input-time/text->time","cljs.core.map.cljs$core$IFn$_invoke$arity$2","re-com.input-time/time->text","hrs","mins","re-com.util/pad-zero-number","re-com.input-time/valid-text?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","re-com.input-time/valid-time?","re-com.input-time/validate-arg-times","model","minimum","maximum","js/Error","re-com.input-time/force-valid-time","min","max","previous","re-com.input-time/on-new-keypress","event","text-model","current-text","cljs.core/reset!","re-com.input-time/lose-focus-if-enter","ev","re-com.input-time/on-defocus","callback","previous-val","cljs.core/deref","and__4120__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","re-com.input-time/input-time-args-desc","re-com.validate/number-or-string?","cljs.core/fn?","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-com.input-time/input-time","p__62443","map__62444","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq62441","self__4718__auto__","cljs.core/seq","args","js/goog.DEBUG","re_com.validate.validate_args.cljs$core$IFn$_invoke$arity$variadic","re-com.validate/extract-arg-data","re-com.util/deref-or-value","deref-model","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","previous-model","p__62447","map__62448","on-change","disabled?","show-icon?","hide-border?","width","height","class","style","attr","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","new-val","re-com.box/h-box"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1566006790000,1566006790000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^R",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1J","reagent/impl/batching.cljs"],[1540785317000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1J","goog/i18n/datetimesymbols.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1J","re_com/text.cljs"],[1564194668000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^10","^11","^P"]]],["^1J","goog/math/math.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","~$goog.array","~$goog.asserts"]]],["^1J","goog/string/stringformat.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","~$goog.string"]]],["^1J","goog/array/array.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^28"]]],["^1W","node_modules/prop-types/checkPropTypes.js"],[1566006790000,1566006790000,1549836454000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1J","reagent/impl/util.cljs"],[1540785317000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^23","^24","^26"]]],["^1W","node_modules/fbjs/lib/emptyFunction.js"],[1566006790000,1566006790000,1528785402000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20"]]],["^1J","goog/debug/error.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1W","node_modules/fbjs/lib/emptyObject.js"],[1566006790000,1566006790000,1528785402000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20"]]],["^1J","goog/dom/nodetype.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1J","re_com/util.cljs"],[1564194668000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","~$clojure.set","~$reagent.ratom","~$goog.date.DateTime","~$goog.date.UtcDateTime"]]],["^1W","node_modules/scheduler/cjs/scheduler.development.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20"]]],["^1J","goog/date/utcdatetime.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","~$goog.date","~$goog.date.Date","^2=","~$goog.date.Interval"]]],["^1J","reagent/ratom.cljs"],[1540785317000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^25","^23","~$reagent.impl.batching","^2;"]]],["^1W","node_modules/scheduler/cjs/scheduler.production.min.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20"]]],["^1J","goog/date/datelike.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1W","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20"]]],["^1W","node_modules/create-react-class/factory.js"],[1566006790000,1566006790000,1517346959000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^1W","node_modules/react/index.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1J","shadow/js.js"],[1566006790000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1J","goog/object/object.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1J","reagent/impl/template.cljs"],[1540785317000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^?","^26","~$clojure.walk","^25","~$reagent.impl.component","^2B","^2<","^24","^23"]]],["^1W","node_modules/react-dom/cjs/react-dom.production.min.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","^?","^2C","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1566006790000,1563067190000],["^1W","node_modules/react/cjs/react.development.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","^2C","~$module$node_modules$prop_types$checkPropTypes"]]],["^1J","re_com/validate.cljs"],[1564194668000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","~$cljs-time.core","^2;","^11","^Y","~$reagent.impl.template","^29"]]],["^1J","goog/math/long.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^28","~$goog.reflect"]]],["^1J","goog/string/internal.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1W","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20"]]],["^1W","node_modules/fbjs/lib/warning.js"],[1566006790000,1566006790000,1528785401000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1J","goog/functions/functions.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1J","reagent/impl/component.cljs"],[1540785317000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^A","^?","^25","^2B","^2<","^24","^23"]]],["^1J","clojure/walk.cljs"],[1563067190000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12"]]],["^1J","goog/structs/map.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1J","goog/date/date.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^28","~$goog.date.DateLike","~$goog.i18n.DateTimeSymbols","^29"]]],["^1W","node_modules/scheduler/index.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1J","re_com/box.cljs"],[1564194668000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^26","^P"]]],["^1J","goog/asserts/asserts.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1J","goog/uri/uri.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^27","^28","^29","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1W","node_modules/object-assign/index.js"],[1566006790000,1566006790000,1484580833000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20"]]],["^1J","goog/base.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",[]]],["^1J","goog/structs/structs.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^27","~$goog.object"]]],["^1J","clojure/string.cljs"],[1563067190000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^29","~$goog.string.StringBuffer"]]],["^1W","node_modules/create-react-class/index.js"],[1566006790000,1566006790000,1517346956000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","^?","~$module$node_modules$create_react_class$factory"]]],["^1W","node_modules/react/cjs/react.production.min.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","^2C"]]],["^1J","goog/string/string.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","~$goog.string.internal"]]],["^1J","goog/reflect/reflect.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1J","reagent/core.cljs"],[1540785317000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^?","^2O","^2J","^25","^2B","^2<","^23","^24","~$reagent.dom"]]],["^1J","re_com/input_time.cljs"],[1564194668000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^Y","^P","^[","^10","^11"]]],["^1J","goog/string/stringbuffer.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1J","goog/iter/iter.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^27","^28","~$goog.functions","~$goog.math"]]],["^1J","reagent/dom.cljs"],[1540785317000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^C","^25","^2O","^2B","^2<","^23","^24"]]],["^1W","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1566006790000,1566006790000,1549571078000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20"]]],["^1J","reagent/interop.cljs"],[1540785317000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12"]]],["^1J","cljs/core.cljs"],[1563067190000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["~$goog.math.Long","~$goog.math.Integer","^29","^33","^27","~$goog.Uri","^34"]]],["^1J","reagent/debug.cljs"],[1540785317000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12"]]],["^1J","goog/math/integer.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13"]]],["^1W","node_modules/scheduler/tracing.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1W","node_modules/react-dom/cjs/react-dom.development.js"],[1566006790000,1566006790000,499162500000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20","^?","^2C","^2M","^2K","~$module$node_modules$scheduler$tracing"]]],["^1J","clojure/set.cljs"],[1563067190000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12"]]],["^1J","cljs_time/core.cljs"],[1535349154000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","~$cljs-time.internal.core","^26","^2A","^2?","^2@","^2=","^2>"]]],["^1J","goog/uri/utils.js"],[1564811506000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^27","^28","^29"]]],["^1J","cljs_time/internal/core.cljs"],[1535349154000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^13","^12","^26","^29","~$goog.string.format","^2?"]]],["^1W","node_modules/fbjs/lib/invariant.js"],[1566006790000,1566006790000,1528785400000,"^1X",["^ ","^1Y",null,"^1Z",["^R",[]],"^1[",["^20"]]]]],"~:clj-info",["^ ","jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/re-com/re-com/2.5.0/re-com-2.5.0.jar!/re_com/core.clj",1564194668000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1531525495000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1540785317000,"jar:file:/Users/rberger/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1541378006000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1540785317000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1540785317000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/re-com/re-com/2.5.0/re-com-2.5.0.jar!/re_com/validate.clj",1564194668000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1540785317000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_com/input_time.cljs","^7",1,"^8",5,"^9",1,"^:",22],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",["^ ","^M","^N","^O","^P"],"^Q",["^R",[]],"^S","^T","^W",null,"^X",["^ ","^Y","^Y","^Z","^Y","^P","^P","^[","^[","^10","^10","^11","^11","^12","^12","^13","^13"],"^14",["^R",["^15","^16"]],"~:shadow/js-access-global",["^R",["isNaN","Error","parseInt"]],"^17",["^ ","^18","^P","^19","^P","^1:","^P","^1;","^[","^1<","^10","^1=","^10","^1>","^11","^1?","^11"],"~:defs",["^ ","~$text->time",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",50,"^8",7,"^9",50,"^:",17,"~:arglists",["^1A",["~$quote",["^1A",[["~$text"]]]]],"~:doc","return as a time int, the contents of 'text'"],"^S","~$re-com.input-time/text->time","^6","re_com/input_time.cljs","^:",17,"~:method-params",["^1A",[["^4="]]],"~:protocol-impl",null,"~:arglists-meta",["^1A",[null,null]],"^8",1,"~:variadic?",false,"^7",50,"~:ret-tag","~$number","^9",50,"~:max-fixed-arity",1,"~:fn-var",true,"^4;",["^1A",["^4<",["^1A",[["^4="]]]]],"^4>","return as a time int, the contents of 'text'"],"~$on-defocus",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",116,"^8",8,"^9",116,"^:",18,"~:private",true,"^4;",["^1A",["^4<",["^1A",[["~$text-model","~$min","~$max","~$callback","~$previous-val"]]]]],"^4>","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"^4I",true,"^S","~$re-com.input-time/on-defocus","^6","re_com/input_time.cljs","^:",18,"^4@",["^1A",[["^4J","^4K","^4L","^4M","^4N"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",116,"^4D",["^R",["~$any","~$clj-nil"]],"^9",116,"^4F",5,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^4J","^4K","^4L","^4M","^4N"]]]]],"^4>","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"~$valid-time?",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",74,"^8",7,"^9",74,"^:",18,"^4;",["^1A",["^4<",["^1A",[["~$time"]]]]]],"^S","~$re-com.input-time/valid-time?","^6","re_com/input_time.cljs","^:",18,"^4@",["^1A",[["^4S"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",74,"^4D","~$boolean","^9",74,"^4F",1,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^4S"]]]]]],"~$input-time-args-desc",["^ ","^S","~$re-com.input-time/input-time-args-desc","^6","re_com/input_time.cljs","^7",127,"^8",1,"^9",127,"^:",26,"^5",["^ ","^6","re_com/input_time.cljs","^7",127,"^8",6,"^9",127,"^:",26],"~:tag","~$cljs.core/IVector"],"~$time->hrs",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",15,"^8",8,"^9",15,"^:",17,"^4I",true,"^4;",["^1A",["^4<",["^1A",[["^4S"]]]]]],"^4I",true,"^S","~$re-com.input-time/time->hrs","^6","re_com/input_time.cljs","^:",17,"^4@",["^1A",[["^4S"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",15,"^4D","^4E","^9",15,"^4F",1,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^4S"]]]]]],"~$time->mins",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",10,"^8",8,"^9",10,"^:",18,"^4I",true,"^4;",["^1A",["^4<",["^1A",[["^4S"]]]]]],"^4I",true,"^S","~$re-com.input-time/time->mins","^6","re_com/input_time.cljs","^:",18,"^4@",["^1A",[["^4S"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",10,"^4D","^4E","^9",10,"^4F",1,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^4S"]]]]]],"~$triple->time",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",25,"^8",8,"^9",25,"^:",20,"^4I",true,"^4;",["^1A",["^4<",["^1A",[[["~$hr","~$_","~$mi"]]]]]],"^4>","Return a time integer from a triple int vector of form  [H  _  M]"],"^4I",true,"^S","~$re-com.input-time/triple->time","^6","re_com/input_time.cljs","^:",20,"^4@",["^1A",[["~$p__62376"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",25,"^4D","^4E","^9",25,"^4F",1,"^4G",true,"^4;",["^1A",["^4<",["^1A",[[["^53","~$_","^54"]]]]]],"^4>","Return a time integer from a triple int vector of form  [H  _  M]"],"~$valid-text?",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",66,"^8",7,"^9",66,"^:",18,"^4;",["^1A",["^4<",["^1A",[["^4="]]]]],"^4>","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"^S","~$re-com.input-time/valid-text?","^6","re_com/input_time.cljs","^:",18,"^4@",["^1A",[["^4="]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",66,"^4D","^4U","^9",66,"^4F",1,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^4="]]]]],"^4>","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"~$time->text",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",59,"^8",7,"^9",59,"^:",17,"^4;",["^1A",["^4<",["^1A",[["^4S"]]]]],"^4>","return a string of format HH:MM for 'time'"],"^S","~$re-com.input-time/time->text","^6","re_com/input_time.cljs","^:",17,"^4@",["^1A",[["^4S"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",59,"^4D","~$string","^9",59,"^4F",1,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^4S"]]]]],"^4>","return a string of format HH:MM for 'time'"],"~$triple-seeking-re",["^ ","^5",["^ ","^6","re_com/input_time.cljs","^7",40,"^8",3,"^9",40,"^:",20,"^4I",true],"^4I",true,"^S","~$re-com.input-time/triple-seeking-re","^6","re_com/input_time.cljs","^:",20,"^8",1,"^7",39,"^9",40,"^4X","^4P"],"~$on-new-keypress",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",101,"^8",8,"^9",101,"^:",23,"^4I",true,"^4;",["^1A",["^4<",["^1A",[["~$event","^4J"]]]]],"^4>","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"^4I",true,"^S","~$re-com.input-time/on-new-keypress","^6","re_com/input_time.cljs","^:",23,"^4@",["^1A",[["^5?","^4J"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",101,"^4D",["^R",[null,"^4P","^4Q"]],"^9",101,"^4F",2,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^5?","^4J"]]]]],"^4>","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"~$to-int",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",19,"^8",8,"^9",19,"^:",14,"^4I",true,"^4;",["^1A",["^4<",["^1A",[["~$s"]]]]],"^4>","Parse the string 's' to a valid int. On parse failure, return 0"],"^4I",true,"^S","~$re-com.input-time/to-int","^6","re_com/input_time.cljs","^:",14,"^4@",["^1A",[["~$s"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",19,"^4D",["^R",["~$js","^4E"]],"^9",19,"^4F",1,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["~$s"]]]]],"^4>","Parse the string 's' to a valid int. On parse failure, return 0"],"~$extract-triple-from-text",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",42,"^8",8,"^9",42,"^:",32,"^4I",true,"^4;",["^1A",["^4<",["^1A",[["^4="]]]]]],"^4I",true,"^S","~$re-com.input-time/extract-triple-from-text","^6","re_com/input_time.cljs","^:",32,"^4@",["^1A",[["^4="]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",42,"^4D","~$cljs.core/LazySeq","^9",42,"^4F",1,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^4="]]]]]],"~$validate-arg-times",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",82,"^8",8,"^9",82,"^:",26,"^4I",true,"^4;",["^1A",["^4<",["^1A",[["~$model","~$minimum","~$maximum"]]]]]],"^4I",true,"^S","~$re-com.input-time/validate-arg-times","^6","re_com/input_time.cljs","^:",26,"^4@",["^1A",[["^5H","^5I","^5J"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",82,"^4D","^4U","^9",82,"^4F",3,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^5H","^5I","^5J"]]]]]],"~$force-valid-time",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",90,"^8",8,"^9",90,"^:",24,"^4I",true,"^4;",["^1A",["^4<",["^1A",[["^4S","^4K","^4L","~$previous"]]]]],"^4>","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"^4I",true,"^S","~$re-com.input-time/force-valid-time","^6","re_com/input_time.cljs","^:",24,"^4@",["^1A",[["^4S","^4K","^4L","^5M"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",90,"^9",90,"^4F",4,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^4S","^4K","^4L","^5M"]]]]],"^4>","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"~$input-time",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",141,"^8",7,"^9",141,"^:",17,"^4;",["^1A",["^4<",["^1A",[["~$&",["^ ","~:keys",["^5H","^5I","^5J"],"^1D","~$args","~:or",["^ ","^5I",0,"^5J",2359]]]]]]],"^4>","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above","~:top-fn",["^ ","^4C",true,"~:fixed-arity",0,"^4F",0,"^4@",[["^1A",[["^ ","^5P",["^5H","^5I","^5J"],"^1D","^5Q","^5R",["^ ","^5I",0,"^5J",2359]]]]],"^4;",["^1A",[["~$&",["^ ","^5P",["^5H","^5I","^5J"],"^1D","^5Q","^5R",["^ ","^5I",0,"^5J",2359]]]]],"^4B",["^1A",[null]]]],"^S","~$re-com.input-time/input-time","^6","re_com/input_time.cljs","^:",17,"^5S",["^ ","^4C",true,"^5T",0,"^4F",0,"^4@",[["^1A",[["^ ","^5P",["^5H","^5I","^5J"],"^1D","^5Q","^5R",["^ ","^5I",0,"^5J",2359]]]]],"^4;",["^1A",[["~$&",["^ ","^5P",["^5H","^5I","^5J"],"^1D","^5Q","^5R",["^ ","^5I",0,"^5J",2359]]]]],"^4B",["^1A",[null]]],"^4@",[["^1A",[["^ ","^5P",["^5H","^5I","^5J"],"^1D","^5Q","^5R",["^ ","^5I",0,"^5J",2359]]]]],"^4A",null,"^5T",0,"^4B",["^1A",[null]],"^8",1,"^4C",true,"~:methods",[["^ ","^5T",0,"^4C",true,"^4X","~$function"]],"^7",141,"^4D","^4P","^9",141,"^4F",0,"^4G",true,"^4;",["^1A",[["~$&",["^ ","^5P",["^5H","^5I","^5J"],"^1D","^5Q","^5R",["^ ","^5I",0,"^5J",2359]]]]],"^4>","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above"],"~$lose-focus-if-enter",["^ ","^4:",null,"^5",["^ ","^6","re_com/input_time.cljs","^7",109,"^8",8,"^9",109,"^:",27,"^4I",true,"^4;",["^1A",["^4<",["^1A",[["~$ev"]]]]],"^4>","When Enter is pressed, force the component to lose focus"],"^4I",true,"^S","~$re-com.input-time/lose-focus-if-enter","^6","re_com/input_time.cljs","^:",27,"^4@",["^1A",[["^5Y"]]],"^4A",null,"^4B",["^1A",[null,null]],"^8",1,"^4C",false,"^7",109,"^4D",["^R",["^4U","^4Q"]],"^9",109,"^4F",1,"^4G",true,"^4;",["^1A",["^4<",["^1A",[["^5Y"]]]]],"^4>","When Enter is pressed, force the component to lose focus"]],"^16",["^ ","^N","^N","^P","^P","^12","^12","^Y","^Y","^Z","^Y"],"~:cljs.analyzer/constants",["^ ","^14",["^R",["~:description","~:children","~:div.time-icon","~:disabled","~:else","~:i.zmdi.zmdi-hc-fw-rc.zmdi-time","~:default","^S","~:value","~:maximum","~:hide-border?","~:width","~:on-blur","~:type","~:style","~:on-key-up","~:class","~:minimum","~:show-icon?","~:code","~:position","~:validate-fn","~:br","~:input","~:on-change","~:border","~:disabled?","~:required","~:height","~:span","~:margin","~:model","~:attr"]],"~:order",["^64","^S","^6J","^6<","^6D","^60","^6N","^6G","^66","^6@","^68","^6I","^6A","^69","^6:","^6K","^6?","^6=","^6O","^6L","^6B","^6E","^6H","^61","^6F","^67","^63","^6;","^6>","^62","^65","^6C","^6M"]],"^1F",["^ ","^16",["^R",[]],"^15",["^R",[]]],"^1G",["^ "],"^1H",["^13","^12","^Y","^P","^[","^10","^11"]],"^V","^T","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1V",[["^6S","~:static-fns"],true,["^6S","~:elide-asserts"],false,["^6S","~:optimize-constants"],null,["^6S","^1M"],null,["^6S","~:external-config"],null,["^6S","~:tooling-config"],null,["^6S","~:emit-constants"],null,["^6S","~:load-tests"],null,["^6S","~:infer-externs"],true,["^6S","^1O"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6S","~:fn-invoke-direct"],null,["^6S","~:source-map"],"/dev/null"]]]