["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.zip.whitespace');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.node');\ngoog.require('clojure.zip');\nrewrite_clj.zip.whitespace.whitespace_QMARK_ = (function rewrite_clj$zip$whitespace$whitespace_QMARK_(zloc){\nvar G__48860 = zloc;\nvar G__48860__$1 = (((G__48860 == null))?null:clojure.zip.node(G__48860));\nif((G__48860__$1 == null)){\nreturn null;\n} else {\nreturn (rewrite_clj.node.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.whitespace_QMARK_.cljs$core$IFn$_invoke$arity$1(G__48860__$1) : rewrite_clj.node.whitespace_QMARK_.call(null,G__48860__$1));\n}\n});\nrewrite_clj.zip.whitespace.linebreak_QMARK_ = (function rewrite_clj$zip$whitespace$linebreak_QMARK_(zloc){\nvar G__48866 = zloc;\nvar G__48866__$1 = (((G__48866 == null))?null:clojure.zip.node(G__48866));\nif((G__48866__$1 == null)){\nreturn null;\n} else {\nreturn (rewrite_clj.node.linebreak_QMARK_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.linebreak_QMARK_.cljs$core$IFn$_invoke$arity$1(G__48866__$1) : rewrite_clj.node.linebreak_QMARK_.call(null,G__48866__$1));\n}\n});\nrewrite_clj.zip.whitespace.comment_QMARK_ = (function rewrite_clj$zip$whitespace$comment_QMARK_(zloc){\nvar G__48868 = zloc;\nvar G__48868__$1 = (((G__48868 == null))?null:clojure.zip.node(G__48868));\nif((G__48868__$1 == null)){\nreturn null;\n} else {\nreturn (rewrite_clj.node.comment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.comment_QMARK_.cljs$core$IFn$_invoke$arity$1(G__48868__$1) : rewrite_clj.node.comment_QMARK_.call(null,G__48868__$1));\n}\n});\nrewrite_clj.zip.whitespace.whitespace_not_linebreak_QMARK_ = (function rewrite_clj$zip$whitespace$whitespace_not_linebreak_QMARK_(zloc){\nvar and__4120__auto__ = rewrite_clj.zip.whitespace.whitespace_QMARK_(zloc);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not(rewrite_clj.zip.whitespace.linebreak_QMARK_(zloc));\n} else {\nreturn and__4120__auto__;\n}\n});\nrewrite_clj.zip.whitespace.whitespace_or_comment_QMARK_ = (function rewrite_clj$zip$whitespace$whitespace_or_comment_QMARK_(zloc){\nvar G__48870 = zloc;\nvar G__48870__$1 = (((G__48870 == null))?null:clojure.zip.node(G__48870));\nif((G__48870__$1 == null)){\nreturn null;\n} else {\nreturn rewrite_clj.node.whitespace_or_comment_QMARK_(G__48870__$1);\n}\n});\n/**\n * Perform the given movement while the given predicate returns true.\n */\nrewrite_clj.zip.whitespace.skip = (function rewrite_clj$zip$whitespace$skip(f,p_QMARK_,zloc){\nreturn cljs.core.first(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(p_QMARK_,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(clojure.zip.end_QMARK_),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,cljs.core.iterate(f,zloc)))));\n});\n/**\n * Perform the given movement (default: `z/right`) until a non-whitespace/\n * non-comment node is encountered.\n */\nrewrite_clj.zip.whitespace.skip_whitespace = (function rewrite_clj$zip$whitespace$skip_whitespace(var_args){\nvar G__48878 = arguments.length;\nswitch (G__48878) {\ncase 1:\nreturn rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nrewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2(clojure.zip.right,zloc);\n});\n\nrewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2 = (function (f,zloc){\nreturn rewrite_clj.zip.whitespace.skip(f,rewrite_clj.zip.whitespace.whitespace_or_comment_QMARK_,zloc);\n});\n\nrewrite_clj.zip.whitespace.skip_whitespace.cljs$lang$maxFixedArity = 2;\n\n/**\n * Move left until a non-whitespace/non-comment node is encountered.\n */\nrewrite_clj.zip.whitespace.skip_whitespace_left = (function rewrite_clj$zip$whitespace$skip_whitespace_left(zloc){\nreturn rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2(clojure.zip.left,zloc);\n});\n/**\n * Prepend a whitespace node representing the given number of spaces (default: 1).\n */\nrewrite_clj.zip.whitespace.prepend_space = (function rewrite_clj$zip$whitespace$prepend_space(var_args){\nvar G__48885 = arguments.length;\nswitch (G__48885) {\ncase 1:\nreturn rewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nrewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$2(zloc,(1));\n});\n\nrewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$2 = (function (zloc,n){\nreturn clojure.zip.insert_left(zloc,(rewrite_clj.node.spaces.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.spaces.cljs$core$IFn$_invoke$arity$1(n) : rewrite_clj.node.spaces.call(null,n)));\n});\n\nrewrite_clj.zip.whitespace.prepend_space.cljs$lang$maxFixedArity = 2;\n\n/**\n * Append a whitespace node representing the given number of spaces (default: 1).\n */\nrewrite_clj.zip.whitespace.append_space = (function rewrite_clj$zip$whitespace$append_space(var_args){\nvar G__48887 = arguments.length;\nswitch (G__48887) {\ncase 1:\nreturn rewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nrewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$2(zloc,(1));\n});\n\nrewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$2 = (function (zloc,n){\nreturn clojure.zip.insert_right(zloc,(rewrite_clj.node.spaces.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.spaces.cljs$core$IFn$_invoke$arity$1(n) : rewrite_clj.node.spaces.call(null,n)));\n});\n\nrewrite_clj.zip.whitespace.append_space.cljs$lang$maxFixedArity = 2;\n\n/**\n * Prepend a newlines node representing the given number of newlines (default: 1).\n */\nrewrite_clj.zip.whitespace.prepend_newline = (function rewrite_clj$zip$whitespace$prepend_newline(var_args){\nvar G__48899 = arguments.length;\nswitch (G__48899) {\ncase 1:\nreturn rewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nrewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$2(zloc,(1));\n});\n\nrewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$2 = (function (zloc,n){\nreturn clojure.zip.insert_left(zloc,(rewrite_clj.node.newlines.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.newlines.cljs$core$IFn$_invoke$arity$1(n) : rewrite_clj.node.newlines.call(null,n)));\n});\n\nrewrite_clj.zip.whitespace.prepend_newline.cljs$lang$maxFixedArity = 2;\n\n/**\n * Append a newline node representing the given number of newlines (default: 1).\n */\nrewrite_clj.zip.whitespace.append_newline = (function rewrite_clj$zip$whitespace$append_newline(var_args){\nvar G__48901 = arguments.length;\nswitch (G__48901) {\ncase 1:\nreturn rewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn rewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nrewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$1 = (function (zloc){\nreturn rewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$2(zloc,(1));\n});\n\nrewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$2 = (function (zloc,n){\nreturn clojure.zip.insert_right(zloc,(rewrite_clj.node.newlines.cljs$core$IFn$_invoke$arity$1 ? rewrite_clj.node.newlines.cljs$core$IFn$_invoke$arity$1(n) : rewrite_clj.node.newlines.call(null,n)));\n});\n\nrewrite_clj.zip.whitespace.append_newline.cljs$lang$maxFixedArity = 2;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/zip/whitespace.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",31],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$react-flip-move","~$module$node_modules$react_flip_move$dist$react_flip_move_cjs","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.zip.whitespace","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.node","^U","~$node","^U","~$clojure.zip","^W","~$z","^W","~$cljs.core","^X","~$goog","^Y"],"~:seen",["^N",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^X","^X"],"~:form",["~#list",["~$ns","^P",["^13",["^[",["^U","~:as","^V"],["^W","^15","~$z"]]]]],"~:flags",["^ ","^[",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^X","^U","^W"]],"^R","^P","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/zip/whitespace.cljs"],"~:compiled-at",1566016973963,"~:resource-name","rewrite_clj/zip/whitespace.cljs","~:warnings",[],"~:source","(ns rewrite-clj.zip.whitespace\n  (:require [rewrite-clj.node :as node]\n            [clojure.zip :as z]))\n\n;; ## Predicates\n\n(defn whitespace?\n  [zloc]\n  (some-> zloc z/node node/whitespace?))\n\n(defn linebreak?\n  [zloc]\n  (some-> zloc z/node node/linebreak?))\n\n(defn comment?\n  [zloc]\n  (some-> zloc z/node node/comment?))\n\n(defn whitespace-not-linebreak?\n  [zloc]\n  (and\n   (whitespace? zloc)\n   (not (linebreak? zloc))))\n\n(defn whitespace-or-comment?\n  [zloc]\n  (some-> zloc z/node node/whitespace-or-comment?))\n\n\n;; ## Movement\n\n(defn skip\n  \"Perform the given movement while the given predicate returns true.\"\n  [f p? zloc]\n  (->> (iterate f zloc)\n       (take-while identity)\n       (take-while (complement z/end?))\n       (drop-while p?)\n       (first)))\n\n(defn skip-whitespace\n  \"Perform the given movement (default: `z/right`) until a non-whitespace/\n   non-comment node is encountered.\"\n  ([zloc] (skip-whitespace z/right zloc))\n  ([f zloc] (skip f whitespace-or-comment? zloc)))\n\n(defn skip-whitespace-left\n  \"Move left until a non-whitespace/non-comment node is encountered.\"\n  [zloc]\n  (skip-whitespace z/left zloc))\n\n;; ## Insertion\n\n(defn prepend-space\n  \"Prepend a whitespace node representing the given number of spaces (default: 1).\"\n  ([zloc] (prepend-space zloc 1))\n  ([zloc n]\n   (z/insert-left zloc (node/spaces n))))\n\n(defn append-space\n  \"Append a whitespace node representing the given number of spaces (default: 1).\"\n  ([zloc] (append-space zloc 1))\n  ([zloc n]\n   (z/insert-right zloc (node/spaces n))))\n\n(defn prepend-newline\n  \"Prepend a newlines node representing the given number of newlines (default: 1).\"\n  ([zloc] (prepend-newline zloc 1))\n  ([zloc n]\n   (z/insert-left zloc (node/newlines n))))\n\n(defn append-newline\n  \"Append a newline node representing the given number of newlines (default: 1).\"\n  ([zloc] (append-newline zloc 1))\n  ([zloc n]\n   (z/insert-right zloc (node/newlines n))))\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj.zip.whitespace/whitespace?","zloc","G__48860","clojure.zip/node","rewrite-clj.node/whitespace?","rewrite-clj.zip.whitespace/linebreak?","G__48866","rewrite-clj.node/linebreak?","rewrite-clj.zip.whitespace/comment?","G__48868","rewrite-clj.node/comment?","rewrite-clj.zip.whitespace/whitespace-not-linebreak?","and__4120__auto__","cljs.core/not","rewrite-clj.zip.whitespace/whitespace-or-comment?","G__48870","rewrite-clj.node/whitespace-or-comment?","rewrite-clj.zip.whitespace/skip","f","p?","cljs.core/iterate","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core/complement","clojure.zip/end?","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.core/first","var_args","G__48878","rewrite-clj.zip.whitespace/skip-whitespace","js/Error","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2","clojure.zip/right","rewrite-clj.zip.whitespace/skip-whitespace-left","clojure.zip/left","G__48885","rewrite-clj.zip.whitespace/prepend-space","rewrite_clj.zip.whitespace.prepend_space.cljs$core$IFn$_invoke$arity$2","n","clojure.zip/insert-left","rewrite-clj.node/spaces","G__48887","rewrite-clj.zip.whitespace/append-space","rewrite_clj.zip.whitespace.append_space.cljs$core$IFn$_invoke$arity$2","clojure.zip/insert-right","G__48899","rewrite-clj.zip.whitespace/prepend-newline","rewrite_clj.zip.whitespace.prepend_newline.cljs$core$IFn$_invoke$arity$2","rewrite-clj.node/newlines","G__48901","rewrite-clj.zip.whitespace/append-newline","rewrite_clj.zip.whitespace.append_newline.cljs$core$IFn$_invoke$arity$2"]]],"~:cache-keys",["~#cmap",[["^1:","rewrite_clj/node/token.cljs"],[1541378006000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^Y","^X","~$rewrite-clj.node.protocols"]]],["^1:","cljs/tools/reader/impl/utils.cljs"],[1532582253000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","~$clojure.string","~$goog.string"]]],["^1:","goog/math/math.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","~$goog.array","~$goog.asserts"]]],["^1:","goog/array/array.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^1O"]]],["^1:","goog/debug/error.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y"]]],["^1:","goog/dom/nodetype.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y"]]],["^1:","cljs/tools/reader/impl/inspect.cljs"],[1532582253000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X"]]],["^1:","cljs/tools/reader.cljs"],[1532582253000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^1N","^1M","~$goog.string.StringBuffer"]]],["^1:","rewrite_clj/node/forms.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K"]]],["^1:","goog/object/object.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y"]]],"~:SHADOW-TIMESTAMP",[1566006790000,1563067190000],["^1:","goog/math/long.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^1O","~$goog.reflect"]]],["^1:","rewrite_clj/node/reader_macro.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K","~$rewrite-clj.node.whitespace"]]],["^1:","goog/string/internal.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y"]]],["^1:","goog/functions/functions.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y"]]],["^1:","clojure/walk.cljs"],[1563067190000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X"]]],["^1:","goog/structs/map.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1:","rewrite_clj/node/meta.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K","^1W"]]],["^1:","rewrite_clj/node/stringz.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K","~$cljs.tools.reader","^1L"]]],["^1:","rewrite_clj/node/comment.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K"]]],["^1:","rewrite_clj/node/keyword.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K"]]],["^1:","goog/asserts/asserts.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1:","goog/uri/uri.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^1N","^1O","^1M","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1:","rewrite_clj/node/protocols.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1L"]]],["^1:","rewrite_clj/node/seq.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K"]]],["^1:","rewrite_clj/node/uneval.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K"]]],["^1:","goog/base.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",[]]],["^1:","goog/structs/structs.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^1N","~$goog.object"]]],["^1:","cljs/tools/reader/impl/errors.cljs"],[1532582253000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1P","^1L","~$cljs.tools.reader.impl.inspect"]]],["^1:","rewrite_clj/node/whitespace.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K"]]],["^1:","rewrite_clj/node/coercer.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^1K","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^1W"]]],["^1:","clojure/string.cljs"],[1563067190000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1M","^1T"]]],["^1:","goog/string/string.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","~$goog.string.internal"]]],["^1:","goog/reflect/reflect.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y"]]],["^1:","rewrite_clj/node/fn.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K","~$clojure.walk"]]],["^1:","rewrite_clj/node.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","~$rewrite-clj.node.coercer","^1K","^2:","^2A","^1W","^2B","^28","^29","^2>","^2<","^2@","^2;","^2=","^2?"]]],["^1:","clojure/zip.cljs"],[1563067190000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X"]]],["^1:","goog/string/stringbuffer.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y"]]],["^1:","cljs/tools/reader/reader_types.cljs"],[1532582253000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1Q","^1M","^1T"]]],["^1:","goog/iter/iter.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^1N","^1O","~$goog.functions","~$goog.math"]]],["^1:","rewrite_clj/node/quote.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1K"]]],["^1:","cljs/tools/reader/impl/commons.cljs"],[1532582253000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^1S","^1P","^1Q"]]],["^1:","cljs/core.cljs"],[1563067190000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["~$goog.math.Long","~$goog.math.Integer","^1M","^26","^1N","~$goog.Uri","^1T"]]],["^1:","goog/math/integer.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y"]]],["^1:","goog/uri/utils.js"],[1564811506000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^1N","^1O","^1M"]]],["^1:","rewrite_clj/zip/whitespace.cljs"],[1541378006000,"^1G",["^ ","^1H",null,"^1I",["^N",[]],"^1J",["^Y","^X","^U","^W"]]]]],"~:clj-info",["^ ","jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/cljs/tools/reader/reader_types.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1531525495000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1541378006000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1563067189000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1532582253000,"jar:file:/Users/rberger/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1563067190000,"jar:file:/Users/rberger/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1532582253000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",1,"^8",5,"^9",1,"^:",31],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",null,"^M",["^N",[]],"^O","^P","^S",null,"^T",["^ ","^U","^U","^V","^U","^W","^W","~$z","^W","^X","^X","^Y","^Y"],"^Z",["^N",["^["]],"~:shadow/js-access-global",["^N",["Error"]],"^10",null,"~:defs",["^ ","~$whitespace?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",7,"^8",7,"^9",7,"^:",18,"~:arglists",["^13",["~$quote",["^13",[["~$zloc"]]]]]],"^O","~$rewrite-clj.zip.whitespace/whitespace?","^6","rewrite_clj/zip/whitespace.cljs","^:",18,"~:method-params",["^13",[["^3A"]]],"~:protocol-impl",null,"~:arglists-meta",["^13",[null,null]],"^8",1,"~:variadic?",false,"^7",7,"~:ret-tag",["^N",["~$any","~$clj-nil"]],"^9",7,"~:max-fixed-arity",1,"~:fn-var",true,"^3?",["^13",["^3@",["^13",[["^3A"]]]]]],"~$linebreak?",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",11,"^8",7,"^9",11,"^:",17,"^3?",["^13",["^3@",["^13",[["^3A"]]]]]],"^O","~$rewrite-clj.zip.whitespace/linebreak?","^6","rewrite_clj/zip/whitespace.cljs","^:",17,"^3C",["^13",[["^3A"]]],"^3D",null,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"^7",11,"^3G",["^N",["^3H","^3I"]],"^9",11,"^3J",1,"^3K",true,"^3?",["^13",["^3@",["^13",[["^3A"]]]]]],"~$skip",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",32,"^8",7,"^9",32,"^:",11,"^3?",["^13",["^3@",["^13",[["~$f","~$p?","^3A"]]]]],"~:doc","Perform the given movement while the given predicate returns true."],"^O","~$rewrite-clj.zip.whitespace/skip","^6","rewrite_clj/zip/whitespace.cljs","^:",11,"^3C",["^13",[["~$f","^3O","^3A"]]],"^3D",null,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"^7",32,"^3G",["^N",["^3H","^3I"]],"^9",32,"^3J",3,"^3K",true,"^3?",["^13",["^3@",["^13",[["~$f","^3O","^3A"]]]]],"^3P","Perform the given movement while the given predicate returns true."],"~$prepend-space",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",54,"^8",7,"^9",54,"^:",20,"^3?",["^13",["^3@",["^13",[["^3A"],["^3A","~$n"]]]]],"^3P","Prepend a whitespace node representing the given number of spaces (default: 1).","~:top-fn",["^ ","^3F",false,"~:fixed-arity",2,"^3J",2,"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3E",["^13",[null,null]]]],"^O","~$rewrite-clj.zip.whitespace/prepend-space","^6","rewrite_clj/zip/whitespace.cljs","^:",20,"^3S",["^ ","^3F",false,"^3T",2,"^3J",2,"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3E",["^13",[null,null]]],"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3D",null,"^3T",2,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"~:methods",[["^ ","^3T",1,"^3F",false,"~:tag","^3H"],["^ ","^3T",2,"^3F",false,"^3W",["^N",["~$clj","~$cljs.core/MetaFn","^3I"]]]],"^7",54,"^9",54,"^3J",2,"^3K",true,"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3P","Prepend a whitespace node representing the given number of spaces (default: 1)."],"~$append-newline",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",72,"^8",7,"^9",72,"^:",21,"^3?",["^13",["^3@",["^13",[["^3A"],["^3A","~$n"]]]]],"^3P","Append a newline node representing the given number of newlines (default: 1).","^3S",["^ ","^3F",false,"^3T",2,"^3J",2,"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3E",["^13",[null,null]]]],"^O","~$rewrite-clj.zip.whitespace/append-newline","^6","rewrite_clj/zip/whitespace.cljs","^:",21,"^3S",["^ ","^3F",false,"^3T",2,"^3J",2,"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3E",["^13",[null,null]]],"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3D",null,"^3T",2,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"^3V",[["^ ","^3T",1,"^3F",false,"^3W","^3H"],["^ ","^3T",2,"^3F",false,"^3W",["^N",["^3X","^3Y","^3I"]]]],"^7",72,"^9",72,"^3J",2,"^3K",true,"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3P","Append a newline node representing the given number of newlines (default: 1)."],"~$prepend-newline",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",66,"^8",7,"^9",66,"^:",22,"^3?",["^13",["^3@",["^13",[["^3A"],["^3A","~$n"]]]]],"^3P","Prepend a newlines node representing the given number of newlines (default: 1).","^3S",["^ ","^3F",false,"^3T",2,"^3J",2,"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3E",["^13",[null,null]]]],"^O","~$rewrite-clj.zip.whitespace/prepend-newline","^6","rewrite_clj/zip/whitespace.cljs","^:",22,"^3S",["^ ","^3F",false,"^3T",2,"^3J",2,"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3E",["^13",[null,null]]],"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3D",null,"^3T",2,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"^3V",[["^ ","^3T",1,"^3F",false,"^3W","^3H"],["^ ","^3T",2,"^3F",false,"^3W",["^N",["^3X","^3Y","^3I"]]]],"^7",66,"^9",66,"^3J",2,"^3K",true,"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3P","Prepend a newlines node representing the given number of newlines (default: 1)."],"~$append-space",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",60,"^8",7,"^9",60,"^:",19,"^3?",["^13",["^3@",["^13",[["^3A"],["^3A","~$n"]]]]],"^3P","Append a whitespace node representing the given number of spaces (default: 1).","^3S",["^ ","^3F",false,"^3T",2,"^3J",2,"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3E",["^13",[null,null]]]],"^O","~$rewrite-clj.zip.whitespace/append-space","^6","rewrite_clj/zip/whitespace.cljs","^:",19,"^3S",["^ ","^3F",false,"^3T",2,"^3J",2,"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3E",["^13",[null,null]]],"^3C",["^13",[["^3A"],["^3A","~$n"]]],"^3D",null,"^3T",2,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"^3V",[["^ ","^3T",1,"^3F",false,"^3W","^3H"],["^ ","^3T",2,"^3F",false,"^3W",["^N",["^3X","^3Y","^3I"]]]],"^7",60,"^9",60,"^3J",2,"^3K",true,"^3?",["^13",[["^3A"],["^3A","~$n"]]],"^3P","Append a whitespace node representing the given number of spaces (default: 1)."],"~$skip-whitespace-left",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",47,"^8",7,"^9",47,"^:",27,"^3?",["^13",["^3@",["^13",[["^3A"]]]]],"^3P","Move left until a non-whitespace/non-comment node is encountered."],"^O","~$rewrite-clj.zip.whitespace/skip-whitespace-left","^6","rewrite_clj/zip/whitespace.cljs","^:",27,"^3C",["^13",[["^3A"]]],"^3D",null,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"^7",47,"^3G",["^N",["^3H","^3I"]],"^9",47,"^3J",1,"^3K",true,"^3?",["^13",["^3@",["^13",[["^3A"]]]]],"^3P","Move left until a non-whitespace/non-comment node is encountered."],"~$skip-whitespace",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",41,"^8",7,"^9",41,"^:",22,"^3?",["^13",["^3@",["^13",[["^3A"],["~$f","^3A"]]]]],"^3P","Perform the given movement (default: `z/right`) until a non-whitespace/\n   non-comment node is encountered.","^3S",["^ ","^3F",false,"^3T",2,"^3J",2,"^3C",["^13",[["^3A"],["~$f","^3A"]]],"^3?",["^13",[["^3A"],["~$f","^3A"]]],"^3E",["^13",[null,null]]]],"^O","~$rewrite-clj.zip.whitespace/skip-whitespace","^6","rewrite_clj/zip/whitespace.cljs","^:",22,"^3S",["^ ","^3F",false,"^3T",2,"^3J",2,"^3C",["^13",[["^3A"],["~$f","^3A"]]],"^3?",["^13",[["^3A"],["~$f","^3A"]]],"^3E",["^13",[null,null]]],"^3C",["^13",[["^3A"],["~$f","^3A"]]],"^3D",null,"^3T",2,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"^3V",[["^ ","^3T",1,"^3F",false,"^3W","^3H"],["^ ","^3T",2,"^3F",false,"^3W",["^N",["^3H","^3I"]]]],"^7",41,"^9",41,"^3J",2,"^3K",true,"^3?",["^13",[["^3A"],["~$f","^3A"]]],"^3P","Perform the given movement (default: `z/right`) until a non-whitespace/\n   non-comment node is encountered."],"~$comment?",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",15,"^8",7,"^9",15,"^:",15,"^3?",["^13",["^3@",["^13",[["^3A"]]]]]],"^O","~$rewrite-clj.zip.whitespace/comment?","^6","rewrite_clj/zip/whitespace.cljs","^:",15,"^3C",["^13",[["^3A"]]],"^3D",null,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"^7",15,"^3G",["^N",["^3H","^3I"]],"^9",15,"^3J",1,"^3K",true,"^3?",["^13",["^3@",["^13",[["^3A"]]]]]],"~$whitespace-not-linebreak?",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",19,"^8",7,"^9",19,"^:",32,"^3?",["^13",["^3@",["^13",[["^3A"]]]]]],"^O","~$rewrite-clj.zip.whitespace/whitespace-not-linebreak?","^6","rewrite_clj/zip/whitespace.cljs","^:",32,"^3C",["^13",[["^3A"]]],"^3D",null,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"^7",19,"^3G",["^N",["~$boolean","^3H","^3I"]],"^9",19,"^3J",1,"^3K",true,"^3?",["^13",["^3@",["^13",[["^3A"]]]]]],"~$whitespace-or-comment?",["^ ","^3>",null,"^5",["^ ","^6","rewrite_clj/zip/whitespace.cljs","^7",25,"^8",7,"^9",25,"^:",29,"^3?",["^13",["^3@",["^13",[["^3A"]]]]]],"^O","~$rewrite-clj.zip.whitespace/whitespace-or-comment?","^6","rewrite_clj/zip/whitespace.cljs","^:",29,"^3C",["^13",[["^3A"]]],"^3D",null,"^3E",["^13",[null,null]],"^8",1,"^3F",false,"^7",25,"^3G",["^N",["^3H","^3I"]],"^9",25,"^3J",1,"^3K",true,"^3?",["^13",["^3@",["^13",[["^3A"]]]]]]],"^11",["^ ","^X","^X"],"^16",["^ ","^[",["^N",[]]],"^17",["^ "],"^18",["^Y","^X","^U","^W"]],"^R","^P","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1F",[["^4A","~:static-fns"],true,["^4A","~:elide-asserts"],false,["^4A","~:optimize-constants"],null,["^4A","^1="],null,["^4A","~:external-config"],null,["^4A","~:tooling-config"],null,["^4A","~:emit-constants"],null,["^4A","~:load-tests"],null,["^4A","~:infer-externs"],true,["^4A","^1?"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4A","~:fn-invoke-direct"],null,["^4A","~:source-map"],"/dev/null"]]]